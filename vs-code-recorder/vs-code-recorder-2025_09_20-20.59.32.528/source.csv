Sequence,Time,File,RangeOffset,RangeLength,Text,Language,Type
1,2,"dev/ABC424a.py",0,0,"# ABC424a\n# 2025-09-20 20:38:35\n\ndef main():\n    # 関数定義スペース\n\n    def func():\n        ...\n\n    ...    \n    # 入力スペース\n\n    N = splitN(input())\n    H, W = splitA(input())\n    A = splitA(input())\n    S = splitS(input())\n    S = splitB(input())\n\n    ...\n\n    # 処理スペース\n\n\n\n\n\n\n    ...\n\n\n\n# テストケース中枢処理\ndef case():\n    TESTCASE = 1\n    # TESTCASE = int(input()) # テストケース数の指定\n    for _ in range(TESTCASE):\n        try:\n            main()\n        except solvedException:\n            continue\n        # raise unSolvedExeption\n\n\n# インポート\nimport sys, itertools, math, heapq\nfrom collections import defaultdict, deque\nfrom sortedcontainers import SortedSet, SortedList, SortedDict  # CPython?\n\n# 定数・環境設定\nsys.setrecursionlimit(10**8)\nsys.set_int_max_str_digits(0)\ndict = defaultdict\nUPPER_ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""\nLOWER_ALPHABET=""abcdefghijklmnopqrstuvwxyz""\nMOD = 998244353\nMAX = 10**18\nLRUD = [(0, 1), (0, -1), (1, 0), (-1, 0)]\nLURULDRD = [(-1, -1), (-1, 1), (1, -1), (1, 1)]\n\n# 各種関数定義(超圧縮)\n## 便利関数\ndef printe(*values,sep="" "",end=""\n""):print(*values,sep=sep,end=end); fin()\ndef prin(stop=False,sep="" "",end=""\n"",file=sys.stdout):return (lambda*values:printe(*values,sep=sep,end=end)) if stop else (lambda*values:print(*values,sep=sep,end=end,file=file))\ndef yes(f=True): printe(""Yes"") if (f) else None\ndef no(f=True): printe(""No"") if (f) else None\ndef debug(*values,sep="" "",end=""\n""): print(*values,sep=sep,end=end,file=sys.stderr)\ndef printYN(f:bool): yes() if f else no()\ndef fin(f=True): raise solvedException if f else None\n## 分割関数\ndef split(value:str|list,sep:str="" "",func:callable=str) -> list:\n    result = []\n    if type(value) == list:\n        for i in range(len(value)):\n            result.append(split(value[i],sep))\n        return result\n    else:\n        if sep in value:\n            for i in value.split(sep):\n                result.append(func(i))\n        else:\n            result.append(func(value))\n        return result\n## 入力受け取り用\ndef input():return(sys.stdin.readline()).rstrip() #入力定数倍\ndef splitS(value:str|list,sep:str="" "")->str:return split(value,sep)[0] #文字列・分割して最初\ndef splitN(value:str|list,sep:str="" "")->int:return split(value,sep,int)[0] # 整数・分割して最初\ndef splitB(value:str|list,sep:str="" "")->list:return list(split(value,sep)) # 文字列・分割してすべて\ndef splitA(value:str|list,sep:str="" "")->list:return list(split(value,sep,int)) # 整数・分割してすべて\n\n# 例外クラス\nclass solvedException(Exception): pass # 処理打ち切り例外\nclass unSolvedExeption(Exception): # 回答未出力例外\n    def __init__(description = ""解答が出力されていません。""): super().__init__(description)\n\n# 実行\nif __name__ == ""__main__"":\n    case()\n",python,tab
2,48851,"dev/ABC424a.py",120,0,"# ",python,content
3,50928,"dev/ABC424a.py",149,1,"",python,content
4,51111,"dev/ABC424a.py",147,2,"",python,content
5,51511,"dev/ABC424a.py",146,1,"",python,content
6,52549,"dev/ABC424a.py",146,0,"H",python,content
7,52841,"dev/ABC424a.py",147,0,", ",python,content
8,53428,"dev/ABC424a.py",149,0,"W",python,content
9,54499,"dev/ABC424a.py",173,0,"# ",python,content
10,54885,"dev/ABC424a.py",199,0,"# ",python,content
11,55304,"dev/ABC424a.py",225,0,"# ",python,content
12,61165,"dev/ABC424a.py",146,0,"# ",python,content
13,62925,"dev/ABC424a.py",175,2,"",python,content
14,66556,"dev/ABC424a.py",194,0,")",python,content
14,66556,"dev/ABC424a.py",194,0,")",python,content
15,66556,"dev/ABC424a.py",179,0,"(",python,content
16,67192,"dev/ABC424a.py",179,0,"s",python,content
17,67328,"dev/ABC424a.py",180,0,"e",python,content
18,67426,"dev/ABC424a.py",181,0,"t",python,content
19,72478,"dev/ABC424a.py",199,0,")",python,content
19,72478,"dev/ABC424a.py",199,0,")",python,content
20,72478,"dev/ABC424a.py",179,0,"(",python,content
21,73092,"dev/ABC424a.py",179,0,";",python,content
22,73169,"dev/ABC424a.py",180,0,"e",python,content
23,73649,"dev/ABC424a.py",180,1,"",python,content
24,73811,"dev/ABC424a.py",179,1,"",python,content
25,73955,"dev/ABC424a.py",179,0,"l",python,content
26,74057,"dev/ABC424a.py",180,0,"e",python,content
27,74107,"dev/ABC424a.py",181,0,"n",python,content
28,75489,"dev/ABC424a.py",175,1,"",python,content
29,75973,"dev/ABC424a.py",175,0,"a",python,content
30,77532,"dev/ABC424a.py",176,0,"b",python,content
31,77672,"dev/ABC424a.py",177,0,"c",python,content
32,80478,"dev/ABC424a.py",259,0,"    ",python,content
33,81136,"dev/ABC424a.py",263,0,"p",python,content
34,81428,"dev/ABC424a.py",263,1,"",python,content
35,81623,"dev/ABC424a.py",263,0,"y",python,content
36,82023,"dev/ABC424a.py",263,1,"",python,content
37,82223,"dev/ABC424a.py",263,0,"p",python,content
38,82304,"dev/ABC424a.py",264,0,"r",python,content
39,82406,"dev/ABC424a.py",265,0,"i",python,content
40,82479,"dev/ABC424a.py",266,0,"n",python,content
41,82555,"dev/ABC424a.py",267,0,"t",python,content
42,82847,"dev/ABC424a.py",268,0,"Y",python,content
43,83071,"dev/ABC424a.py",269,0,"N",python,content
44,83309,"dev/ABC424a.py",270,0,"()",python,content
45,84056,"dev/ABC424a.py",271,0,"b",python,content
46,84335,"dev/ABC424a.py",271,1,"",python,content
47,84583,"dev/ABC424a.py",271,0,"b",python,content
48,84877,"dev/ABC424a.py",271,1,"",python,content
49,84947,"dev/ABC424a.py",271,0,"a",python,content
50,85082,"dev/ABC424a.py",272,0,"b",python,content
51,85227,"dev/ABC424a.py",273,0,"c",python,content
52,85527,"dev/ABC424a.py",274,0,"=",python,content
53,85689,"dev/ABC424a.py",275,0,"=",python,content
54,87998,"dev/ABC424a.py",276,0,"2",python,content
55,120629,"dev/ABC424b.py",0,0,"# ABC424b\n# 2025-09-20 20:38:35\n\ndef main():\n    # 関数定義スペース\n\n    def func():\n        ...\n\n    ...    \n    # 入力スペース\n\n    N = splitN(input())\n    H, W = splitA(input())\n    A = splitA(input())\n    S = splitS(input())\n    S = splitB(input())\n\n    ...\n\n    # 処理スペース\n\n\n\n\n\n\n    ...\n\n\n\n# テストケース中枢処理\ndef case():\n    TESTCASE = 1\n    # TESTCASE = int(input()) # テストケース数の指定\n    for _ in range(TESTCASE):\n        try:\n            main()\n        except solvedException:\n            continue\n        # raise unSolvedExeption\n\n\n# インポート\nimport sys, itertools, math, heapq\nfrom collections import defaultdict, deque\nfrom sortedcontainers import SortedSet, SortedList, SortedDict  # CPython?\n\n# 定数・環境設定\nsys.setrecursionlimit(10**8)\nsys.set_int_max_str_digits(0)\ndict = defaultdict\nUPPER_ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""\nLOWER_ALPHABET=""abcdefghijklmnopqrstuvwxyz""\nMOD = 998244353\nMAX = 10**18\nLRUD = [(0, 1), (0, -1), (1, 0), (-1, 0)]\nLURULDRD = [(-1, -1), (-1, 1), (1, -1), (1, 1)]\n\n# 各種関数定義(超圧縮)\n## 便利関数\ndef printe(*values,sep="" "",end=""\n""):print(*values,sep=sep,end=end); fin()\ndef prin(stop=False,sep="" "",end=""\n"",file=sys.stdout):return (lambda*values:printe(*values,sep=sep,end=end)) if stop else (lambda*values:print(*values,sep=sep,end=end,file=file))\ndef yes(f=True): printe(""Yes"") if (f) else None\ndef no(f=True): printe(""No"") if (f) else None\ndef debug(*values,sep="" "",end=""\n""): print(*values,sep=sep,end=end,file=sys.stderr)\ndef printYN(f:bool): yes() if f else no()\ndef fin(f=True): raise solvedException if f else None\n## 分割関数\ndef split(value:str|list,sep:str="" "",func:callable=str) -> list:\n    result = []\n    if type(value) == list:\n        for i in range(len(value)):\n            result.append(split(value[i],sep))\n        return result\n    else:\n        if sep in value:\n            for i in value.split(sep):\n                result.append(func(i))\n        else:\n            result.append(func(value))\n        return result\n## 入力受け取り用\ndef input():return(sys.stdin.readline()).rstrip() #入力定数倍\ndef splitS(value:str|list,sep:str="" "")->str:return split(value,sep)[0] #文字列・分割して最初\ndef splitN(value:str|list,sep:str="" "")->int:return split(value,sep,int)[0] # 整数・分割して最初\ndef splitB(value:str|list,sep:str="" "")->list:return list(split(value,sep)) # 文字列・分割してすべて\ndef splitA(value:str|list,sep:str="" "")->list:return list(split(value,sep,int)) # 整数・分割してすべて\n\n# 例外クラス\nclass solvedException(Exception): pass # 処理打ち切り例外\nclass unSolvedExeption(Exception): # 回答未出力例外\n    def __init__(description = ""解答が出力されていません。""): super().__init__(description)\n\n# 実行\nif __name__ == ""__main__"":\n    case()\n",python,tab
56,132241,"dev/ABC424a.py",0,0,"# ABC424a\n# 2025-09-20 20:38:35\n\ndef main():\n    # 関数定義スペース\n\n    def func():\n        ...\n\n    ...    \n    # 入力スペース\n\n    # N = splitN(input())\n    # H, W = splitA(input())\n    abc = len(set(splitA(input())))\n    # S = splitS(input())\n    # S = splitB(input())\n    printYN(abc==2)\n    ...\n\n    # 処理スペース\n\n\n\n\n\n\n    ...\n\n\n\n# テストケース中枢処理\ndef case():\n    TESTCASE = 1\n    # TESTCASE = int(input()) # テストケース数の指定\n    for _ in range(TESTCASE):\n        try:\n            main()\n        except solvedException:\n            continue\n        # raise unSolvedExeption\n\n\n# インポート\nimport sys, itertools, math, heapq\nfrom collections import defaultdict, deque\nfrom sortedcontainers import SortedSet, SortedList, SortedDict  # CPython?\n\n# 定数・環境設定\nsys.setrecursionlimit(10**8)\nsys.set_int_max_str_digits(0)\ndict = defaultdict\nUPPER_ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""\nLOWER_ALPHABET=""abcdefghijklmnopqrstuvwxyz""\nMOD = 998244353\nMAX = 10**18\nLRUD = [(0, 1), (0, -1), (1, 0), (-1, 0)]\nLURULDRD = [(-1, -1), (-1, 1), (1, -1), (1, 1)]\n\n# 各種関数定義(超圧縮)\n## 便利関数\ndef printe(*values,sep="" "",end=""\n""):print(*values,sep=sep,end=end); fin()\ndef prin(stop=False,sep="" "",end=""\n"",file=sys.stdout):return (lambda*values:printe(*values,sep=sep,end=end)) if stop else (lambda*values:print(*values,sep=sep,end=end,file=file))\ndef yes(f=True): printe(""Yes"") if (f) else None\ndef no(f=True): printe(""No"") if (f) else None\ndef debug(*values,sep="" "",end=""\n""): print(*values,sep=sep,end=end,file=sys.stderr)\ndef printYN(f:bool): yes() if f else no()\ndef fin(f=True): raise solvedException if f else None\n## 分割関数\ndef split(value:str|list,sep:str="" "",func:callable=str) -> list:\n    result = []\n    if type(value) == list:\n        for i in range(len(value)):\n            result.append(split(value[i],sep))\n        return result\n    else:\n        if sep in value:\n            for i in value.split(sep):\n                result.append(func(i))\n        else:\n            result.append(func(value))\n        return result\n## 入力受け取り用\ndef input():return(sys.stdin.readline()).rstrip() #入力定数倍\ndef splitS(value:str|list,sep:str="" "")->str:return split(value,sep)[0] #文字列・分割して最初\ndef splitN(value:str|list,sep:str="" "")->int:return split(value,sep,int)[0] # 整数・分割して最初\ndef splitB(value:str|list,sep:str="" "")->list:return list(split(value,sep)) # 文字列・分割してすべて\ndef splitA(value:str|list,sep:str="" "")->list:return list(split(value,sep,int)) # 整数・分割してすべて\n\n# 例外クラス\nclass solvedException(Exception): pass # 処理打ち切り例外\nclass unSolvedExeption(Exception): # 回答未出力例外\n    def __init__(description = ""解答が出力されていません。""): super().__init__(description)\n\n# 実行\nif __name__ == ""__main__"":\n    case()\n",python,tab
57,141733,"dev/ABC424a.py",275,1,"",python,content
58,141868,"dev/ABC424a.py",274,1,"",python,content
59,142164,"dev/ABC424a.py",274,0,"<",python,content
60,143335,"dev/ABC424a.py",275,0,"=",python,content
61,202505,"dev/ABC424b.py",0,0,"# ABC424b\n# 2025-09-20 20:38:35\n\ndef main():\n    # 関数定義スペース\n\n    def func():\n        ...\n\n    ...    \n    # 入力スペース\n\n    N = splitN(input())\n    H, W = splitA(input())\n    A = splitA(input())\n    S = splitS(input())\n    S = splitB(input())\n\n    ...\n\n    # 処理スペース\n\n\n\n\n\n\n    ...\n\n\n\n# テストケース中枢処理\ndef case():\n    TESTCASE = 1\n    # TESTCASE = int(input()) # テストケース数の指定\n    for _ in range(TESTCASE):\n        try:\n            main()\n        except solvedException:\n            continue\n        # raise unSolvedExeption\n\n\n# インポート\nimport sys, itertools, math, heapq\nfrom collections import defaultdict, deque\nfrom sortedcontainers import SortedSet, SortedList, SortedDict  # CPython?\n\n# 定数・環境設定\nsys.setrecursionlimit(10**8)\nsys.set_int_max_str_digits(0)\ndict = defaultdict\nUPPER_ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""\nLOWER_ALPHABET=""abcdefghijklmnopqrstuvwxyz""\nMOD = 998244353\nMAX = 10**18\nLRUD = [(0, 1), (0, -1), (1, 0), (-1, 0)]\nLURULDRD = [(-1, -1), (-1, 1), (1, -1), (1, 1)]\n\n# 各種関数定義(超圧縮)\n## 便利関数\ndef printe(*values,sep="" "",end=""\n""):print(*values,sep=sep,end=end); fin()\ndef prin(stop=False,sep="" "",end=""\n"",file=sys.stdout):return (lambda*values:printe(*values,sep=sep,end=end)) if stop else (lambda*values:print(*values,sep=sep,end=end,file=file))\ndef yes(f=True): printe(""Yes"") if (f) else None\ndef no(f=True): printe(""No"") if (f) else None\ndef debug(*values,sep="" "",end=""\n""): print(*values,sep=sep,end=end,file=sys.stderr)\ndef printYN(f:bool): yes() if f else no()\ndef fin(f=True): raise solvedException if f else None\n## 分割関数\ndef split(value:str|list,sep:str="" "",func:callable=str) -> list:\n    result = []\n    if type(value) == list:\n        for i in range(len(value)):\n            result.append(split(value[i],sep))\n        return result\n    else:\n        if sep in value:\n            for i in value.split(sep):\n                result.append(func(i))\n        else:\n            result.append(func(value))\n        return result\n## 入力受け取り用\ndef input():return(sys.stdin.readline()).rstrip() #入力定数倍\ndef splitS(value:str|list,sep:str="" "")->str:return split(value,sep)[0] #文字列・分割して最初\ndef splitN(value:str|list,sep:str="" "")->int:return split(value,sep,int)[0] # 整数・分割して最初\ndef splitB(value:str|list,sep:str="" "")->list:return list(split(value,sep)) # 文字列・分割してすべて\ndef splitA(value:str|list,sep:str="" "")->list:return list(split(value,sep,int)) # 整数・分割してすべて\n\n# 例外クラス\nclass solvedException(Exception): pass # 処理打ち切り例外\nclass unSolvedExeption(Exception): # 回答未出力例外\n    def __init__(description = ""解答が出力されていません。""): super().__init__(description)\n\n# 実行\nif __name__ == ""__main__"":\n    case()\n",python,tab
62,257176,"dev/ABC424b.py",120,0,"# ",python,content
63,259106,"dev/ABC424b.py",146,0,"N",python,content
64,259472,"dev/ABC424b.py",147,0,",",python,content
65,259858,"dev/ABC424b.py",148,0,"M",python,content
66,260850,"dev/ABC424b.py",149,1,"",python,content
67,261953,"dev/ABC424b.py",151,1,"",python,content
68,262398,"dev/ABC424b.py",151,0,"K",python,content
69,264263,"dev/ABC424b.py",150,1,"",python,content
70,267842,"dev/ABC424b.py",169,0,"\n    ",python,content
71,268100,"dev/ABC424b.py",174,0,"f",python,content
72,268195,"dev/ABC424b.py",175,0,"o",python,content
73,268276,"dev/ABC424b.py",176,0,"r",python,content
74,268406,"dev/ABC424b.py",177,0," ",python,content
75,268509,"dev/ABC424b.py",178,0,"i",python,content
76,268607,"dev/ABC424b.py",179,0," ",python,content
77,268698,"dev/ABC424b.py",180,0,"i",python,content
78,268779,"dev/ABC424b.py",181,0,"n",python,content
79,268812,"dev/ABC424b.py",182,0," ",python,content
80,268951,"dev/ABC424b.py",183,0,"r",python,content
81,269136,"dev/ABC424b.py",184,0,"a",python,content
82,269214,"dev/ABC424b.py",185,0,"n",python,content
83,269398,"dev/ABC424b.py",186,0,"g",python,content
84,269464,"dev/ABC424b.py",187,0,"e",python,content
85,269722,"dev/ABC424b.py",188,0,"()",python,content
86,271118,"dev/ABC424b.py",189,0,"K",python,content
87,273323,"dev/ABC424b.py",191,0,":",python,content
88,273496,"dev/ABC424b.py",192,0,"\n        ",python,content
89,276199,"dev/ABC424b.py",193,8,"",python,content
89,276199,"dev/ABC424b.py",193,8,"",python,content
90,276199,"dev/ABC424b.py",116,26,"",python,content
91,277361,"dev/ABC424b.py",115,0,"\n",python,content
92,277828,"dev/ABC424b.py",116,0,"    ",python,content
93,279705,"dev/ABC424b.py",120,0,"p",python,content
94,279874,"dev/ABC424b.py",121,0,"o",python,content
95,280323,"dev/ABC424b.py",121,1,"",python,content
96,282061,"dev/ABC424b.py",121,0,"e",python,content
97,282236,"dev/ABC424b.py",122,0,"o",python,content
98,282453,"dev/ABC424b.py",123,0,"p",python,content
99,282545,"dev/ABC424b.py",124,0,"l",python,content
100,282869,"dev/ABC424b.py",125,0,"e",python,content
101,284481,"dev/ABC424b.py",126,0," ",python,content
102,284664,"dev/ABC424b.py",127,0,"=",python,content
103,284809,"dev/ABC424b.py",128,0," ",python,content
104,284927,"dev/ABC424b.py",129,0,"d",python,content
105,285004,"dev/ABC424b.py",130,0,"i",python,content
106,285134,"dev/ABC424b.py",131,0,"c",python,content
107,285248,"dev/ABC424b.py",132,0,"t",python,content
108,285522,"dev/ABC424b.py",133,0,"()",python,content
109,289780,"dev/ABC424b.py",187,0,"        ",python,content
110,304667,"dev/ABC424b.py",187,8,"",python,content
110,304667,"dev/ABC424b.py",187,8,"",python,content
111,304667,"dev/ABC424b.py",134,0,"l",python,content
112,304816,"dev/ABC424b.py",135,0,"a",python,content
113,304908,"dev/ABC424b.py",136,0,"m",python,content
114,305456,"dev/ABC424b.py",134,3,"lambda",python,content
115,305924,"dev/ABC424b.py",140,0,":",python,content
116,306412,"dev/ABC424b.py",141,0,"[]",python,content
117,307301,"dev/ABC424b.py",142,0,"-",python,content
118,307705,"dev/ABC424b.py",142,1,"",python,content
119,308734,"dev/ABC424b.py",142,0,"F",python,content
120,308900,"dev/ABC424b.py",143,0,"a",python,content
121,308996,"dev/ABC424b.py",144,0,"l",python,content
122,309091,"dev/ABC424b.py",145,0,"s",python,content
123,309452,"dev/ABC424b.py",146,0,"e",python,content
124,310032,"dev/ABC424b.py",148,0,"*",python,content
125,314090,"dev/ABC424b.py",149,0,"M",python,content
126,319927,"dev/ABC424b.py",203,0,"        ",python,content
127,323166,"dev/ABC424b.py",211,0,"p",python,content
128,323330,"dev/ABC424b.py",212,0,"e",python,content
129,323930,"dev/ABC424b.py",211,2,"people",python,content
130,324213,"dev/ABC424b.py",217,0,"[]",python,content
131,327318,"dev/ABC424b.py",217,2,"",python,content
132,327557,"dev/ABC424b.py",211,6,"",python,content
133,328915,"dev/ABC424b.py",203,8,"",python,content
134,329294,"dev/ABC424b.py",202,1,"",python,content
135,330275,"dev/ABC424b.py",202,0,"\n        ",python,content
136,333485,"dev/ABC424b.py",211,5,"",python,content
137,335683,"dev/ABC424b.py",211,1,"",python,content
138,336851,"dev/ABC424b.py",211,0,"a",python,content
139,337041,"dev/ABC424b.py",212,0,",",python,content
140,337341,"dev/ABC424b.py",213,0,"v",python,content
141,337965,"dev/ABC424b.py",213,1,"",python,content
142,338063,"dev/ABC424b.py",213,0,"b",python,content
143,340845,"dev/ABC424b.py",232,0,"\n        ",python,content
144,341354,"dev/ABC424b.py",241,0,"p",python,content
145,341501,"dev/ABC424b.py",242,0,"e",python,content
146,341662,"dev/ABC424b.py",243,0,"o",python,content
147,341903,"dev/ABC424b.py",244,0,"e",python,content
148,342000,"dev/ABC424b.py",245,0,"p",python,content
149,342046,"dev/ABC424b.py",246,0,"l",python,content
150,342669,"dev/ABC424b.py",247,0,"  ",python,content
151,343045,"dev/ABC424b.py",247,2,"",python,content
152,343284,"dev/ABC424b.py",241,6,"",python,content
153,343549,"dev/ABC424b.py",241,0,"p",python,content
154,343701,"dev/ABC424b.py",242,0,"e",python,content
155,344008,"dev/ABC424b.py",243,0,"o",python,content
156,344376,"dev/ABC424b.py",241,3,"people",python,content
157,344649,"dev/ABC424b.py",247,0,"[]",python,content
158,345697,"dev/ABC424b.py",248,0,"a",python,content
159,346623,"dev/ABC424b.py",250,0,".",python,content
160,347073,"dev/ABC424b.py",250,1,"",python,content
161,348256,"dev/ABC424b.py",250,0,"[]",python,content
162,352972,"dev/ABC424b.py",251,0,"b",python,content
163,353196,"dev/ABC424b.py",252,0,"-",python,content
164,353346,"dev/ABC424b.py",253,0,"1",python,content
165,356318,"dev/ABC424b.py",255,0,"=",python,content
166,356721,"dev/ABC424b.py",256,0,"T",python,content
167,356878,"dev/ABC424b.py",257,0,"r",python,content
168,357041,"dev/ABC424b.py",258,0,"u",python,content
169,357076,"dev/ABC424b.py",259,0,"e",python,content
170,367591,"dev/ABC424b.py",120,0,"# ",python,content
171,369761,"dev/ABC424b.py",153,0,"\n    ",python,content
172,370261,"dev/ABC424b.py",158,0,"p",python,content
173,370323,"dev/ABC424b.py",159,0,"e",python,content
174,370469,"dev/ABC424b.py",160,0,"o",python,content
175,372216,"dev/ABC424b.py",160,1,"",python,content
176,372632,"dev/ABC424b.py",160,0,"o",python,content
177,372873,"dev/ABC424b.py",161,0,"p",python,content
178,372921,"dev/ABC424b.py",162,0,"l",python,content
179,373094,"dev/ABC424b.py",163,0,"e",python,content
180,373421,"dev/ABC424b.py",164,0,"[]",python,content
181,374111,"dev/ABC424b.py",164,2,"",python,content
182,374368,"dev/ABC424b.py",164,0,"=",python,content
183,375016,"dev/ABC424b.py",165,0,"[]",python,content
184,377316,"dev/ABC424b.py",166,0,"0",python,content
185,378273,"dev/ABC424b.py",168,0,"*",python,content
186,378897,"dev/ABC424b.py",169,0,"N",python,content
187,379870,"dev/ABC424b.py",169,1,"",python,content
188,381302,"dev/ABC424b.py",169,0,"N",python,content
189,385138,"dev/ABC424b.py",268,0,"-",python,content
190,385264,"dev/ABC424b.py",269,0,"1",python,content
191,387260,"dev/ABC424b.py",280,1,"",python,content
192,387411,"dev/ABC424b.py",279,1,"",python,content
193,387558,"dev/ABC424b.py",278,1,"",python,content
194,387734,"dev/ABC424b.py",277,1,"",python,content
195,388047,"dev/ABC424b.py",277,0,"+",python,content
196,388192,"dev/ABC424b.py",278,0,"=",python,content
197,388491,"dev/ABC424b.py",279,0,"1",python,content
198,389954,"dev/ABC424b.py",276,1,"",python,content
199,392282,"dev/ABC424b.py",280,48,"",python,content
200,392803,"dev/ABC424b.py",280,0,"\n",python,content
201,393499,"dev/ABC424b.py",280,0,"    ",python,content
202,394494,"dev/ABC424b.py",284,0,"\n    ",python,content
202,394494,"dev/ABC424b.py",284,0,"\n    ",python,content
203,394494,"dev/ABC424b.py",280,4,"",python,content
204,394725,"dev/ABC424b.py",285,0,"f",python,content
205,394756,"dev/ABC424b.py",286,0,"o",python,content
206,394911,"dev/ABC424b.py",287,0,"r",python,content
207,395033,"dev/ABC424b.py",288,0," ",python,content
208,395084,"dev/ABC424b.py",289,0,"i",python,content
209,395254,"dev/ABC424b.py",290,0," ",python,content
210,395281,"dev/ABC424b.py",291,0,"i",python,content
211,395374,"dev/ABC424b.py",292,0,"n",python,content
212,395452,"dev/ABC424b.py",293,0," ",python,content
213,395548,"dev/ABC424b.py",294,0,"r",python,content
214,395754,"dev/ABC424b.py",295,0,"a",python,content
215,395786,"dev/ABC424b.py",296,0,"n",python,content
216,395912,"dev/ABC424b.py",297,0,"g",python,content
217,395982,"dev/ABC424b.py",298,0,"e",python,content
218,396206,"dev/ABC424b.py",299,0,"_",python,content
219,396216,"dev/ABC424b.py",300,0,"()",python,content
220,396584,"dev/ABC424b.py",300,2,"",python,content
221,396758,"dev/ABC424b.py",299,1,"",python,content
222,397067,"dev/ABC424b.py",299,0,"()",python,content
223,398170,"dev/ABC424b.py",300,0,"N",python,content
224,398599,"dev/ABC424b.py",302,0,":",python,content
225,398624,"dev/ABC424b.py",303,0,"\n        ",python,content
226,399650,"dev/ABC424b.py",312,0,"p",python,content
227,399753,"dev/ABC424b.py",313,0,"e",python,content
228,399906,"dev/ABC424b.py",314,0,"o",python,content
229,400306,"dev/ABC424b.py",312,3,"people",python,content
230,400812,"dev/ABC424b.py",318,0,"[]",python,content
231,401249,"dev/ABC424b.py",319,0,"i",python,content
232,411423,"dev/ABC424b.py",281,41,"",python,content
233,412384,"dev/ABC424b.py",279,0,"\n        ",python,content
234,412789,"dev/ABC424b.py",288,0,"i",python,content
235,412877,"dev/ABC424b.py",289,0,"f",python,content
236,413069,"dev/ABC424b.py",290,0," ",python,content
237,414301,"dev/ABC424b.py",291,0,"p",python,content
238,414516,"dev/ABC424b.py",292,0,"e",python,content
239,415158,"dev/ABC424b.py",291,2,"people",python,content
240,415362,"dev/ABC424b.py",297,0,"[]",python,content
241,415742,"dev/ABC424b.py",298,0,"a",python,content
242,416167,"dev/ABC424b.py",299,0,"-",python,content
243,416364,"dev/ABC424b.py",300,0,"1",python,content
244,418967,"dev/ABC424b.py",302,0,"[]",python,content
245,419226,"dev/ABC424b.py",303,0,"b",python,content
246,419478,"dev/ABC424b.py",304,0,"-",python,content
247,419587,"dev/ABC424b.py",305,0,"1",python,content
248,420590,"dev/ABC424b.py",307,0,"=",python,content
249,420754,"dev/ABC424b.py",308,0,"=",python,content
250,422478,"dev/ABC424b.py",309,0,"M",python,content
251,423516,"dev/ABC424b.py",310,0,":",python,content
252,423549,"dev/ABC424b.py",311,0,"\n            ",python,content
253,429138,"dev/ABC424b.py",312,12,"",python,content
253,429138,"dev/ABC424b.py",312,12,"",python,content
254,429138,"dev/ABC424b.py",170,0,"\n    ",python,content
255,429564,"dev/ABC424b.py",175,0,"w",python,content
256,429654,"dev/ABC424b.py",176,0,"i",python,content
257,429733,"dev/ABC424b.py",177,0,"n",python,content
258,429896,"dev/ABC424b.py",178,0,"n",python,content
259,430004,"dev/ABC424b.py",179,0,"e",python,content
260,430150,"dev/ABC424b.py",180,0,"r",python,content
261,430273,"dev/ABC424b.py",181,0," ",python,content
262,430418,"dev/ABC424b.py",182,0,"=",python,content
263,430562,"dev/ABC424b.py",183,0," ",python,content
264,430650,"dev/ABC424b.py",184,0,"[]",python,content
265,432476,"dev/ABC424b.py",328,0,"            ",python,content
266,432956,"dev/ABC424b.py",340,0,"w",python,content
267,432993,"dev/ABC424b.py",341,0,"i",python,content
268,433142,"dev/ABC424b.py",342,0,"n",python,content
269,433226,"dev/ABC424b.py",343,0,"n",python,content
270,433527,"dev/ABC424b.py",340,4,"winner",python,content
271,433701,"dev/ABC424b.py",346,0,".",python,content
272,434053,"dev/ABC424b.py",347,0,"a",python,content
273,434132,"dev/ABC424b.py",348,0,"o",python,content
274,434292,"dev/ABC424b.py",349,0,"o",python,content
275,434690,"dev/ABC424b.py",349,1,"",python,content
276,434886,"dev/ABC424b.py",348,1,"",python,content
277,435096,"dev/ABC424b.py",348,0,"p",python,content
278,435262,"dev/ABC424b.py",349,0,"p",python,content
279,435552,"dev/ABC424b.py",347,3,"append",python,content
280,435878,"dev/ABC424b.py",353,0,"()",python,content
281,437362,"dev/ABC424b.py",354,0,"a",python,content
282,437467,"dev/ABC424b.py",355,0,"-",python,content
283,437642,"dev/ABC424b.py",356,0,"1",python,content
284,439898,"dev/ABC424b.py",356,1,"",python,content
285,440078,"dev/ABC424b.py",355,1,"",python,content
286,445580,"dev/ABC424b.py",357,0,"\n",python,content
287,453167,"dev/ABC424b.py",357,0,"\n",python,content
288,459129,"dev/ABC424b.py",358,0,"    ",python,content
289,459644,"dev/ABC424b.py",362,0,"p",python,content
290,459828,"dev/ABC424b.py",363,0,"i",python,content
291,460132,"dev/ABC424b.py",363,1,"",python,content
292,461014,"dev/ABC424b.py",363,0,"r",python,content
293,461035,"dev/ABC424b.py",364,0,"i",python,content
294,461129,"dev/ABC424b.py",365,0,"n",python,content
295,461271,"dev/ABC424b.py",366,0,"t",python,content
296,461763,"dev/ABC424b.py",362,5,"",python,content
297,462111,"dev/ABC424b.py",362,0,"o",python,content
298,462191,"dev/ABC424b.py",363,0,"u",python,content
299,462287,"dev/ABC424b.py",364,0,"t",python,content
300,462859,"dev/ABC424b.py",362,3,"",python,content
301,463575,"dev/ABC424b.py",362,0,"@",python,content
302,463922,"dev/ABC424b.py",363,0,"r",python,content
303,464130,"dev/ABC424b.py",363,1,"",python,content
304,464272,"dev/ABC424b.py",362,1,"",python,content
305,464446,"dev/ABC424b.py",362,0,"p",python,content
306,464523,"dev/ABC424b.py",363,0,"r",python,content
307,464621,"dev/ABC424b.py",364,0,"i",python,content
308,464704,"dev/ABC424b.py",365,0,"n",python,content
309,464751,"dev/ABC424b.py",366,0,"t",python,content
310,465062,"dev/ABC424b.py",367,0,"()",python,content
311,465424,"dev/ABC424b.py",368,0,"*",python,content
312,466875,"dev/ABC424b.py",369,0,"w",python,content
313,466989,"dev/ABC424b.py",370,0,"i",python,content
314,467073,"dev/ABC424b.py",371,0,"n",python,content
315,467212,"dev/ABC424b.py",372,0,"n",python,content
316,467277,"dev/ABC424b.py",373,0,"e",python,content
317,467573,"dev/ABC424b.py",369,5,"winner",python,content
318,475170,"dev/ABC424b.py",170,16,"",python,content
318,475170,"dev/ABC424b.py",170,16,"",python,content
319,475170,"dev/ABC424b.py",154,0,"    winner = []\n",python,content
320,475330,"dev/ABC424b.py",186,28,"",python,content
320,475330,"dev/ABC424b.py",186,28,"",python,content
321,475330,"dev/ABC424b.py",170,0,"    N,M,K = splitA(input())\n",python,content
322,483054,"dev/ABC424b.py",287,1,"",python,content
323,483213,"dev/ABC424b.py",287,1,"",python,content
324,483356,"dev/ABC424b.py",287,1,"",python,content
325,483502,"dev/ABC424b.py",287,1,"",python,content
326,483656,"dev/ABC424b.py",287,1,"",python,content
327,487084,"dev/ABC424b.py",313,1,"",python,content
328,487237,"dev/ABC424b.py",313,1,"",python,content
329,487386,"dev/ABC424b.py",313,1,"",python,content
330,487555,"dev/ABC424b.py",313,1,"",python,content
331,487656,"dev/ABC424b.py",313,1,"",python,content
332,525373,"dev/ABC424c.py",0,0,"# ABC424c\n# 2025-09-20 20:38:35\n\ndef main():\n    # 関数定義スペース\n\n    def func():\n        ...\n\n    ...    \n    # 入力スペース\n\n    N = splitN(input())\n    H, W = splitA(input())\n    A = splitA(input())\n    S = splitS(input())\n    S = splitB(input())\n\n    ...\n\n    # 処理スペース\n\n\n\n\n\n\n    ...\n\n\n\n# テストケース中枢処理\ndef case():\n    TESTCASE = 1\n    # TESTCASE = int(input()) # テストケース数の指定\n    for _ in range(TESTCASE):\n        try:\n            main()\n        except solvedException:\n            continue\n        # raise unSolvedExeption\n\n\n# インポート\nimport sys, itertools, math, heapq\nfrom collections import defaultdict, deque\nfrom sortedcontainers import SortedSet, SortedList, SortedDict  # CPython?\n\n# 定数・環境設定\nsys.setrecursionlimit(10**8)\nsys.set_int_max_str_digits(0)\ndict = defaultdict\nUPPER_ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""\nLOWER_ALPHABET=""abcdefghijklmnopqrstuvwxyz""\nMOD = 998244353\nMAX = 10**18\nLRUD = [(0, 1), (0, -1), (1, 0), (-1, 0)]\nLURULDRD = [(-1, -1), (-1, 1), (1, -1), (1, 1)]\n\n# 各種関数定義(超圧縮)\n## 便利関数\ndef printe(*values,sep="" "",end=""\n""):print(*values,sep=sep,end=end); fin()\ndef prin(stop=False,sep="" "",end=""\n"",file=sys.stdout):return (lambda*values:printe(*values,sep=sep,end=end)) if stop else (lambda*values:print(*values,sep=sep,end=end,file=file))\ndef yes(f=True): printe(""Yes"") if (f) else None\ndef no(f=True): printe(""No"") if (f) else None\ndef debug(*values,sep="" "",end=""\n""): print(*values,sep=sep,end=end,file=sys.stderr)\ndef printYN(f:bool): yes() if f else no()\ndef fin(f=True): raise solvedException if f else None\n## 分割関数\ndef split(value:str|list,sep:str="" "",func:callable=str) -> list:\n    result = []\n    if type(value) == list:\n        for i in range(len(value)):\n            result.append(split(value[i],sep))\n        return result\n    else:\n        if sep in value:\n            for i in value.split(sep):\n                result.append(func(i))\n        else:\n            result.append(func(value))\n        return result\n## 入力受け取り用\ndef input():return(sys.stdin.readline()).rstrip() #入力定数倍\ndef splitS(value:str|list,sep:str="" "")->str:return split(value,sep)[0] #文字列・分割して最初\ndef splitN(value:str|list,sep:str="" "")->int:return split(value,sep,int)[0] # 整数・分割して最初\ndef splitB(value:str|list,sep:str="" "")->list:return list(split(value,sep)) # 文字列・分割してすべて\ndef splitA(value:str|list,sep:str="" "")->list:return list(split(value,sep,int)) # 整数・分割してすべて\n\n# 例外クラス\nclass solvedException(Exception): pass # 処理打ち切り例外\nclass unSolvedExeption(Exception): # 回答未出力例外\n    def __init__(description = ""解答が出力されていません。""): super().__init__(description)\n\n# 実行\nif __name__ == ""__main__"":\n    case()\n",python,tab
333,535892,"dev/ABC424c.py",144,0,"# ",python,content
334,536338,"dev/ABC424c.py",173,0,"# ",python,content
335,536712,"dev/ABC424c.py",199,0,"# ",python,content
336,537175,"dev/ABC424c.py",225,0,"# ",python,content
337,538755,"dev/ABC424c.py",144,2,"",python,content
338,539919,"dev/ABC424c.py",139,0,"\n    ",python,content
339,540334,"dev/ABC424c.py",144,0,"f",python,content
340,540365,"dev/ABC424c.py",145,0,"o",python,content
341,540519,"dev/ABC424c.py",146,0,"r",python,content
342,540671,"dev/ABC424c.py",147,0," ",python,content
343,540773,"dev/ABC424c.py",148,0,"i",python,content
344,540919,"dev/ABC424c.py",149,0," ",python,content
345,540965,"dev/ABC424c.py",150,0,"i",python,content
346,541039,"dev/ABC424c.py",151,0,"n",python,content
347,541124,"dev/ABC424c.py",152,0," ",python,content
348,541529,"dev/ABC424c.py",153,0,"r",python,content
349,541716,"dev/ABC424c.py",154,0,"a",python,content
350,541749,"dev/ABC424c.py",155,0,"n",python,content
351,541871,"dev/ABC424c.py",156,0,"g",python,content
352,541951,"dev/ABC424c.py",157,0,"e",python,content
353,542719,"dev/ABC424c.py",158,0,"()",python,content
354,543030,"dev/ABC424c.py",159,0,"N",python,content
355,543526,"dev/ABC424c.py",161,0,":",python,content
356,543560,"dev/ABC424c.py",162,0,"\n        ",python,content
357,544045,"dev/ABC424c.py",171,5,"",python,content
358,544678,"dev/ABC424c.py",171,1,"",python,content
359,544932,"dev/ABC424c.py",171,0,"a",python,content
360,546071,"dev/ABC424c.py",174,1,"",python,content
361,546520,"dev/ABC424c.py",174,0,"b",python,content
362,619387,"dev/ABC424c.py",139,0,"\n    ",python,content
363,619629,"dev/ABC424c.py",144,0,"s",python,content
364,619790,"dev/ABC424c.py",145,0,"k",python,content
365,619989,"dev/ABC424c.py",146,0,"i",python,content
366,620091,"dev/ABC424c.py",147,0,"l",python,content
367,620289,"dev/ABC424c.py",148,0,"l",python,content
368,621046,"dev/ABC424c.py",149,0,"s",python,content
369,621299,"dev/ABC424c.py",150,0," ",python,content
370,621446,"dev/ABC424c.py",151,0,"^",python,content
371,623244,"dev/ABC424c.py",152,0," ",python,content
372,623758,"dev/ABC424c.py",152,1,"",python,content
373,623926,"dev/ABC424c.py",151,1,"",python,content
374,624069,"dev/ABC424c.py",150,1,"",python,content
375,624589,"dev/ABC424c.py",150,0," ",python,content
376,624824,"dev/ABC424c.py",151,0,"~",python,content
377,625012,"dev/ABC424c.py",152,0," ",python,content
378,625616,"dev/ABC424c.py",152,1,"",python,content
379,625725,"dev/ABC424c.py",151,1,"",python,content
380,625970,"dev/ABC424c.py",151,0,"=",python,content
381,626116,"dev/ABC424c.py",152,0," ",python,content
382,626545,"dev/ABC424c.py",153,0,"d",python,content
383,626616,"dev/ABC424c.py",154,0,"i",python,content
384,626770,"dev/ABC424c.py",155,0,"c",python,content
385,626849,"dev/ABC424c.py",156,0,"t",python,content
386,627117,"dev/ABC424c.py",157,0,"()",python,content
387,629167,"dev/ABC424c.py",213,0,"\n        ",python,content
388,629464,"dev/ABC424c.py",222,0,"d",python,content
389,629759,"dev/ABC424c.py",222,1,"",python,content
390,629918,"dev/ABC424c.py",222,0,"s",python,content
391,630007,"dev/ABC424c.py",223,0,"k",python,content
392,630152,"dev/ABC424c.py",224,0,"i",python,content
393,630278,"dev/ABC424c.py",225,0,"l",python,content
394,630357,"dev/ABC424c.py",226,0,"l",python,content
395,630748,"dev/ABC424c.py",222,5,"skills",python,content
396,631134,"dev/ABC424c.py",228,0,"[]",python,content
397,632110,"dev/ABC424c.py",229,0,"a",python,content
398,633491,"dev/ABC424c.py",229,1,"",python,content
399,633684,"dev/ABC424c.py",228,2,"",python,content
400,633946,"dev/ABC424c.py",228,5,"",python,content
401,634095,"dev/ABC424c.py",222,6,"",python,content
402,635807,"dev/ABC424c.py",222,74,"",python,content
403,652242,"dev/ABC424c.py",222,0,"s",python,content
404,652376,"dev/ABC424c.py",223,0,"k",python,content
405,652614,"dev/ABC424c.py",224,0,"i",python,content
406,652714,"dev/ABC424c.py",225,0,"l",python,content
407,652868,"dev/ABC424c.py",222,4,"skills",python,content
408,653090,"dev/ABC424c.py",228,0,"[]",python,content
409,653533,"dev/ABC424c.py",229,0,"a",python,content
410,653619,"dev/ABC424c.py",230,0,"a",python,content
411,654077,"dev/ABC424c.py",230,1,"",python,content
412,655292,"dev/ABC424c.py",230,1,"",python,content
413,655460,"dev/ABC424c.py",229,1,"",python,content
414,657255,"dev/ABC424c.py",228,1,"",python,content
415,657573,"dev/ABC424c.py",222,6,"",python,content
416,659362,"dev/ABC424c.py",222,0,"i",python,content
417,660059,"dev/ABC424c.py",223,0,"f",python,content
418,661004,"dev/ABC424c.py",222,2,"",python,content
419,674819,"dev/ABC424c.py",159,0,"\n    ",python,content
420,680956,"dev/ABC424c.py",160,4,"",python,content
420,680956,"dev/ABC424c.py",160,4,"",python,content
421,680956,"dev/ABC424c.py",144,6,"",python,content
422,681252,"dev/ABC424c.py",144,0,"g",python,content
423,681271,"dev/ABC424c.py",145,0,"o",python,content
424,681448,"dev/ABC424c.py",146,0,"t",python,content
425,681753,"dev/ABC424c.py",147,0,"_",python,content
426,682546,"dev/ABC424c.py",148,0,"s",python,content
427,682692,"dev/ABC424c.py",149,0,"k",python,content
428,682813,"dev/ABC424c.py",150,0,"i",python,content
429,682960,"dev/ABC424c.py",151,0,"l",python,content
430,683112,"dev/ABC424c.py",152,0,"l",python,content
431,683267,"dev/ABC424c.py",153,0,"s",python,content
432,684205,"dev/ABC424c.py",161,2,"",python,content
433,684392,"dev/ABC424c.py",157,4,"",python,content
434,685036,"dev/ABC424c.py",157,0,"[]",python,content
435,688295,"dev/ABC424c.py",223,0,"i",python,content
436,688351,"dev/ABC424c.py",224,0,"f",python,content
437,688529,"dev/ABC424c.py",225,0," ",python,content
438,689176,"dev/ABC424c.py",226,0,"a",python,content
439,689421,"dev/ABC424c.py",227,0," ",python,content
440,691290,"dev/ABC424c.py",228,0,"=",python,content
441,691496,"dev/ABC424c.py",229,0,"=",python,content
442,691736,"dev/ABC424c.py",230,0," ",python,content
443,692510,"dev/ABC424c.py",230,1,"",python,content
444,692692,"dev/ABC424c.py",229,1,"",python,content
445,692888,"dev/ABC424c.py",228,1,"",python,content
446,693326,"dev/ABC424c.py",226,2,"",python,content
447,693496,"dev/ABC424c.py",223,3,"",python,content
448,693640,"dev/ABC424c.py",215,8,"",python,content
449,696474,"dev/ABC424c.py",160,0,"    ",python,content
450,697312,"dev/ABC424c.py",164,0,"S",python,content
451,697359,"dev/ABC424c.py",165,0,"K",python,content
452,697548,"dev/ABC424c.py",166,0,"I",python,content
453,698336,"dev/ABC424c.py",166,1,"",python,content
454,698493,"dev/ABC424c.py",165,1,"",python,content
455,698641,"dev/ABC424c.py",164,1,"",python,content
456,698799,"dev/ABC424c.py",164,0,"s",python,content
457,699026,"dev/ABC424c.py",165,0,"K",python,content
458,699284,"dev/ABC424c.py",166,0,"I",python,content
459,699448,"dev/ABC424c.py",167,0,"L",python,content
460,699629,"dev/ABC424c.py",168,0,"L",python,content
461,699896,"dev/ABC424c.py",169,0," ",python,content
462,700006,"dev/ABC424c.py",170,0,"~",python,content
463,700034,"dev/ABC424c.py",171,0,"=",python,content
464,700181,"dev/ABC424c.py",172,0," ",python,content
465,700396,"dev/ABC424c.py",172,1,"",python,content
466,700546,"dev/ABC424c.py",171,1,"",python,content
467,700706,"dev/ABC424c.py",170,1,"",python,content
468,700948,"dev/ABC424c.py",164,6,"",python,content
469,701347,"dev/ABC424c.py",164,0,"S",python,content
470,701500,"dev/ABC424c.py",165,0,"K",python,content
471,701644,"dev/ABC424c.py",166,0,"I",python,content
472,701772,"dev/ABC424c.py",167,0,"L",python,content
473,701926,"dev/ABC424c.py",168,0,"L",python,content
474,702105,"dev/ABC424c.py",169,0," ",python,content
475,702252,"dev/ABC424c.py",170,0,"=",python,content
476,702421,"dev/ABC424c.py",171,0," ",python,content
477,702522,"dev/ABC424c.py",172,0,"[]",python,content
478,703658,"dev/ABC424c.py",229,0,"    ",python,content
479,703924,"dev/ABC424c.py",233,0,"    ",python,content
480,704328,"dev/ABC424c.py",237,0,"S",python,content
481,704777,"dev/ABC424c.py",238,0,"K",python,content
482,704943,"dev/ABC424c.py",239,0,"I",python,content
483,705332,"dev/ABC424c.py",237,3,"SKILL",python,content
484,705709,"dev/ABC424c.py",242,0,".",python,content
485,705825,"dev/ABC424c.py",243,0,"a",python,content
486,705948,"dev/ABC424c.py",244,0,"p",python,content
487,706091,"dev/ABC424c.py",245,0,"p",python,content
488,706161,"dev/ABC424c.py",246,0,"e",python,content
489,706299,"dev/ABC424c.py",247,0,"n",python,content
490,706364,"dev/ABC424c.py",248,0,"d",python,content
491,706649,"dev/ABC424c.py",243,6,"append",python,content
492,707080,"dev/ABC424c.py",249,0,"()",python,content
493,707293,"dev/ABC424c.py",250,0,"()",python,content
494,707977,"dev/ABC424c.py",251,0,"a",python,content
495,708141,"dev/ABC424c.py",252,0,",",python,content
496,708388,"dev/ABC424c.py",253,0,"b",python,content
497,710084,"dev/ABC424c.py",140,20,"",python,content
498,712623,"dev/ABC424c.py",259,0,"\n",python,content
499,713764,"dev/ABC424c.py",258,0,"\n    ",python,content
500,715192,"dev/ABC424c.py",263,0,"f",python,content
501,715267,"dev/ABC424c.py",264,0,"o",python,content
502,715345,"dev/ABC424c.py",265,0,"r",python,content
503,715508,"dev/ABC424c.py",266,0," ",python,content
504,715584,"dev/ABC424c.py",267,0,"i",python,content
505,715681,"dev/ABC424c.py",268,0," ",python,content
506,715775,"dev/ABC424c.py",269,0,"i",python,content
507,715844,"dev/ABC424c.py",270,0,"n",python,content
508,715856,"dev/ABC424c.py",271,0," ",python,content
509,716824,"dev/ABC424c.py",272,0,"r",python,content
510,716994,"dev/ABC424c.py",273,0,"a",python,content
511,717073,"dev/ABC424c.py",274,0,"n",python,content
512,717220,"dev/ABC424c.py",275,0,"g",python,content
513,717269,"dev/ABC424c.py",276,0,"e",python,content
514,717452,"dev/ABC424c.py",277,0,"()",python,content
515,717748,"dev/ABC424c.py",278,0,"N",python,content
516,718127,"dev/ABC424c.py",280,0,":",python,content
517,718196,"dev/ABC424c.py",281,0,"\n        ",python,content
518,722266,"dev/ABC424c.py",282,8,"",python,content
518,722266,"dev/ABC424c.py",282,8,"",python,content
519,722266,"dev/ABC424c.py",279,1,"",python,content
520,722448,"dev/ABC424c.py",278,1,"",python,content
521,722571,"dev/ABC424c.py",277,1,"",python,content
522,722988,"dev/ABC424c.py",272,5,"",python,content
523,723376,"dev/ABC424c.py",272,0,"S",python,content
524,723430,"dev/ABC424c.py",273,0,"K",python,content
525,723650,"dev/ABC424c.py",274,0,"I",python,content
526,725512,"dev/ABC424c.py",275,0,"L",python,content
527,725699,"dev/ABC424c.py",276,0,"L",python,content
528,728225,"dev/ABC424c.py",258,0,"\n    ",python,content
529,729040,"dev/ABC424c.py",263,0,"s",python,content
530,729201,"dev/ABC424c.py",264,0,"k",python,content
531,729357,"dev/ABC424c.py",265,0,"i",python,content
532,729459,"dev/ABC424c.py",266,0,"l",python,content
533,729855,"dev/ABC424c.py",263,4,"",python,content
534,730096,"dev/ABC424c.py",263,0,"g",python,content
535,730171,"dev/ABC424c.py",264,0,"o",python,content
536,730312,"dev/ABC424c.py",265,0,"t",python,content
537,730615,"dev/ABC424c.py",266,0,"_",python,content
538,730763,"dev/ABC424c.py",267,0,"s",python,content
539,730895,"dev/ABC424c.py",268,0,"k",python,content
540,731039,"dev/ABC424c.py",269,0,"i",python,content
541,731142,"dev/ABC424c.py",270,0,"l",python,content
542,731286,"dev/ABC424c.py",271,0,"l",python,content
543,731536,"dev/ABC424c.py",272,0,"s",python,content
544,731678,"dev/ABC424c.py",273,0," ",python,content
545,731821,"dev/ABC424c.py",274,0,"=",python,content
546,731847,"dev/ABC424c.py",275,0,"~",python,content
547,731948,"dev/ABC424c.py",276,0," ",python,content
548,732369,"dev/ABC424c.py",276,1,"",python,content
549,732535,"dev/ABC424c.py",275,1,"",python,content
550,732636,"dev/ABC424c.py",275,0," ",python,content
551,732782,"dev/ABC424c.py",276,0,"[]",python,content
552,735374,"dev/ABC424c.py",298,0,"\n        ",python,content
553,737737,"dev/ABC424c.py",307,0,"a",python,content
554,737905,"dev/ABC424c.py",308,0,",",python,content
555,738653,"dev/ABC424c.py",309,0,"b",python,content
556,738810,"dev/ABC424c.py",310,0," ",python,content
557,738986,"dev/ABC424c.py",311,0,"=",python,content
558,739159,"dev/ABC424c.py",312,0," ",python,content
559,739462,"dev/ABC424c.py",313,0,"i",python,content
560,739759,"dev/ABC424c.py",313,1,"i",python,content
561,739955,"dev/ABC424c.py",314,0,"\n        ",python,content
562,740192,"dev/ABC424c.py",323,0,"i",python,content
563,740306,"dev/ABC424c.py",324,0,"f",python,content
564,740454,"dev/ABC424c.py",325,0," ",python,content
565,740667,"dev/ABC424c.py",326,0," ",python,content
566,740971,"dev/ABC424c.py",326,1,"",python,content
567,741114,"dev/ABC424c.py",326,0,"a",python,content
568,741588,"dev/ABC424c.py",327,0,"=",python,content
569,741783,"dev/ABC424c.py",328,0,"=",python,content
570,742242,"dev/ABC424c.py",329,0,"0",python,content
571,742858,"dev/ABC424c.py",330,0," ",python,content
572,742960,"dev/ABC424c.py",331,0,"a",python,content
573,743107,"dev/ABC424c.py",332,0,"n",python,content
574,743176,"dev/ABC424c.py",333,0,"d",python,content
575,743320,"dev/ABC424c.py",334,0," ",python,content
576,743467,"dev/ABC424c.py",335,0,"b",python,content
577,743610,"dev/ABC424c.py",336,0," ",python,content
578,743759,"dev/ABC424c.py",337,0,"=",python,content
579,743941,"dev/ABC424c.py",338,0,"=",python,content
580,744087,"dev/ABC424c.py",339,0," ",python,content
581,744383,"dev/ABC424c.py",339,1,"",python,content
582,744959,"dev/ABC424c.py",339,0," ",python,content
583,745083,"dev/ABC424c.py",340,0,"0",python,content
584,745319,"dev/ABC424c.py",341,0," ",python,content
585,746010,"dev/ABC424c.py",341,1,"",python,content
586,746177,"dev/ABC424c.py",341,0,":",python,content
587,746254,"dev/ABC424c.py",342,0,"\n            ",python,content
588,748176,"dev/ABC424c.py",355,0,"g",python,content
589,748239,"dev/ABC424c.py",356,0,"o",python,content
590,748507,"dev/ABC424c.py",357,0,"t",python,content
591,748907,"dev/ABC424c.py",355,3,"got_skills",python,content
592,749583,"dev/ABC424c.py",365,0,".",python,content
593,749700,"dev/ABC424c.py",366,0,"a",python,content
594,749814,"dev/ABC424c.py",367,0,"p",python,content
595,749975,"dev/ABC424c.py",368,0,"p",python,content
596,750038,"dev/ABC424c.py",369,0,"e",python,content
597,750206,"dev/ABC424c.py",370,0,"n",python,content
598,750231,"dev/ABC424c.py",371,0,"d",python,content
599,750475,"dev/ABC424c.py",366,6,"append",python,content
600,750891,"dev/ABC424c.py",372,0,"()",python,content
601,751175,"dev/ABC424c.py",373,0,"i",python,content
602,754180,"dev/ABC424c.py",278,0,"\n    ",python,content
603,755177,"dev/ABC424c.py",283,0,"r",python,content
604,755254,"dev/ABC424c.py",284,0,"e",python,content
605,755416,"dev/ABC424c.py",285,0,"q",python,content
606,755559,"dev/ABC424c.py",286,0,"u",python,content
607,755658,"dev/ABC424c.py",287,0,"e",python,content
608,755959,"dev/ABC424c.py",288,0,"r",python,content
609,755993,"dev/ABC424c.py",289,0,"e",python,content
610,756375,"dev/ABC424c.py",283,7,"",python,content
611,757490,"dev/ABC424c.py",283,0,"r",python,content
612,757578,"dev/ABC424c.py",284,0,"e",python,content
613,757798,"dev/ABC424c.py",285,0,"q",python,content
614,759902,"dev/ABC424c.py",286,0,"=",python,content
615,760196,"dev/ABC424c.py",287,0,"s",python,content
616,760298,"dev/ABC424c.py",288,0,"k",python,content
617,760444,"dev/ABC424c.py",289,0,"i",python,content
618,760596,"dev/ABC424c.py",290,0,"l",python,content
619,760700,"dev/ABC424c.py",291,0,"l",python,content
620,760848,"dev/ABC424c.py",292,0,"s",python,content
621,761072,"dev/ABC424c.py",293,0," ",python,content
622,761252,"dev/ABC424c.py",294,0,"=",python,content
623,761395,"dev/ABC424c.py",295,0," ",python,content
624,763563,"dev/ABC424c.py",296,0,"d",python,content
625,763651,"dev/ABC424c.py",297,0,"i",python,content
626,763861,"dev/ABC424c.py",298,0,"c",python,content
627,763973,"dev/ABC424c.py",299,0,"t",python,content
628,765415,"dev/ABC424c.py",300,0,"()",python,content
629,768409,"dev/ABC424c.py",286,1,"",python,content
630,768664,"dev/ABC424c.py",286,0,"_",python,content
631,771137,"dev/ABC424c.py",399,0,"\n            ",python,content
632,773840,"dev/ABC424c.py",408,4,"",python,content
633,774853,"dev/ABC424c.py",408,0,"r",python,content
634,774911,"dev/ABC424c.py",409,0,"e",python,content
635,775070,"dev/ABC424c.py",410,0,"q",python,content
636,775844,"dev/ABC424c.py",411,0,"\",python,content
637,776092,"dev/ABC424c.py",412,0,"    ",python,content
638,776439,"dev/ABC424c.py",415,1,"",python,content
639,776588,"dev/ABC424c.py",414,1,"",python,content
640,776744,"dev/ABC424c.py",413,1,"",python,content
641,776901,"dev/ABC424c.py",412,1,"",python,content
642,777052,"dev/ABC424c.py",411,1,"",python,content
643,777322,"dev/ABC424c.py",411,0,"_",python,content
644,777764,"dev/ABC424c.py",408,4,"req_skills",python,content
645,779120,"dev/ABC424c.py",418,0,"[]",python,content
646,779500,"dev/ABC424c.py",419,0,"a",python,content
647,783372,"dev/ABC424c.py",399,0,"\n            ",python,content
648,783587,"dev/ABC424c.py",412,0,"c",python,content
649,783699,"dev/ABC424c.py",413,0,"o",python,content
650,783810,"dev/ABC424c.py",414,0,"n",python,content
651,784133,"dev/ABC424c.py",412,3,"continue",python,content
652,787719,"dev/ABC424c.py",442,0,".",python,content
653,787870,"dev/ABC424c.py",443,0,"a",python,content
654,788036,"dev/ABC424c.py",444,0,"p",python,content
655,788168,"dev/ABC424c.py",445,0,"p",python,content
656,788477,"dev/ABC424c.py",446,0,"e",python,content
657,788624,"dev/ABC424c.py",447,0,"n",python,content
658,788706,"dev/ABC424c.py",448,0,"d",python,content
659,791340,"dev/ABC424c.py",301,0,"l",python,content
660,791480,"dev/ABC424c.py",302,0,"a",python,content
661,791624,"dev/ABC424c.py",303,0,"m",python,content
662,793376,"dev/ABC424c.py",301,3,"lambda",python,content
663,793549,"dev/ABC424c.py",307,0,":",python,content
664,793978,"dev/ABC424c.py",308,0,"@",python,content
665,793994,"dev/ABC424c.py",309,0,"[]",python,content
666,794476,"dev/ABC424c.py",309,2,"",python,content
667,794662,"dev/ABC424c.py",308,1,"",python,content
668,794902,"dev/ABC424c.py",308,0,"[]",python,content
669,796921,"dev/ABC424c.py",458,0,"()",python,content
670,801388,"dev/ABC424c.py",449,1,"",python,content
671,801572,"dev/ABC424c.py",449,0,"i",python,content
672,804056,"dev/ABC424c.py",449,1,"",python,content
673,804132,"dev/ABC424c.py",449,0,"a",python,content
674,805533,"dev/ABC424c.py",459,0,"i",python,content
675,806648,"dev/ABC424c.py",430,0,"        req_skills[a].append(i)\n",python,content
676,809122,"dev/ABC424c.py",481,1,"",python,content
677,809225,"dev/ABC424c.py",481,0,"b",python,content
678,812274,"dev/ABC424c.py",482,0,"-",python,content
678,812274,"dev/ABC424c.py",482,0,"-",python,content
679,812274,"dev/ABC424c.py",450,0,"-",python,content
680,812644,"dev/ABC424c.py",484,0,"1",python,content
680,812644,"dev/ABC424c.py",484,0,"1",python,content
681,812644,"dev/ABC424c.py",451,0,"1",python,content
682,825949,"dev/ABC424c.py",498,0,"\n",python,content
683,826113,"dev/ABC424c.py",499,0,"    ",python,content
684,828947,"dev/ABC424c.py",503,0,"f",python,content
685,829038,"dev/ABC424c.py",504,0,"o",python,content
686,829188,"dev/ABC424c.py",505,0,"r",python,content
687,836165,"dev/ABC424c.py",506,0," ",python,content
688,836628,"dev/ABC424c.py",507,0,"i",python,content
689,836828,"dev/ABC424c.py",508,0," ",python,content
690,836909,"dev/ABC424c.py",509,0,"i",python,content
691,837056,"dev/ABC424c.py",510,0,"n",python,content
692,837248,"dev/ABC424c.py",511,0," ",python,content
693,837628,"dev/ABC424c.py",512,0,"r",python,content
694,837828,"dev/ABC424c.py",513,0,"a",python,content
695,837892,"dev/ABC424c.py",514,0,"n",python,content
696,838006,"dev/ABC424c.py",515,0,"g",python,content
697,838287,"dev/ABC424c.py",516,0,"()",python,content
698,838872,"dev/ABC424c.py",516,2,"",python,content
699,839052,"dev/ABC424c.py",516,0,"e",python,content
700,839296,"dev/ABC424c.py",517,0,"()",python,content
701,839326,"dev/ABC424c.py",518,1,")",python,content
702,839760,"dev/ABC424c.py",519,0,"N",python,content
703,840174,"dev/ABC424c.py",519,1,"",python,content
704,841233,"dev/ABC424c.py",518,0,"N",python,content
705,841692,"dev/ABC424c.py",520,0,":",python,content
706,841728,"dev/ABC424c.py",521,0,"\n        ",python,content
707,843038,"dev/ABC424c.py",530,0,"r",python,content
708,843099,"dev/ABC424c.py",531,0,"e",python,content
709,843289,"dev/ABC424c.py",532,0,"q",python,content
710,843776,"dev/ABC424c.py",530,3,"req_skills",python,content
711,843959,"dev/ABC424c.py",540,0,"[]",python,content
712,853037,"dev/ABC424c.py",519,1,"",python,content
713,853225,"dev/ABC424c.py",518,1,"",python,content
714,853401,"dev/ABC424c.py",517,1,"",python,content
715,853848,"dev/ABC424c.py",512,5,"",python,content
716,854396,"dev/ABC424c.py",512,0,"G",python,content
717,854468,"dev/ABC424c.py",513,0,"O",python,content
718,854978,"dev/ABC424c.py",513,1,"",python,content
719,855464,"dev/ABC424c.py",513,0,"o",python,content
720,855896,"dev/ABC424c.py",513,1,"",python,content
721,856041,"dev/ABC424c.py",512,1,"",python,content
722,856255,"dev/ABC424c.py",512,0,"g",python,content
723,856270,"dev/ABC424c.py",513,0,"o",python,content
724,856380,"dev/ABC424c.py",514,0,"t",python,content
725,856736,"dev/ABC424c.py",512,3,"got_skills",python,content
726,877851,"dev/ABC424c.py",498,0,"\n",python,content
727,878242,"dev/ABC424c.py",499,0,"    ",python,content
728,879243,"dev/ABC424c.py",503,0,"s",python,content
729,879691,"dev/ABC424c.py",503,1,"",python,content
730,894196,"dev/ABC424c.py",69,4,"",python,content
731,896764,"dev/ABC424c.py",69,0,"d",python,content
732,896923,"dev/ABC424c.py",70,0,"f",python,content
733,897079,"dev/ABC424c.py",71,0,"s",python,content
734,904042,"dev/ABC424c.py",69,3,"",python,content
735,904320,"dev/ABC424c.py",69,0,"f",python,content
736,904422,"dev/ABC424c.py",70,0,"u",python,content
737,904503,"dev/ABC424c.py",71,0,"n",python,content
738,904560,"dev/ABC424c.py",72,0,"c",python,content
739,914279,"dev/ABC424c.py",503,0,"s",python,content
740,914350,"dev/ABC424c.py",504,0,"t",python,content
741,914451,"dev/ABC424c.py",505,0,"a",python,content
742,914606,"dev/ABC424c.py",506,0,"c",python,content
743,914713,"dev/ABC424c.py",507,0,"k",python,content
744,914859,"dev/ABC424c.py",508,0," ",python,content
745,915432,"dev/ABC424c.py",509,0,"=",python,content
746,915634,"dev/ABC424c.py",510,0," ",python,content
747,915757,"dev/ABC424c.py",511,0,"[]",python,content
748,920063,"dev/ABC424c.py",511,2,"",python,content
749,920243,"dev/ABC424c.py",509,2,"",python,content
750,920397,"dev/ABC424c.py",503,6,"",python,content
751,923877,"dev/ABC424c.py",263,10,"",python,content
752,924127,"dev/ABC424c.py",263,0,"s",python,content
753,924218,"dev/ABC424c.py",264,0,"t",python,content
754,924304,"dev/ABC424c.py",265,0,"a",python,content
755,924460,"dev/ABC424c.py",266,0,"c",python,content
756,924553,"dev/ABC424c.py",267,0,"k",python,content
757,926791,"dev/ABC424c.py",383,10,"",python,content
758,927100,"dev/ABC424c.py",383,0,"s",python,content
759,927194,"dev/ABC424c.py",384,0,"t",python,content
760,927279,"dev/ABC424c.py",385,0,"a",python,content
761,927403,"dev/ABC424c.py",386,0,"c",python,content
762,927504,"dev/ABC424c.py",387,0,"k",python,content
763,930639,"dev/ABC424c.py",511,6,"",python,content
764,930725,"dev/ABC424c.py",507,4,"",python,content
765,931213,"dev/ABC424c.py",507,0,"s",python,content
766,931365,"dev/ABC424c.py",508,0,"t",python,content
767,931407,"dev/ABC424c.py",509,0,"a",python,content
768,931614,"dev/ABC424c.py",507,3,"stack",python,content
769,934813,"dev/ABC424c.py",504,2,"",python,content
770,935000,"dev/ABC424c.py",502,2,"",python,content
771,935334,"dev/ABC424c.py",498,4,"",python,content
772,935611,"dev/ABC424c.py",498,0,"w",python,content
773,935649,"dev/ABC424c.py",499,0,"h",python,content
774,935698,"dev/ABC424c.py",500,0,"i",python,content
775,935777,"dev/ABC424c.py",501,0,"l",python,content
776,935856,"dev/ABC424c.py",502,0,"e",python,content
777,937899,"dev/ABC424c.py",530,1,"",python,content
778,938070,"dev/ABC424c.py",529,1,"",python,content
779,938255,"dev/ABC424c.py",519,10,"",python,content
780,939157,"dev/ABC424c.py",493,0,"d",python,content
781,939279,"dev/ABC424c.py",494,0,"n",python,content
782,939607,"dev/ABC424c.py",494,1,"",python,content
783,939796,"dev/ABC424c.py",494,0,"o",python,content
784,939873,"dev/ABC424c.py",495,0,"n",python,content
785,939940,"dev/ABC424c.py",496,0,"e",python,content
786,940093,"dev/ABC424c.py",497,0," ",python,content
787,940176,"dev/ABC424c.py",498,0,"=",python,content
788,940366,"dev/ABC424c.py",499,0," ",python,content
789,940445,"dev/ABC424c.py",500,0,"[]",python,content
790,942071,"dev/ABC424c.py",501,1,"",python,content
791,942387,"dev/ABC424c.py",500,1,"",python,content
792,942677,"dev/ABC424c.py",500,0,"s",python,content
793,942812,"dev/ABC424c.py",501,0,"e",python,content
794,942889,"dev/ABC424c.py",502,0,"t",python,content
795,943220,"dev/ABC424c.py",503,0,"()",python,content
796,947347,"dev/ABC424c.py",531,0,"s",python,content
797,947428,"dev/ABC424c.py",532,0,"t",python,content
798,947534,"dev/ABC424c.py",533,0,"a",python,content
799,947677,"dev/ABC424c.py",534,0,"c",python,content
800,947741,"dev/ABC424c.py",535,0,"k",python,content
801,948130,"dev/ABC424c.py",536,0,".",python,content
802,948384,"dev/ABC424c.py",537,0,"p",python,content
803,948460,"dev/ABC424c.py",538,0,"o",python,content
804,948544,"dev/ABC424c.py",539,0,"p",python,content
805,948826,"dev/ABC424c.py",540,0,"()",python,content
806,949990,"dev/ABC424c.py",531,0,"=",python,content
807,950228,"dev/ABC424c.py",532,0," ",python,content
808,958893,"dev/ABC424c.py",531,0," ",python,content
809,969111,"dev/ABC424c.py",531,0,"a",python,content
810,969887,"dev/ABC424c.py",531,1,"",python,content
811,973714,"dev/ABC424c.py",531,0,"s",python,content
812,973951,"dev/ABC424c.py",532,0,"k",python,content
813,974108,"dev/ABC424c.py",533,0,"i",python,content
814,974206,"dev/ABC424c.py",534,0,"l",python,content
815,974354,"dev/ABC424c.py",535,0,"l",python,content
816,975462,"dev/ABC424c.py",531,5,"",python,content
817,977655,"dev/ABC424c.py",531,0,"t",python,content
818,978787,"dev/ABC424c.py",546,0,"\n        ",python,content
819,986938,"dev/ABC424c.py",555,0,"r",python,content
820,987021,"dev/ABC424c.py",556,0,"e",python,content
821,987191,"dev/ABC424c.py",557,0,"q",python,content
822,987849,"dev/ABC424c.py",555,3,"req_skills",python,content
823,988800,"dev/ABC424c.py",565,0,"[]",python,content
824,991582,"dev/ABC424c.py",566,0,"t",python,content
825,993915,"dev/ABC424c.py",555,0,"i",python,content
826,994095,"dev/ABC424c.py",556,0,"f",python,content
827,994435,"dev/ABC424c.py",557,0," ",python,content
828,994743,"dev/ABC424c.py",558,0,"d",python,content
829,995286,"dev/ABC424c.py",558,1,"",python,content
830,998738,"dev/ABC424c.py",571,0," ",python,content
831,998890,"dev/ABC424c.py",572,0,"n",python,content
832,998926,"dev/ABC424c.py",573,0,"o",python,content
833,999088,"dev/ABC424c.py",574,0,"t",python,content
834,999591,"dev/ABC424c.py",574,1,"",python,content
835,1000111,"dev/ABC424c.py",574,0,"t",python,content
836,1000277,"dev/ABC424c.py",575,0," ",python,content
837,1000378,"dev/ABC424c.py",576,0,"i",python,content
838,1000441,"dev/ABC424c.py",577,0,"n",python,content
839,1000564,"dev/ABC424c.py",578,0," ",python,content
840,1000711,"dev/ABC424c.py",579,0,"d",python,content
841,1000724,"dev/ABC424c.py",580,0,"o",python,content
842,1000786,"dev/ABC424c.py",581,0,"n",python,content
843,1000935,"dev/ABC424c.py",582,0,"e",python,content
844,1001091,"dev/ABC424c.py",583,0,":",python,content
845,1001137,"dev/ABC424c.py",584,0,"\n            ",python,content
846,1004107,"dev/ABC424c.py",555,38,"",python,content
847,1004612,"dev/ABC424c.py",555,0,"f",python,content
848,1004693,"dev/ABC424c.py",556,0,"o",python,content
849,1004794,"dev/ABC424c.py",557,0,"r",python,content
850,1004931,"dev/ABC424c.py",558,0," ",python,content
851,1005095,"dev/ABC424c.py",559,0,"i",python,content
852,1005211,"dev/ABC424c.py",560,0," ",python,content
853,1007871,"dev/ABC424c.py",561,0,"i",python,content
854,1007973,"dev/ABC424c.py",562,0,"n",python,content
855,1008081,"dev/ABC424c.py",563,0," ",python,content
856,1008769,"dev/ABC424c.py",564,0,"r",python,content
857,1008804,"dev/ABC424c.py",565,0,"e",python,content
858,1008977,"dev/ABC424c.py",566,0,"q",python,content
859,1009227,"dev/ABC424c.py",567,0,"_",python,content
860,1009481,"dev/ABC424c.py",568,0,"s",python,content
861,1009719,"dev/ABC424c.py",564,5,"req_skills",python,content
862,1010297,"dev/ABC424c.py",574,0,":",python,content
863,1010325,"dev/ABC424c.py",575,0,"\n            ",python,content
864,1010877,"dev/ABC424c.py",588,0,"i",python,content
865,1010979,"dev/ABC424c.py",589,0,"f",python,content
866,1011127,"dev/ABC424c.py",590,0," ",python,content
867,1012510,"dev/ABC424c.py",591,0,"i",python,content
868,1012681,"dev/ABC424c.py",592,0," ",python,content
869,1012775,"dev/ABC424c.py",593,0,"n",python,content
870,1012820,"dev/ABC424c.py",594,0,"o",python,content
871,1012975,"dev/ABC424c.py",595,0,"t",python,content
872,1013271,"dev/ABC424c.py",596,0," ",python,content
873,1013384,"dev/ABC424c.py",597,0,"i",python,content
874,1013461,"dev/ABC424c.py",598,0,"n",python,content
875,1013548,"dev/ABC424c.py",599,0," ",python,content
876,1013780,"dev/ABC424c.py",600,0,"d",python,content
877,1013783,"dev/ABC424c.py",601,0,"o",python,content
878,1013832,"dev/ABC424c.py",602,0,"n",python,content
879,1013979,"dev/ABC424c.py",603,0,"e",python,content
880,1014091,"dev/ABC424c.py",604,0,":",python,content
881,1014127,"dev/ABC424c.py",605,0,"\n                ",python,content
882,1015787,"dev/ABC424c.py",622,4,"",python,content
883,1016283,"dev/ABC424c.py",622,0,"s",python,content
884,1016427,"dev/ABC424c.py",623,0,"t",python,content
885,1016509,"dev/ABC424c.py",624,0,"a",python,content
886,1016690,"dev/ABC424c.py",625,0,"c",python,content
887,1016817,"dev/ABC424c.py",626,0,"k",python,content
888,1017227,"dev/ABC424c.py",627,0,".",python,content
889,1017326,"dev/ABC424c.py",628,0,"a",python,content
890,1017432,"dev/ABC424c.py",629,0,"p",python,content
891,1017541,"dev/ABC424c.py",630,0,"p",python,content
892,1017588,"dev/ABC424c.py",631,0,"e",python,content
893,1017742,"dev/ABC424c.py",632,0,"n",python,content
894,1017783,"dev/ABC424c.py",633,0,"d",python,content
895,1018557,"dev/ABC424c.py",634,0,"()",python,content
896,1020205,"dev/ABC424c.py",635,0,"i",python,content
897,1024565,"dev/ABC424c.py",637,0,"\n                ",python,content
898,1024835,"dev/ABC424c.py",654,0,"d",python,content
899,1024946,"dev/ABC424c.py",655,0,"i",python,content
900,1024963,"dev/ABC424c.py",656,0,"o",python,content
901,1025329,"dev/ABC424c.py",656,1,"",python,content
902,1025481,"dev/ABC424c.py",655,1,"",python,content
903,1025699,"dev/ABC424c.py",655,0,"o",python,content
904,1025743,"dev/ABC424c.py",656,0,"n",python,content
905,1025865,"dev/ABC424c.py",657,0,"e",python,content
906,1026317,"dev/ABC424c.py",658,0,".",python,content
907,1026967,"dev/ABC424c.py",659,0,"a",python,content
908,1027116,"dev/ABC424c.py",660,0,"d",python,content
909,1027269,"dev/ABC424c.py",661,0,"d",python,content
910,1027519,"dev/ABC424c.py",662,0,"()",python,content
911,1029511,"dev/ABC424c.py",663,0,"i",python,content
912,1032513,"dev/ABC424c.py",665,0,"\n                ",python,content
913,1032988,"dev/ABC424c.py",666,16,"",python,content
914,1043780,"dev/ABC424c.py",666,0,"    ",python,content
915,1045235,"dev/ABC424c.py",670,0,"p",python,content
916,1045485,"dev/ABC424c.py",671,0,"r",python,content
917,1045538,"dev/ABC424c.py",672,0,"i",python,content
918,1045603,"dev/ABC424c.py",673,0,"n",python,content
919,1045652,"dev/ABC424c.py",674,0,"t",python,content
920,1045878,"dev/ABC424c.py",675,0,"()",python,content
921,1046133,"dev/ABC424c.py",676,0,"l",python,content
922,1046158,"dev/ABC424c.py",677,0,"e",python,content
923,1046283,"dev/ABC424c.py",678,0,"n",python,content
924,1046653,"dev/ABC424c.py",679,0,"()",python,content
925,1047153,"dev/ABC424c.py",680,0,"d",python,content
926,1047181,"dev/ABC424c.py",681,0,"o",python,content
927,1047228,"dev/ABC424c.py",682,0,"n",python,content
928,1047311,"dev/ABC424c.py",683,0,"e",python,content
929,1136092,"dev/ABC424c.py",574,0,"[]",python,content
930,1136354,"dev/ABC424c.py",575,0,"t",python,content
930,1136354,"dev/ABC424c.py",575,0,"t",python,content
931,1136354,"dev/ABC424c.py",576,0,"y",python,content
932,1136758,"dev/ABC424c.py",576,1,"",python,content
933,1166323,"dev/ABC424c.py",320,5,"",python,content
934,1169043,"dev/ABC424c.py",320,0,"r",python,content
935,1169138,"dev/ABC424c.py",321,0,"a",python,content
936,1169252,"dev/ABC424c.py",322,0,"n",python,content
937,1169395,"dev/ABC424c.py",323,0,"g",python,content
938,1169411,"dev/ABC424c.py",324,0,"e",python,content
939,1169740,"dev/ABC424c.py",325,0,"()",python,content
940,1170024,"dev/ABC424c.py",326,0,"N",python,content
941,1178994,"dev/ABC424c.py",344,0,"S",python,content
942,1179092,"dev/ABC424c.py",345,0,"K",python,content
943,1179242,"dev/ABC424c.py",346,0,"I",python,content
944,1179429,"dev/ABC424c.py",347,0,"L",python,content
945,1179581,"dev/ABC424c.py",348,0,"L",python,content
946,1179871,"dev/ABC424c.py",349,0,"[",python,content
947,1180291,"dev/ABC424c.py",351,0,"]",python,content
948,1217506,"dev/ABC424c.py",499,17,"",python,content
949,1218813,"dev/ABC424c.py",273,0,"\n    ",python,content
950,1219036,"dev/ABC424c.py",274,4,"",python,content
950,1219036,"dev/ABC424c.py",274,4,"",python,content
951,1219036,"dev/ABC424c.py",274,0,"    done = set()\n",python,content
952,1221610,"dev/ABC424c.py",426,0,"\n            ",python,content
953,1221844,"dev/ABC424c.py",439,0,"d",python,content
954,1221966,"dev/ABC424c.py",440,0,"o",python,content
955,1222074,"dev/ABC424c.py",441,0,"n",python,content
956,1222140,"dev/ABC424c.py",442,0,"e",python,content
957,1222366,"dev/ABC424c.py",443,0,".",python,content
958,1222487,"dev/ABC424c.py",444,0,"a",python,content
959,1222654,"dev/ABC424c.py",445,0,"d",python,content
960,1222775,"dev/ABC424c.py",446,0,"d",python,content
961,1222964,"dev/ABC424c.py",447,0,"()",python,content
962,1223210,"dev/ABC424c.py",448,0,"i",python,content
963,1278955,"dev/ABC424e.py",0,0,"# ABC424e\n# 2025-09-20 20:38:35\n\ndef main():\n    # 関数定義スペース\n\n    def func():\n        ...\n\n    ...    \n    # 入力スペース\n\n    N = splitN(input())\n    H, W = splitA(input())\n    A = splitA(input())\n    S = splitS(input())\n    S = splitB(input())\n\n    ...\n\n    # 処理スペース\n\n\n\n\n\n\n    ...\n\n\n\n# テストケース中枢処理\ndef case():\n    TESTCASE = 1\n    # TESTCASE = int(input()) # テストケース数の指定\n    for _ in range(TESTCASE):\n        try:\n            main()\n        except solvedException:\n            continue\n        # raise unSolvedExeption\n\n\n# インポート\nimport sys, itertools, math, heapq\nfrom collections import defaultdict, deque\nfrom sortedcontainers import SortedSet, SortedList, SortedDict  # CPython?\n\n# 定数・環境設定\nsys.setrecursionlimit(10**8)\nsys.set_int_max_str_digits(0)\ndict = defaultdict\nUPPER_ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""\nLOWER_ALPHABET=""abcdefghijklmnopqrstuvwxyz""\nMOD = 998244353\nMAX = 10**18\nLRUD = [(0, 1), (0, -1), (1, 0), (-1, 0)]\nLURULDRD = [(-1, -1), (-1, 1), (1, -1), (1, 1)]\n\n# 各種関数定義(超圧縮)\n## 便利関数\ndef printe(*values,sep="" "",end=""\n""):print(*values,sep=sep,end=end); fin()\ndef prin(stop=False,sep="" "",end=""\n"",file=sys.stdout):return (lambda*values:printe(*values,sep=sep,end=end)) if stop else (lambda*values:print(*values,sep=sep,end=end,file=file))\ndef yes(f=True): printe(""Yes"") if (f) else None\ndef no(f=True): printe(""No"") if (f) else None\ndef debug(*values,sep="" "",end=""\n""): print(*values,sep=sep,end=end,file=sys.stderr)\ndef printYN(f:bool): yes() if f else no()\ndef fin(f=True): raise solvedException if f else None\n## 分割関数\ndef split(value:str|list,sep:str="" "",func:callable=str) -> list:\n    result = []\n    if type(value) == list:\n        for i in range(len(value)):\n            result.append(split(value[i],sep))\n        return result\n    else:\n        if sep in value:\n            for i in value.split(sep):\n                result.append(func(i))\n        else:\n            result.append(func(value))\n        return result\n## 入力受け取り用\ndef input():return(sys.stdin.readline()).rstrip() #入力定数倍\ndef splitS(value:str|list,sep:str="" "")->str:return split(value,sep)[0] #文字列・分割して最初\ndef splitN(value:str|list,sep:str="" "")->int:return split(value,sep,int)[0] # 整数・分割して最初\ndef splitB(value:str|list,sep:str="" "")->list:return list(split(value,sep)) # 文字列・分割してすべて\ndef splitA(value:str|list,sep:str="" "")->list:return list(split(value,sep,int)) # 整数・分割してすべて\n\n# 例外クラス\nclass solvedException(Exception): pass # 処理打ち切り例外\nclass unSolvedExeption(Exception): # 回答未出力例外\n    def __init__(description = ""解答が出力されていません。""): super().__init__(description)\n\n# 実行\nif __name__ == ""__main__"":\n    case()\n",python,tab
964,1279343,"dev/ABC424d.py",0,0,"# ABC424d\n# 2025-09-20 20:38:35\n\ndef main():\n    # 関数定義スペース\n\n    def func():\n        ...\n\n    ...    \n    # 入力スペース\n\n    N = splitN(input())\n    H, W = splitA(input())\n    A = splitA(input())\n    S = splitS(input())\n    S = splitB(input())\n\n    ...\n\n    # 処理スペース\n\n\n\n\n\n\n    ...\n\n\n\n# テストケース中枢処理\ndef case():\n    TESTCASE = 1\n    # TESTCASE = int(input()) # テストケース数の指定\n    for _ in range(TESTCASE):\n        try:\n            main()\n        except solvedException:\n            continue\n        # raise unSolvedExeption\n\n\n# インポート\nimport sys, itertools, math, heapq\nfrom collections import defaultdict, deque\nfrom sortedcontainers import SortedSet, SortedList, SortedDict  # CPython?\n\n# 定数・環境設定\nsys.setrecursionlimit(10**8)\nsys.set_int_max_str_digits(0)\ndict = defaultdict\nUPPER_ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""\nLOWER_ALPHABET=""abcdefghijklmnopqrstuvwxyz""\nMOD = 998244353\nMAX = 10**18\nLRUD = [(0, 1), (0, -1), (1, 0), (-1, 0)]\nLURULDRD = [(-1, -1), (-1, 1), (1, -1), (1, 1)]\n\n# 各種関数定義(超圧縮)\n## 便利関数\ndef printe(*values,sep="" "",end=""\n""):print(*values,sep=sep,end=end); fin()\ndef prin(stop=False,sep="" "",end=""\n"",file=sys.stdout):return (lambda*values:printe(*values,sep=sep,end=end)) if stop else (lambda*values:print(*values,sep=sep,end=end,file=file))\ndef yes(f=True): printe(""Yes"") if (f) else None\ndef no(f=True): printe(""No"") if (f) else None\ndef debug(*values,sep="" "",end=""\n""): print(*values,sep=sep,end=end,file=sys.stderr)\ndef printYN(f:bool): yes() if f else no()\ndef fin(f=True): raise solvedException if f else None\n## 分割関数\ndef split(value:str|list,sep:str="" "",func:callable=str) -> list:\n    result = []\n    if type(value) == list:\n        for i in range(len(value)):\n            result.append(split(value[i],sep))\n        return result\n    else:\n        if sep in value:\n            for i in value.split(sep):\n                result.append(func(i))\n        else:\n            result.append(func(value))\n        return result\n## 入力受け取り用\ndef input():return(sys.stdin.readline()).rstrip() #入力定数倍\ndef splitS(value:str|list,sep:str="" "")->str:return split(value,sep)[0] #文字列・分割して最初\ndef splitN(value:str|list,sep:str="" "")->int:return split(value,sep,int)[0] # 整数・分割して最初\ndef splitB(value:str|list,sep:str="" "")->list:return list(split(value,sep)) # 文字列・分割してすべて\ndef splitA(value:str|list,sep:str="" "")->list:return list(split(value,sep,int)) # 整数・分割してすべて\n\n# 例外クラス\nclass solvedException(Exception): pass # 処理打ち切り例外\nclass unSolvedExeption(Exception): # 回答未出力例外\n    def __init__(description = ""解答が出力されていません。""): super().__init__(description)\n\n# 実行\nif __name__ == ""__main__"":\n    case()\n",python,tab
965,1288194,"dev/ABC424d.py",308,0,"# ",python,content
966,1288587,"dev/ABC424d.py",327,2,"",python,content
967,1299732,"dev/ABC424d.py",120,0,"# ",python,content
968,1323294,"dev/ABC424d.py",173,0,"# ",python,content
969,1324523,"dev/ABC424d.py",223,0,"# ",python,content
970,1328833,"dev/ABC424d.py",116,26,"",python,content
971,1329538,"dev/ABC424d.py",143,26,"",python,content
972,1330217,"dev/ABC424d.py",167,26,"",python,content
973,1340259,"lang/python/material/two_dimensional_array_board.py",0,0,"class Board():\n\n    """"""\n    二次元ボードを便利に使いやすくするためのクラス\n    """""" \n    ROTATE_0_DEGREE = 0\n    ROTATE_90_DEGREE = 1\n    ROTATE_180_DEGREE = 2\n    ROTATE_270_DEGREE = 3\n\n    # 自作ボードクラスのショートカット関数  \n    def input_board(height:int,f=lambda:input(list())):\n        """"""\n        標準入力からボード作成\n        Args:\n            -  height(int):高さ\n            -  f(function):入力の形式 指定しなかった場合は自動で\n                スペースのない文字列を想定した入力になる\n        Returns:\n            Board:作成されたボードクラス\n        """"""\n        board=[]\n        for i in range(height):\n            board.append(f())\n        return Board(board)\n\n    def input_board_with_wall(height:int,width:int,wall:any,f:lambda x:input(list())):\n        """"""\n        標準入力からボード作成(ATフィールド付)\n        Args:\n            -  height(int):高さ\n            -  width(int):幅\n            -  wall:壁に割り当てる値\n            -  f(function):入力の形式 指定しなかった場合は自動で\n                スペースのない文字列を想定した入力になる\n        Returns:\n            Board:作成されたボードクラス\n        """"""\n        board=[]\n        for i in range(height):\n            board.append(f()+[wall])\n        board.append([wall]*(width+1))\n        return Board(board)\n\n    def create_board(height:int,width:int,initial_value):\n        """"""\n        指定した高さと幅でボードを作成し、全て初期値を代入する。\n\n        Args:\n            -  height (int): 高さ\n            -  width (int): 幅\n            -  initial_value: 初期値 \n\n        Returns:\n            -  Board: 作成されたボード\n        """"""\n        raw_board = []\n        for i in range(height):\n            raw_board.append([initial_value]*width)\n        return Board(raw_board)\n\n\n    def __init__(self,board_data:list):\n        """"""\n        インスタンス生成関数\n        Args:\n            -  board_data(list):生成する元となる二次元配列データ\n        """"""\n        self.__data=[]\n        self.__height=len(board_data)\n        assert 0<self.__height #高さが0以下だった場合はボードの作りようがないためエラー\n        self.__width=len(board_data[0])\n        for i in range(self.__height):\n            assert len(board_data[i])==self.__width #幅がぶれているとこのクラスでは扱えないためエラー\n            self.__data.append(board_data[i])\n        self.__cells=self.__height*self.__width\n\n    def get_height(self):\n        """"""\n        ボードの高さの値を返す関数\n\n        Returns:\n            -  int:heightの値\n        """"""\n        return self.__height\n\n    def get_width(self):\n        """"""\n        ボードの幅の値を返す関数\n\n        Returns:\n            -  int:widthの値\n        """"""\n        return self.__width\n\n\n    def __len__(self):\n        """"""\n        len()を使うための関数\n        レコードの数を返す\n\n        Returns:\n            -  int:二次元配列のレコードの数\n        """"""\n        return self.__cells\n    \n    \n    def __getitem__(self,pos:tuple):\n        """"""\n        board[]を利用するための関数\n        レコードの値を取り出す\n\n        Args:\n            -  (y,x)形式の座標を表すタプル\n        Returns:\n            -  any:テーブルのy行目j列目の値\n        """"""\n        return self.__data[pos[0]][pos[1]]\n    \n    def get(self,pos:tuple):\n        """"""\n        レコードの値を取り出す関数\n\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n        Returns:\n            -  any:テーブルのy行目j列目の値        \n        """"""        \n        return self[pos]\n\n    def __str__(self):\n        """"""\n        str()で呼び出される関数\n        いい感じに整形して出力する\n        Returns:\n            -  str:いい感じに整形された二次元配列の文字列\n        """"""\n        datas=[]\n        sep_count=0\n        for i in range(self.__height):\n            \n            item="" | "".join(str(j) for j in self.__data[i])\n            datas.append(item)\n            sep_count=max(sep_count,len(item))\n            if i==self.__height-1:\n                sep=""\n""+""-""*sep_count+""-\n""\n        return sep.join(datas)\n\n    def set(self,pos,value):\n        """"""\n        値を代入する関数\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n            -  value(any):代入する値\n        """"""\n        self[pos]=value\n\n    def __setitem__(self,pos,value):\n        """"""\n        board[pos]=valueを使えるようにするための関数\n        値を代入する\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n            -  value(any):代入する値\n        """"""\n        self.__data[pos[0]][pos[1]]=value\n\n    def is_inside_positive(self,pos):\n        """"""\n        正の整数の範囲内で指定のposがボードの内側に含まれているかどうかを返す関数\n        \n        Args:\n            -  pos (tuple): (y,x)形式の座標を表すタプル\n        """"""\n        y,x=pos\n        return y<self.__height and x<self.__width\n\n    def is_inside_negative(self,pos):\n        """"""\n        負の整数の範囲内で指定のposがボードの内側に含まれているかどうかを返す関数\n        \n        Args:\n            -  pos (tuple): (y,x)形式の座標を表すタプル\n        """"""\n        y,x=pos\n        return -1*self.__width<=x and -1*self.__height<=y\n    \n\n    def is_inside(self,pos):\n        """"""\n        指定のposがボードの内側に含まれているかどうかを返す関数\n        ただし、マイナスを許容する\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n        Returns:\n            -  bool:含まれているか否か\n        """"""\n        return self.is_inside_positive(pos) or self.is_inside_negative(pos)\n\n    def rotate(self,degree:int):\n        """"""\n        ボードを回転させる関数\n        Args:\n            -  degree(int):ROTATE_**_DEGREE\n        """"""\n        if degree==self.ROTATE_90_DEGREE:\n            self.__data = [list(g) for g in zip(*self.__data[::-1])]\n            self.__height,self.__width=self.__width,self.__height\n        elif degree==self.ROTATE_180_DEGREE:\n            self.__data = [list(g)[::-1] for g in self.__data[::-1]]\n        elif degree==self.ROTATE_270_DEGREE:\n            self.__data = [list(g) for g in zip(*self.__data)][::-1]\n            self.__height,self.__width=self.__width,self.__height\n\n    def __flip_by_vertical(self):\n        """"""\n        ボードを縦方向の線対称に反転する\n        """"""\n        self.__data = [list(g)[::-1] for g in self.__data]\n    \n    def __flip_by_holizontal(self):\n        """"""\n        ボードを横方向の線対称に反転する\n        """"""\n        self.__data = [list(g) for g in self.__data[::-1]]\n    \n    def flip(self,vertical=False,horizontal=False):\n        """"""\n        ボードを縦か横か指定した方向の線対称に反転する\n        Args:\n            -  vertical(bool):初期値はFalseで、Trueにすると縦方向に反転する\n            -  horizontal(bool):初期値はFalseで、Trueにすると横方向に反転する\n        """"""\n        if vertical:\n            self.__flip_by_vertical()\n        if horizontal:\n            self.__flip_by_holizontal()\n\n    def copy(self):\n        """"""\n        コピー関数\n        Returns:\n            -  Board:別インスタンスで、中身が同じボードクラス\n        """"""\n        data=[]\n        for i in range(self.__height):\n            data.append(self.__data[i].copy())\n        return self.__class__(data)\n\n    def fill(self,value):\n        """"""\n        初期化関数\n        valueで指定した値でボードのすべてを埋める\n        Args:\n            -  value(any):埋めたい値\n        """"""\n        for i in range(self.__height):\n            for j in range(self.__width):\n                self.__data[i][j] = value\n\n    def add_wall(self,value):\n        """"""\n        ATフィールド関数\n        valueで指定した値でボードの右端と下端をひとつ増やす。\n        Args:\n            -  value(any):増やしたい値\n        """"""\n        for i in range(self.__height):\n            self.__data[i].append(value)\n        self.__width+=1\n        self.__height+=1\n        self.__data.append([value]*(self.__width))\n    \n    def input(f:callable=int)->tuple:\n        """"""二次元ボードの入力\n\n        Args:\n            -  f (callable, optional): 各要素にかける関数\n\n        Returns:\n            -  tuple: 二次元ボードとHとWの組\n        """"""\n        H,W=map(int,input().split())\n        board = []\n        for i in range(H):\n            board.append(list(map(f,input().split())))\n        return Board(board),H,W\n\n\n",python,tab
974,1341730,"dev/ABC424d.py",0,0,"# ABC424d\n# 2025-09-20 20:38:35\n\ndef main():\n    # 関数定義スペース\n\n    def func():\n        ...\n\n    ...    \n    # 入力スペース\n\n    H, W = splitA(input())\n    S = splitS(input())\n\n    ...\n\n    # 処理スペース\n\n\n\n\n\n\n    ...\n\n\n\n# テストケース中枢処理\ndef case():\n    # TESTCASE = 1\n    TESTCASE = int(input()) # テストケース数の指定\n    for _ in range(TESTCASE):\n        try:\n            main()\n        except solvedException:\n            continue\n        # raise unSolvedExeption\n\n\n# インポート\nimport sys, itertools, math, heapq\nfrom collections import defaultdict, deque\nfrom sortedcontainers import SortedSet, SortedList, SortedDict  # CPython?\n\n# 定数・環境設定\nsys.setrecursionlimit(10**8)\nsys.set_int_max_str_digits(0)\ndict = defaultdict\nUPPER_ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""\nLOWER_ALPHABET=""abcdefghijklmnopqrstuvwxyz""\nMOD = 998244353\nMAX = 10**18\nLRUD = [(0, 1), (0, -1), (1, 0), (-1, 0)]\nLURULDRD = [(-1, -1), (-1, 1), (1, -1), (1, 1)]\n\n# 各種関数定義(超圧縮)\n## 便利関数\ndef printe(*values,sep="" "",end=""\n""):print(*values,sep=sep,end=end); fin()\ndef prin(stop=False,sep="" "",end=""\n"",file=sys.stdout):return (lambda*values:printe(*values,sep=sep,end=end)) if stop else (lambda*values:print(*values,sep=sep,end=end,file=file))\ndef yes(f=True): printe(""Yes"") if (f) else None\ndef no(f=True): printe(""No"") if (f) else None\ndef debug(*values,sep="" "",end=""\n""): print(*values,sep=sep,end=end,file=sys.stderr)\ndef printYN(f:bool): yes() if f else no()\ndef fin(f=True): raise solvedException if f else None\n## 分割関数\ndef split(value:str|list,sep:str="" "",func:callable=str) -> list:\n    result = []\n    if type(value) == list:\n        for i in range(len(value)):\n            result.append(split(value[i],sep))\n        return result\n    else:\n        if sep in value:\n            for i in value.split(sep):\n                result.append(func(i))\n        else:\n            result.append(func(value))\n        return result\n## 入力受け取り用\ndef input():return(sys.stdin.readline()).rstrip() #入力定数倍\ndef splitS(value:str|list,sep:str="" "")->str:return split(value,sep)[0] #文字列・分割して最初\ndef splitN(value:str|list,sep:str="" "")->int:return split(value,sep,int)[0] # 整数・分割して最初\ndef splitB(value:str|list,sep:str="" "")->list:return list(split(value,sep)) # 文字列・分割してすべて\ndef splitA(value:str|list,sep:str="" "")->list:return list(split(value,sep,int)) # 整数・分割してすべて\n\n# 例外クラス\nclass solvedException(Exception): pass # 処理打ち切り例外\nclass unSolvedExeption(Exception): # 回答未出力例外\n    def __init__(description = ""解答が出力されていません。""): super().__init__(description)\n\n# 実行\nif __name__ == ""__main__"":\n    case()\n",python,tab
975,1343298,"dev/ABC424d.py",32,0,"class Board():\n\n    """"""\n    二次元ボードを便利に使いやすくするためのクラス\n    """""" \n    ROTATE_0_DEGREE = 0\n    ROTATE_90_DEGREE = 1\n    ROTATE_180_DEGREE = 2\n    ROTATE_270_DEGREE = 3\n\n    # 自作ボードクラスのショートカット関数  \n    def input_board(height:int,f=lambda:input(list())):\n        """"""\n        標準入力からボード作成\n        Args:\n            -  height(int):高さ\n            -  f(function):入力の形式 指定しなかった場合は自動で\n                スペースのない文字列を想定した入力になる\n        Returns:\n            Board:作成されたボードクラス\n        """"""\n        board=[]\n        for i in range(height):\n            board.append(f())\n        return Board(board)\n\n    def input_board_with_wall(height:int,width:int,wall:any,f:lambda x:input(list())):\n        """"""\n        標準入力からボード作成(ATフィールド付)\n        Args:\n            -  height(int):高さ\n            -  width(int):幅\n            -  wall:壁に割り当てる値\n            -  f(function):入力の形式 指定しなかった場合は自動で\n                スペースのない文字列を想定した入力になる\n        Returns:\n            Board:作成されたボードクラス\n        """"""\n        board=[]\n        for i in range(height):\n            board.append(f()+[wall])\n        board.append([wall]*(width+1))\n        return Board(board)\n\n    def create_board(height:int,width:int,initial_value):\n        """"""\n        指定した高さと幅でボードを作成し、全て初期値を代入する。\n\n        Args:\n            -  height (int): 高さ\n            -  width (int): 幅\n            -  initial_value: 初期値 \n\n        Returns:\n            -  Board: 作成されたボード\n        """"""\n        raw_board = []\n        for i in range(height):\n            raw_board.append([initial_value]*width)\n        return Board(raw_board)\n\n\n    def __init__(self,board_data:list):\n        """"""\n        インスタンス生成関数\n        Args:\n            -  board_data(list):生成する元となる二次元配列データ\n        """"""\n        self.__data=[]\n        self.__height=len(board_data)\n        assert 0<self.__height #高さが0以下だった場合はボードの作りようがないためエラー\n        self.__width=len(board_data[0])\n        for i in range(self.__height):\n            assert len(board_data[i])==self.__width #幅がぶれているとこのクラスでは扱えないためエラー\n            self.__data.append(board_data[i])\n        self.__cells=self.__height*self.__width\n\n    def get_height(self):\n        """"""\n        ボードの高さの値を返す関数\n\n        Returns:\n            -  int:heightの値\n        """"""\n        return self.__height\n\n    def get_width(self):\n        """"""\n        ボードの幅の値を返す関数\n\n        Returns:\n            -  int:widthの値\n        """"""\n        return self.__width\n\n\n    def __len__(self):\n        """"""\n        len()を使うための関数\n        レコードの数を返す\n\n        Returns:\n            -  int:二次元配列のレコードの数\n        """"""\n        return self.__cells\n    \n    \n    def __getitem__(self,pos:tuple):\n        """"""\n        board[]を利用するための関数\n        レコードの値を取り出す\n\n        Args:\n            -  (y,x)形式の座標を表すタプル\n        Returns:\n            -  any:テーブルのy行目j列目の値\n        """"""\n        return self.__data[pos[0]][pos[1]]\n    \n    def get(self,pos:tuple):\n        """"""\n        レコードの値を取り出す関数\n\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n        Returns:\n            -  any:テーブルのy行目j列目の値        \n        """"""        \n        return self[pos]\n\n    def __str__(self):\n        """"""\n        str()で呼び出される関数\n        いい感じに整形して出力する\n        Returns:\n            -  str:いい感じに整形された二次元配列の文字列\n        """"""\n        datas=[]\n        sep_count=0\n        for i in range(self.__height):\n            \n            item="" | "".join(str(j) for j in self.__data[i])\n            datas.append(item)\n            sep_count=max(sep_count,len(item))\n            if i==self.__height-1:\n                sep=""\n""+""-""*sep_count+""-\n""\n        return sep.join(datas)\n\n    def set(self,pos,value):\n        """"""\n        値を代入する関数\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n            -  value(any):代入する値\n        """"""\n        self[pos]=value\n\n    def __setitem__(self,pos,value):\n        """"""\n        board[pos]=valueを使えるようにするための関数\n        値を代入する\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n            -  value(any):代入する値\n        """"""\n        self.__data[pos[0]][pos[1]]=value\n\n    def is_inside_positive(self,pos):\n        """"""\n        正の整数の範囲内で指定のposがボードの内側に含まれているかどうかを返す関数\n        \n        Args:\n            -  pos (tuple): (y,x)形式の座標を表すタプル\n        """"""\n        y,x=pos\n        return y<self.__height and x<self.__width\n\n    def is_inside_negative(self,pos):\n        """"""\n        負の整数の範囲内で指定のposがボードの内側に含まれているかどうかを返す関数\n        \n        Args:\n            -  pos (tuple): (y,x)形式の座標を表すタプル\n        """"""\n        y,x=pos\n        return -1*self.__width<=x and -1*self.__height<=y\n    \n\n    def is_inside(self,pos):\n        """"""\n        指定のposがボードの内側に含まれているかどうかを返す関数\n        ただし、マイナスを許容する\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n        Returns:\n            -  bool:含まれているか否か\n        """"""\n        return self.is_inside_positive(pos) or self.is_inside_negative(pos)\n\n    def rotate(self,degree:int):\n        """"""\n        ボードを回転させる関数\n        Args:\n            -  degree(int):ROTATE_**_DEGREE\n        """"""\n        if degree==self.ROTATE_90_DEGREE:\n            self.__data = [list(g) for g in zip(*self.__data[::-1])]\n            self.__height,self.__width=self.__width,self.__height\n        elif degree==self.ROTATE_180_DEGREE:\n            self.__data = [list(g)[::-1] for g in self.__data[::-1]]\n        elif degree==self.ROTATE_270_DEGREE:\n            self.__data = [list(g) for g in zip(*self.__data)][::-1]\n            self.__height,self.__width=self.__width,self.__height\n\n    def __flip_by_vertical(self):\n        """"""\n        ボードを縦方向の線対称に反転する\n        """"""\n        self.__data = [list(g)[::-1] for g in self.__data]\n    \n    def __flip_by_holizontal(self):\n        """"""\n        ボードを横方向の線対称に反転する\n        """"""\n        self.__data = [list(g) for g in self.__data[::-1]]\n    \n    def flip(self,vertical=False,horizontal=False):\n        """"""\n        ボードを縦か横か指定した方向の線対称に反転する\n        Args:\n            -  vertical(bool):初期値はFalseで、Trueにすると縦方向に反転する\n            -  horizontal(bool):初期値はFalseで、Trueにすると横方向に反転する\n        """"""\n        if vertical:\n            self.__flip_by_vertical()\n        if horizontal:\n            self.__flip_by_holizontal()\n\n    def copy(self):\n        """"""\n        コピー関数\n        Returns:\n            -  Board:別インスタンスで、中身が同じボードクラス\n        """"""\n        data=[]\n        for i in range(self.__height):\n            data.append(self.__data[i].copy())\n        return self.__class__(data)\n\n    def fill(self,value):\n        """"""\n        初期化関数\n        valueで指定した値でボードのすべてを埋める\n        Args:\n            -  value(any):埋めたい値\n        """"""\n        for i in range(self.__height):\n            for j in range(self.__width):\n                self.__data[i][j] = value\n\n    def add_wall(self,value):\n        """"""\n        ATフィールド関数\n        valueで指定した値でボードの右端と下端をひとつ増やす。\n        Args:\n            -  value(any):増やしたい値\n        """"""\n        for i in range(self.__height):\n            self.__data[i].append(value)\n        self.__width+=1\n        self.__height+=1\n        self.__data.append([value]*(self.__width))\n    \n    def input(f:callable=int)->tuple:\n        """"""二次元ボードの入力\n\n        Args:\n            -  f (callable, optional): 各要素にかける関数\n\n        Returns:\n            -  tuple: 二次元ボードとHとWの組\n        """"""\n        H,W=map(int,input().split())\n        board = []\n        for i in range(H):\n            board.append(list(map(f,input().split())))\n        return Board(board),H,W\n\n\n",python,content
976,1348745,"dev/ABC424d.py",7352,3,"",python,content
977,1348993,"dev/ABC424d.py",7347,5,"",python,content
978,1349093,"dev/ABC424d.py",7346,1,"",python,content
979,1349257,"dev/ABC424d.py",7340,6,"",python,content
980,1349373,"dev/ABC424d.py",7338,2,"",python,content
981,1349570,"dev/ABC424d.py",7336,2,"",python,content
982,1350193,"dev/ABC424d.py",7336,0,"B",python,content
983,1350405,"dev/ABC424d.py",7337,0,"o",python,content
984,1350569,"dev/ABC424d.py",7338,0,"a",python,content
985,1350691,"dev/ABC424d.py",7339,0,"r",python,content
986,1350863,"dev/ABC424d.py",7340,0,"d",python,content
987,1351079,"dev/ABC424d.py",7341,0,".",python,content
988,1354592,"dev/ABC424d.py",7342,0,"i",python,content
989,1354694,"dev/ABC424d.py",7343,0,"n",python,content
990,1354796,"dev/ABC424d.py",7344,0,"p",python,content
991,1354923,"dev/ABC424d.py",7345,0,"u",python,content
992,1356498,"dev/ABC424d.py",7342,4,"input_board_with_wall",python,content
993,1357253,"dev/ABC424d.py",7363,0,"()",python,content
994,1358590,"dev/ABC424d.py",7364,0,",",python,content
995,1359201,"dev/ABC424d.py",7364,1,"",python,content
996,1359513,"dev/ABC424d.py",7363,2,"",python,content
997,1360028,"dev/ABC424d.py",7363,0,"()",python,content
998,1362236,"dev/ABC424d.py",7363,2,"",python,content
999,1362604,"dev/ABC424d.py",7362,1,"",python,content
1000,1363010,"dev/ABC424d.py",7362,0,"l",python,content
1001,1363953,"dev/ABC424d.py",7342,21,"input_board_with_wall",python,content
1002,1364553,"dev/ABC424d.py",7363,0,"()",python,content
1003,1365413,"dev/ABC424d.py",7363,2,"",python,content
1004,1365635,"dev/ABC424d.py",7342,21,"",python,content
1005,1366430,"dev/ABC424d.py",7341,1,"",python,content
1006,1366682,"dev/ABC424d.py",7341,0,".",python,content
1007,1369329,"dev/ABC424d.py",7342,0,"input_board",python,content
1008,1370433,"dev/ABC424d.py",7353,0,"()",python,content
1009,1371084,"dev/ABC424d.py",7353,2,"",python,content
1010,1371258,"dev/ABC424d.py",7342,11,"",python,content
1011,1373985,"dev/ABC424d.py",7341,1,"",python,content
1012,1374750,"dev/ABC424d.py",7336,5,"",python,content
1013,1375443,"dev/ABC424d.py",7336,0,"B",python,content
1014,1375653,"dev/ABC424d.py",7337,0,"o",python,content
1015,1375722,"dev/ABC424d.py",7338,0,"a",python,content
1016,1375858,"dev/ABC424d.py",7339,0,"r",python,content
1017,1376007,"dev/ABC424d.py",7340,0,"d",python,content
1018,1377806,"dev/ABC424d.py",7341,0,".",python,content
1019,1389349,"dev/ABC424d.py",7341,1,"",python,content
1020,1389561,"dev/ABC424d.py",7341,0,".",python,content
1021,1390948,"dev/ABC424d.py",7342,0,"input_board",python,content
1022,1391882,"dev/ABC424d.py",7353,0,"_",python,content
1023,1392535,"dev/ABC424d.py",7342,12,"input_board_with_wall",python,content
1024,1392910,"dev/ABC424d.py",7363,0,"()",python,content
1025,1403363,"dev/ABC424d.py",7364,0,"H",python,content
1026,1404265,"dev/ABC424d.py",7365,0,",",python,content
1027,1404652,"dev/ABC424d.py",7366,0,"W",python,content
1028,1405453,"dev/ABC424d.py",7367,0,",",python,content
1029,1407948,"dev/ABC424d.py",7368,0,"W",python,content
1030,1409270,"dev/ABC424d.py",7368,1,"",python,content
1031,1410094,"dev/ABC424d.py",7368,0,"""""",python,content
1032,1414371,"dev/ABC424d.py",7369,0,"-",python,content
1033,1415510,"dev/ABC424d.py",7371,0,",",python,content
1034,1416185,"dev/ABC424d.py",7371,1,"",python,content
1035,1436690,"dev/ABC424d.py",7371,0,",",python,content
1036,1437785,"dev/ABC424d.py",7372,0,"i",python,content
1037,1437861,"dev/ABC424d.py",7373,0,"n",python,content
1038,1438002,"dev/ABC424d.py",7374,0,"p",python,content
1039,1438055,"dev/ABC424d.py",7375,0,"u",python,content
1040,1438245,"dev/ABC424d.py",7376,0,"t",python,content
1041,1438849,"dev/ABC424d.py",7377,0,"()",python,content
1042,1439636,"dev/ABC424d.py",7378,0,"l",python,content
1043,1439709,"dev/ABC424d.py",7379,0,"i",python,content
1044,1439877,"dev/ABC424d.py",7380,0,"s",python,content
1045,1439950,"dev/ABC424d.py",7381,0,"t",python,content
1046,1445687,"dev/ABC424d.py",7385,0,"    ",python,content
1047,1445852,"dev/ABC424d.py",7389,0,"p",python,content
1048,1445959,"dev/ABC424d.py",7390,0,"a",python,content
1049,1446040,"dev/ABC424d.py",7391,0,"s",python,content
1050,1446225,"dev/ABC424d.py",7392,0,"s",python,content
1051,1460880,"dev/ABC424d.py",7382,0,"()",python,content
1052,1461233,"dev/ABC424d.py",7382,2,"",python,content
1053,1461742,"dev/ABC424d.py",7381,1,"",python,content
1054,1461999,"dev/ABC424d.py",7378,3,"",python,content
1055,1462249,"dev/ABC424d.py",7377,1,"",python,content
1056,1462574,"dev/ABC424d.py",7372,5,"",python,content
1057,1462916,"dev/ABC424d.py",7372,0,"l",python,content
1058,1463011,"dev/ABC424d.py",7373,0,"i",python,content
1059,1463128,"dev/ABC424d.py",7374,0,"s",python,content
1060,1463204,"dev/ABC424d.py",7375,0,"t",python,content
1061,1463489,"dev/ABC424d.py",7376,0,"()",python,content
1062,1464044,"dev/ABC424d.py",7377,0,"i",python,content
1063,1464140,"dev/ABC424d.py",7378,0,"n",python,content
1064,1464204,"dev/ABC424d.py",7379,0,"p",python,content
1065,1464334,"dev/ABC424d.py",7380,0,"u",python,content
1066,1464482,"dev/ABC424d.py",7381,0,"t",python,content
1067,1464762,"dev/ABC424d.py",7382,0,"()",python,content
1068,1464987,"dev/ABC424d.py",7383,1,")",python,content
1069,1465768,"dev/ABC424d.py",7385,1,"",python,content
1070,1491229,"dev/ABC424d.py",674,1,"",python,content
1071,1491394,"dev/ABC424d.py",673,1,"",python,content
1072,1493636,"dev/ABC424d.py",666,1,"",python,content
1073,1493920,"dev/ABC424d.py",666,0,"=",python,content
1074,1495934,"dev/ABC424c.py",0,0,"# ABC424c\n# 2025-09-20 20:38:35\n\ndef main():\n    # 関数定義スペース\n\n    def func():\n        ...\n\n    ...    \n    # 入力スペース\n\n    N = splitN(input())\n    SKILL = []\n    for i in range(N):\n        a, b = splitA(input())\n        SKILL.append((a,b))\n    ...\n\n    # 処理スペース\n    stack = []\n    done = set()\n\n    req_skills = dict(lambda:[])\n    for i in range(N):\n        a,b = SKILL[i]\n        if a==0 and b == 0:\n            stack.append(i)\n            done.add(i)\n            continue\n        req_skills[a-1].append(i)\n        req_skills[b-1].append(i)\n\n    while stack:\n        t = stack.pop()\n        for i in req_skills[t]:\n            if i not in done:\n                stack.append(i)\n                done.add(i)\n    print(len(done))\n\n\n\n\n\n\n\n    ...\n\n\n\n# テストケース中枢処理\ndef case():\n    TESTCASE = 1\n    # TESTCASE = int(input()) # テストケース数の指定\n    for _ in range(TESTCASE):\n        try:\n            main()\n        except solvedException:\n            continue\n        # raise unSolvedExeption\n\n\n# インポート\nimport sys, itertools, math, heapq\nfrom collections import defaultdict, deque\nfrom sortedcontainers import SortedSet, SortedList, SortedDict  # CPython?\n\n# 定数・環境設定\nsys.setrecursionlimit(10**8)\nsys.set_int_max_str_digits(0)\ndict = defaultdict\nUPPER_ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""\nLOWER_ALPHABET=""abcdefghijklmnopqrstuvwxyz""\nMOD = 998244353\nMAX = 10**18\nLRUD = [(0, 1), (0, -1), (1, 0), (-1, 0)]\nLURULDRD = [(-1, -1), (-1, 1), (1, -1), (1, 1)]\n\n# 各種関数定義(超圧縮)\n## 便利関数\ndef printe(*values,sep="" "",end=""\n""):print(*values,sep=sep,end=end); fin()\ndef prin(stop=False,sep="" "",end=""\n"",file=sys.stdout):return (lambda*values:printe(*values,sep=sep,end=end)) if stop else (lambda*values:print(*values,sep=sep,end=end,file=file))\ndef yes(f=True): printe(""Yes"") if (f) else None\ndef no(f=True): printe(""No"") if (f) else None\ndef debug(*values,sep="" "",end=""\n""): print(*values,sep=sep,end=end,file=sys.stderr)\ndef printYN(f:bool): yes() if f else no()\ndef fin(f=True): raise solvedException if f else None\n## 分割関数\ndef split(value:str|list,sep:str="" "",func:callable=str) -> list:\n    result = []\n    if type(value) == list:\n        for i in range(len(value)):\n            result.append(split(value[i],sep))\n        return result\n    else:\n        if sep in value:\n            for i in value.split(sep):\n                result.append(func(i))\n        else:\n            result.append(func(value))\n        return result\n## 入力受け取り用\ndef input():return(sys.stdin.readline()).rstrip() #入力定数倍\ndef splitS(value:str|list,sep:str="" "")->str:return split(value,sep)[0] #文字列・分割して最初\ndef splitN(value:str|list,sep:str="" "")->int:return split(value,sep,int)[0] # 整数・分割して最初\ndef splitB(value:str|list,sep:str="" "")->list:return list(split(value,sep)) # 文字列・分割してすべて\ndef splitA(value:str|list,sep:str="" "")->list:return list(split(value,sep,int)) # 整数・分割してすべて\n\n# 例外クラス\nclass solvedException(Exception): pass # 処理打ち切り例外\nclass unSolvedExeption(Exception): # 回答未出力例外\n    def __init__(description = ""解答が出力されていません。""): super().__init__(description)\n\n# 実行\nif __name__ == ""__main__"":\n    case()\n",python,tab
1075,1496244,"dev/ABC424d.py",0,0,"# ABC424d\n# 2025-09-20 20:38:35\nclass Board():\n\n    """"""\n    二次元ボードを便利に使いやすくするためのクラス\n    """""" \n    ROTATE_0_DEGREE = 0\n    ROTATE_90_DEGREE = 1\n    ROTATE_180_DEGREE = 2\n    ROTATE_270_DEGREE = 3\n\n    # 自作ボードクラスのショートカット関数  \n    def input_board(height:int,f=lambda:input(list())):\n        """"""\n        標準入力からボード作成\n        Args:\n            -  height(int):高さ\n            -  f(function):入力の形式 指定しなかった場合は自動で\n                スペースのない文字列を想定した入力になる\n        Returns:\n            Board:作成されたボードクラス\n        """"""\n        board=[]\n        for i in range(height):\n            board.append(f())\n        return Board(board)\n\n    def input_board_with_wall(height:int,width:int,wall:any,f=lambda:input(list())):\n        """"""\n        標準入力からボード作成(ATフィールド付)\n        Args:\n            -  height(int):高さ\n            -  width(int):幅\n            -  wall:壁に割り当てる値\n            -  f(function):入力の形式 指定しなかった場合は自動で\n                スペースのない文字列を想定した入力になる\n        Returns:\n            Board:作成されたボードクラス\n        """"""\n        board=[]\n        for i in range(height):\n            board.append(f()+[wall])\n        board.append([wall]*(width+1))\n        return Board(board)\n\n    def create_board(height:int,width:int,initial_value):\n        """"""\n        指定した高さと幅でボードを作成し、全て初期値を代入する。\n\n        Args:\n            -  height (int): 高さ\n            -  width (int): 幅\n            -  initial_value: 初期値 \n\n        Returns:\n            -  Board: 作成されたボード\n        """"""\n        raw_board = []\n        for i in range(height):\n            raw_board.append([initial_value]*width)\n        return Board(raw_board)\n\n\n    def __init__(self,board_data:list):\n        """"""\n        インスタンス生成関数\n        Args:\n            -  board_data(list):生成する元となる二次元配列データ\n        """"""\n        self.__data=[]\n        self.__height=len(board_data)\n        assert 0<self.__height #高さが0以下だった場合はボードの作りようがないためエラー\n        self.__width=len(board_data[0])\n        for i in range(self.__height):\n            assert len(board_data[i])==self.__width #幅がぶれているとこのクラスでは扱えないためエラー\n            self.__data.append(board_data[i])\n        self.__cells=self.__height*self.__width\n\n    def get_height(self):\n        """"""\n        ボードの高さの値を返す関数\n\n        Returns:\n            -  int:heightの値\n        """"""\n        return self.__height\n\n    def get_width(self):\n        """"""\n        ボードの幅の値を返す関数\n\n        Returns:\n            -  int:widthの値\n        """"""\n        return self.__width\n\n\n    def __len__(self):\n        """"""\n        len()を使うための関数\n        レコードの数を返す\n\n        Returns:\n            -  int:二次元配列のレコードの数\n        """"""\n        return self.__cells\n    \n    \n    def __getitem__(self,pos:tuple):\n        """"""\n        board[]を利用するための関数\n        レコードの値を取り出す\n\n        Args:\n            -  (y,x)形式の座標を表すタプル\n        Returns:\n            -  any:テーブルのy行目j列目の値\n        """"""\n        return self.__data[pos[0]][pos[1]]\n    \n    def get(self,pos:tuple):\n        """"""\n        レコードの値を取り出す関数\n\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n        Returns:\n            -  any:テーブルのy行目j列目の値        \n        """"""        \n        return self[pos]\n\n    def __str__(self):\n        """"""\n        str()で呼び出される関数\n        いい感じに整形して出力する\n        Returns:\n            -  str:いい感じに整形された二次元配列の文字列\n        """"""\n        datas=[]\n        sep_count=0\n        for i in range(self.__height):\n            \n            item="" | "".join(str(j) for j in self.__data[i])\n            datas.append(item)\n            sep_count=max(sep_count,len(item))\n            if i==self.__height-1:\n                sep=""\n""+""-""*sep_count+""-\n""\n        return sep.join(datas)\n\n    def set(self,pos,value):\n        """"""\n        値を代入する関数\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n            -  value(any):代入する値\n        """"""\n        self[pos]=value\n\n    def __setitem__(self,pos,value):\n        """"""\n        board[pos]=valueを使えるようにするための関数\n        値を代入する\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n            -  value(any):代入する値\n        """"""\n        self.__data[pos[0]][pos[1]]=value\n\n    def is_inside_positive(self,pos):\n        """"""\n        正の整数の範囲内で指定のposがボードの内側に含まれているかどうかを返す関数\n        \n        Args:\n            -  pos (tuple): (y,x)形式の座標を表すタプル\n        """"""\n        y,x=pos\n        return y<self.__height and x<self.__width\n\n    def is_inside_negative(self,pos):\n        """"""\n        負の整数の範囲内で指定のposがボードの内側に含まれているかどうかを返す関数\n        \n        Args:\n            -  pos (tuple): (y,x)形式の座標を表すタプル\n        """"""\n        y,x=pos\n        return -1*self.__width<=x and -1*self.__height<=y\n    \n\n    def is_inside(self,pos):\n        """"""\n        指定のposがボードの内側に含まれているかどうかを返す関数\n        ただし、マイナスを許容する\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n        Returns:\n            -  bool:含まれているか否か\n        """"""\n        return self.is_inside_positive(pos) or self.is_inside_negative(pos)\n\n    def rotate(self,degree:int):\n        """"""\n        ボードを回転させる関数\n        Args:\n            -  degree(int):ROTATE_**_DEGREE\n        """"""\n        if degree==self.ROTATE_90_DEGREE:\n            self.__data = [list(g) for g in zip(*self.__data[::-1])]\n            self.__height,self.__width=self.__width,self.__height\n        elif degree==self.ROTATE_180_DEGREE:\n            self.__data = [list(g)[::-1] for g in self.__data[::-1]]\n        elif degree==self.ROTATE_270_DEGREE:\n            self.__data = [list(g) for g in zip(*self.__data)][::-1]\n            self.__height,self.__width=self.__width,self.__height\n\n    def __flip_by_vertical(self):\n        """"""\n        ボードを縦方向の線対称に反転する\n        """"""\n        self.__data = [list(g)[::-1] for g in self.__data]\n    \n    def __flip_by_holizontal(self):\n        """"""\n        ボードを横方向の線対称に反転する\n        """"""\n        self.__data = [list(g) for g in self.__data[::-1]]\n    \n    def flip(self,vertical=False,horizontal=False):\n        """"""\n        ボードを縦か横か指定した方向の線対称に反転する\n        Args:\n            -  vertical(bool):初期値はFalseで、Trueにすると縦方向に反転する\n            -  horizontal(bool):初期値はFalseで、Trueにすると横方向に反転する\n        """"""\n        if vertical:\n            self.__flip_by_vertical()\n        if horizontal:\n            self.__flip_by_holizontal()\n\n    def copy(self):\n        """"""\n        コピー関数\n        Returns:\n            -  Board:別インスタンスで、中身が同じボードクラス\n        """"""\n        data=[]\n        for i in range(self.__height):\n            data.append(self.__data[i].copy())\n        return self.__class__(data)\n\n    def fill(self,value):\n        """"""\n        初期化関数\n        valueで指定した値でボードのすべてを埋める\n        Args:\n            -  value(any):埋めたい値\n        """"""\n        for i in range(self.__height):\n            for j in range(self.__width):\n                self.__data[i][j] = value\n\n    def add_wall(self,value):\n        """"""\n        ATフィールド関数\n        valueで指定した値でボードの右端と下端をひとつ増やす。\n        Args:\n            -  value(any):増やしたい値\n        """"""\n        for i in range(self.__height):\n            self.__data[i].append(value)\n        self.__width+=1\n        self.__height+=1\n        self.__data.append([value]*(self.__width))\n    \n    def input(f:callable=int)->tuple:\n        """"""二次元ボードの入力\n\n        Args:\n            -  f (callable, optional): 各要素にかける関数\n\n        Returns:\n            -  tuple: 二次元ボードとHとWの組\n        """"""\n        H,W=map(int,input().split())\n        board = []\n        for i in range(H):\n            board.append(list(map(f,input().split())))\n        return Board(board),H,W\n\n\n\ndef main():\n    # 関数定義スペース\n\n    def func():\n        ...\n\n    ...    \n    # 入力スペース\n\n    H, W = splitA(input())\n    Board.input_board_with_wall(H,W,""-"",list(input()))\n    pass\n    ...\n\n    # 処理スペース\n\n\n\n\n\n\n    ...\n\n\n\n# テストケース中枢処理\ndef case():\n    # TESTCASE = 1\n    TESTCASE = int(input()) # テストケース数の指定\n    for _ in range(TESTCASE):\n        try:\n            main()\n        except solvedException:\n            continue\n        # raise unSolvedExeption\n\n\n# インポート\nimport sys, itertools, math, heapq\nfrom collections import defaultdict, deque\nfrom sortedcontainers import SortedSet, SortedList, SortedDict  # CPython?\n\n# 定数・環境設定\nsys.setrecursionlimit(10**8)\nsys.set_int_max_str_digits(0)\ndict = defaultdict\nUPPER_ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""\nLOWER_ALPHABET=""abcdefghijklmnopqrstuvwxyz""\nMOD = 998244353\nMAX = 10**18\nLRUD = [(0, 1), (0, -1), (1, 0), (-1, 0)]\nLURULDRD = [(-1, -1), (-1, 1), (1, -1), (1, 1)]\n\n# 各種関数定義(超圧縮)\n## 便利関数\ndef printe(*values,sep="" "",end=""\n""):print(*values,sep=sep,end=end); fin()\ndef prin(stop=False,sep="" "",end=""\n"",file=sys.stdout):return (lambda*values:printe(*values,sep=sep,end=end)) if stop else (lambda*values:print(*values,sep=sep,end=end,file=file))\ndef yes(f=True): printe(""Yes"") if (f) else None\ndef no(f=True): printe(""No"") if (f) else None\ndef debug(*values,sep="" "",end=""\n""): print(*values,sep=sep,end=end,file=sys.stderr)\ndef printYN(f:bool): yes() if f else no()\ndef fin(f=True): raise solvedException if f else None\n## 分割関数\ndef split(value:str|list,sep:str="" "",func:callable=str) -> list:\n    result = []\n    if type(value) == list:\n        for i in range(len(value)):\n            result.append(split(value[i],sep))\n        return result\n    else:\n        if sep in value:\n            for i in value.split(sep):\n                result.append(func(i))\n        else:\n            result.append(func(value))\n        return result\n## 入力受け取り用\ndef input():return(sys.stdin.readline()).rstrip() #入力定数倍\ndef splitS(value:str|list,sep:str="" "")->str:return split(value,sep)[0] #文字列・分割して最初\ndef splitN(value:str|list,sep:str="" "")->int:return split(value,sep,int)[0] # 整数・分割して最初\ndef splitB(value:str|list,sep:str="" "")->list:return list(split(value,sep)) # 文字列・分割してすべて\ndef splitA(value:str|list,sep:str="" "")->list:return list(split(value,sep,int)) # 整数・分割してすべて\n\n# 例外クラス\nclass solvedException(Exception): pass # 処理打ち切り例外\nclass unSolvedExeption(Exception): # 回答未出力例外\n    def __init__(description = ""解答が出力されていません。""): super().__init__(description)\n\n# 実行\nif __name__ == ""__main__"":\n    case()\n",python,tab
1076,1499992,"dev/ABC424d.py",7370,4,"",python,content
1077,1500182,"dev/ABC424d.py",7370,1,"",python,content
1078,1500344,"dev/ABC424d.py",7370,5,"",python,content
1079,1500837,"dev/ABC424d.py",7370,1,"",python,content
1080,1500982,"dev/ABC424d.py",7370,1,"",python,content
1081,1501126,"dev/ABC424d.py",7370,1,"",python,content
1082,1507665,"dev/ABC424d.py",680,1,"",python,content
1083,1507811,"dev/ABC424d.py",680,1,"",python,content
1084,1507966,"dev/ABC424d.py",680,1,"",python,content
1085,1508113,"dev/ABC424d.py",680,1,"",python,content
1086,1508278,"dev/ABC424d.py",680,1,"",python,content
1087,1508512,"dev/ABC424d.py",680,1,"",python,content
1088,1512613,"dev/ABC424d.py",681,0,")",python,content
1088,1512613,"dev/ABC424d.py",681,0,")",python,content
1089,1512613,"dev/ABC424d.py",674,0,"(",python,content
1090,1513222,"dev/ABC424d.py",674,0,"l",python,content
1091,1513322,"dev/ABC424d.py",675,0,"i",python,content
1092,1513539,"dev/ABC424d.py",676,0,"t",python,content
1093,1513626,"dev/ABC424d.py",677,0,"s",python,content
1094,1513979,"dev/ABC424d.py",677,1,"",python,content
1095,1514135,"dev/ABC424d.py",676,1,"",python,content
1096,1514238,"dev/ABC424d.py",676,0,"s",python,content
1097,1514334,"dev/ABC424d.py",677,0,"t",python,content
1098,1522750,"dev/ABC424d.py",7376,4,"",python,content
1099,1523681,"dev/ABC424d.py",7334,0,"=",python,content
1100,1524858,"dev/ABC424d.py",7334,0,"B",python,content
1101,1524923,"dev/ABC424d.py",7335,0,"O",python,content
1102,1524957,"dev/ABC424d.py",7336,0,"A",python,content
1103,1525085,"dev/ABC424d.py",7337,0,"R",python,content
1104,1525234,"dev/ABC424d.py",7338,0,"D",python,content
1105,2008496,"dev/ABC424d.py",7382,0,"b",python,content
1106,2008582,"dev/ABC424d.py",7383,0,"o",python,content
1107,2008659,"dev/ABC424d.py",7384,0,"a",python,content
1108,2008761,"dev/ABC424d.py",7385,0,"r",python,content
1109,2008930,"dev/ABC424d.py",7386,0,"d",python,content
1110,2009397,"dev/ABC424d.py",7387,0," ",python,content
1111,2009522,"dev/ABC424d.py",7388,0,"=",python,content
1112,2009770,"dev/ABC424d.py",7389,0," ",python,content
1113,2010937,"dev/ABC424d.py",7390,0,"B",python,content
1114,2011040,"dev/ABC424d.py",7391,0,"O",python,content
1115,2011112,"dev/ABC424d.py",7392,0,"A",python,content
1116,2011238,"dev/ABC424d.py",7393,0,"R",python,content
1117,2011382,"dev/ABC424d.py",7394,0,"D",python,content
1118,2011899,"dev/ABC424d.py",7395,0,"()",python,content
1119,2012567,"dev/ABC424d.py",7396,0,"H",python,content
1120,2013360,"dev/ABC424d.py",7396,1,"",python,content
1121,2013589,"dev/ABC424d.py",7395,2,"",python,content
1122,2013930,"dev/ABC424d.py",7390,5,"",python,content
1123,2015399,"dev/ABC424d.py",7390,0,"B",python,content
1124,2015451,"dev/ABC424d.py",7391,0,"O",python,content
1125,2015515,"dev/ABC424d.py",7392,0,"A",python,content
1126,2015621,"dev/ABC424d.py",7393,0,"R",python,content
1127,2015770,"dev/ABC424d.py",7394,0,"D",python,content
1128,2015998,"dev/ABC424d.py",7395,0,"()",python,content
1129,2017858,"dev/ABC424d.py",7395,2,"",python,content
1130,2018209,"dev/ABC424d.py",7390,5,"",python,content
1131,2018550,"dev/ABC424d.py",7390,0,"B",python,content
1132,2018782,"dev/ABC424d.py",7391,0,"o",python,content
1133,2018815,"dev/ABC424d.py",7392,0,"a",python,content
1134,2018974,"dev/ABC424d.py",7393,0,"r",python,content
1135,2019114,"dev/ABC424d.py",7394,0,"d",python,content
1136,2019290,"dev/ABC424d.py",7395,0,".",python,content
1137,2019658,"dev/ABC424d.py",7395,1,"",python,content
1138,2021677,"dev/ABC424d.py",7395,0,"()",python,content
1139,2025904,"dev/ABC424d.py",7395,2,"",python,content
1140,2026115,"dev/ABC424d.py",7390,5,"",python,content
1141,2026696,"dev/ABC424d.py",7390,0,"B",python,content
1142,2026927,"dev/ABC424d.py",7391,0,"o",python,content
1143,2026990,"dev/ABC424d.py",7392,0,"a",python,content
1144,2027134,"dev/ABC424d.py",7393,0,"r",python,content
1145,2027361,"dev/ABC424d.py",7394,0,"d",python,content
1146,2028363,"dev/ABC424d.py",7395,0,".",python,content
1147,2030455,"dev/ABC424d.py",7396,0,"create_board",python,content
1148,2030871,"dev/ABC424d.py",7408,0,"()",python,content
1149,2037528,"dev/ABC424c.py",0,0,"# ABC424c\n# 2025-09-20 20:38:35\n\ndef main():\n    # 関数定義スペース\n\n    def func():\n        ...\n\n    ...    \n    # 入力スペース\n\n    N = splitN(input())\n    SKILL = []\n    for i in range(N):\n        a, b = splitA(input())\n        SKILL.append((a,b))\n    ...\n\n    # 処理スペース\n    stack = []\n    done = set()\n\n    req_skills = dict(lambda:[])\n    for i in range(N):\n        a,b = SKILL[i]\n        if a==0 and b == 0:\n            stack.append(i)\n            done.add(i)\n            continue\n        req_skills[a-1].append(i)\n        req_skills[b-1].append(i)\n\n    while stack:\n        t = stack.pop()\n        for i in req_skills[t]:\n            if i not in done:\n                stack.append(i)\n                done.add(i)\n    print(len(done))\n\n\n\n\n\n\n\n    ...\n\n\n\n# テストケース中枢処理\ndef case():\n    TESTCASE = 1\n    # TESTCASE = int(input()) # テストケース数の指定\n    for _ in range(TESTCASE):\n        try:\n            main()\n        except solvedException:\n            continue\n        # raise unSolvedExeption\n\n\n# インポート\nimport sys, itertools, math, heapq\nfrom collections import defaultdict, deque\nfrom sortedcontainers import SortedSet, SortedList, SortedDict  # CPython?\n\n# 定数・環境設定\nsys.setrecursionlimit(10**8)\nsys.set_int_max_str_digits(0)\ndict = defaultdict\nUPPER_ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""\nLOWER_ALPHABET=""abcdefghijklmnopqrstuvwxyz""\nMOD = 998244353\nMAX = 10**18\nLRUD = [(0, 1), (0, -1), (1, 0), (-1, 0)]\nLURULDRD = [(-1, -1), (-1, 1), (1, -1), (1, 1)]\n\n# 各種関数定義(超圧縮)\n## 便利関数\ndef printe(*values,sep="" "",end=""\n""):print(*values,sep=sep,end=end); fin()\ndef prin(stop=False,sep="" "",end=""\n"",file=sys.stdout):return (lambda*values:printe(*values,sep=sep,end=end)) if stop else (lambda*values:print(*values,sep=sep,end=end,file=file))\ndef yes(f=True): printe(""Yes"") if (f) else None\ndef no(f=True): printe(""No"") if (f) else None\ndef debug(*values,sep="" "",end=""\n""): print(*values,sep=sep,end=end,file=sys.stderr)\ndef printYN(f:bool): yes() if f else no()\ndef fin(f=True): raise solvedException if f else None\n## 分割関数\ndef split(value:str|list,sep:str="" "",func:callable=str) -> list:\n    result = []\n    if type(value) == list:\n        for i in range(len(value)):\n            result.append(split(value[i],sep))\n        return result\n    else:\n        if sep in value:\n            for i in value.split(sep):\n                result.append(func(i))\n        else:\n            result.append(func(value))\n        return result\n## 入力受け取り用\ndef input():return(sys.stdin.readline()).rstrip() #入力定数倍\ndef splitS(value:str|list,sep:str="" "")->str:return split(value,sep)[0] #文字列・分割して最初\ndef splitN(value:str|list,sep:str="" "")->int:return split(value,sep,int)[0] # 整数・分割して最初\ndef splitB(value:str|list,sep:str="" "")->list:return list(split(value,sep)) # 文字列・分割してすべて\ndef splitA(value:str|list,sep:str="" "")->list:return list(split(value,sep,int)) # 整数・分割してすべて\n\n# 例外クラス\nclass solvedException(Exception): pass # 処理打ち切り例外\nclass unSolvedExeption(Exception): # 回答未出力例外\n    def __init__(description = ""解答が出力されていません。""): super().__init__(description)\n\n# 実行\nif __name__ == ""__main__"":\n    case()\n",python,tab
1150,2042986,"dev/ABC424d.py",0,0,"# ABC424d\n# 2025-09-20 20:38:35\nclass Board():\n\n    """"""\n    二次元ボードを便利に使いやすくするためのクラス\n    """""" \n    ROTATE_0_DEGREE = 0\n    ROTATE_90_DEGREE = 1\n    ROTATE_180_DEGREE = 2\n    ROTATE_270_DEGREE = 3\n\n    # 自作ボードクラスのショートカット関数  \n    def input_board(height:int,f=lambda:input(list())):\n        """"""\n        標準入力からボード作成\n        Args:\n            -  height(int):高さ\n            -  f(function):入力の形式 指定しなかった場合は自動で\n                スペースのない文字列を想定した入力になる\n        Returns:\n            Board:作成されたボードクラス\n        """"""\n        board=[]\n        for i in range(height):\n            board.append(f())\n        return Board(board)\n\n    def input_board_with_wall(height:int,width:int,wall:any,f=lambda:list(input())):\n        """"""\n        標準入力からボード作成(ATフィールド付)\n        Args:\n            -  height(int):高さ\n            -  width(int):幅\n            -  wall:壁に割り当てる値\n            -  f(function):入力の形式 指定しなかった場合は自動で\n                スペースのない文字列を想定した入力になる\n        Returns:\n            Board:作成されたボードクラス\n        """"""\n        board=[]\n        for i in range(height):\n            board.append(f()+[wall])\n        board.append([wall]*(width+1))\n        return Board(board)\n\n    def create_board(height:int,width:int,initial_value):\n        """"""\n        指定した高さと幅でボードを作成し、全て初期値を代入する。\n\n        Args:\n            -  height (int): 高さ\n            -  width (int): 幅\n            -  initial_value: 初期値 \n\n        Returns:\n            -  Board: 作成されたボード\n        """"""\n        raw_board = []\n        for i in range(height):\n            raw_board.append([initial_value]*width)\n        return Board(raw_board)\n\n\n    def __init__(self,board_data:list):\n        """"""\n        インスタンス生成関数\n        Args:\n            -  board_data(list):生成する元となる二次元配列データ\n        """"""\n        self.__data=[]\n        self.__height=len(board_data)\n        assert 0<self.__height #高さが0以下だった場合はボードの作りようがないためエラー\n        self.__width=len(board_data[0])\n        for i in range(self.__height):\n            assert len(board_data[i])==self.__width #幅がぶれているとこのクラスでは扱えないためエラー\n            self.__data.append(board_data[i])\n        self.__cells=self.__height*self.__width\n\n    def get_height(self):\n        """"""\n        ボードの高さの値を返す関数\n\n        Returns:\n            -  int:heightの値\n        """"""\n        return self.__height\n\n    def get_width(self):\n        """"""\n        ボードの幅の値を返す関数\n\n        Returns:\n            -  int:widthの値\n        """"""\n        return self.__width\n\n\n    def __len__(self):\n        """"""\n        len()を使うための関数\n        レコードの数を返す\n\n        Returns:\n            -  int:二次元配列のレコードの数\n        """"""\n        return self.__cells\n    \n    \n    def __getitem__(self,pos:tuple):\n        """"""\n        board[]を利用するための関数\n        レコードの値を取り出す\n\n        Args:\n            -  (y,x)形式の座標を表すタプル\n        Returns:\n            -  any:テーブルのy行目j列目の値\n        """"""\n        return self.__data[pos[0]][pos[1]]\n    \n    def get(self,pos:tuple):\n        """"""\n        レコードの値を取り出す関数\n\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n        Returns:\n            -  any:テーブルのy行目j列目の値        \n        """"""        \n        return self[pos]\n\n    def __str__(self):\n        """"""\n        str()で呼び出される関数\n        いい感じに整形して出力する\n        Returns:\n            -  str:いい感じに整形された二次元配列の文字列\n        """"""\n        datas=[]\n        sep_count=0\n        for i in range(self.__height):\n            \n            item="" | "".join(str(j) for j in self.__data[i])\n            datas.append(item)\n            sep_count=max(sep_count,len(item))\n            if i==self.__height-1:\n                sep=""\n""+""-""*sep_count+""-\n""\n        return sep.join(datas)\n\n    def set(self,pos,value):\n        """"""\n        値を代入する関数\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n            -  value(any):代入する値\n        """"""\n        self[pos]=value\n\n    def __setitem__(self,pos,value):\n        """"""\n        board[pos]=valueを使えるようにするための関数\n        値を代入する\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n            -  value(any):代入する値\n        """"""\n        self.__data[pos[0]][pos[1]]=value\n\n    def is_inside_positive(self,pos):\n        """"""\n        正の整数の範囲内で指定のposがボードの内側に含まれているかどうかを返す関数\n        \n        Args:\n            -  pos (tuple): (y,x)形式の座標を表すタプル\n        """"""\n        y,x=pos\n        return y<self.__height and x<self.__width\n\n    def is_inside_negative(self,pos):\n        """"""\n        負の整数の範囲内で指定のposがボードの内側に含まれているかどうかを返す関数\n        \n        Args:\n            -  pos (tuple): (y,x)形式の座標を表すタプル\n        """"""\n        y,x=pos\n        return -1*self.__width<=x and -1*self.__height<=y\n    \n\n    def is_inside(self,pos):\n        """"""\n        指定のposがボードの内側に含まれているかどうかを返す関数\n        ただし、マイナスを許容する\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n        Returns:\n            -  bool:含まれているか否か\n        """"""\n        return self.is_inside_positive(pos) or self.is_inside_negative(pos)\n\n    def rotate(self,degree:int):\n        """"""\n        ボードを回転させる関数\n        Args:\n            -  degree(int):ROTATE_**_DEGREE\n        """"""\n        if degree==self.ROTATE_90_DEGREE:\n            self.__data = [list(g) for g in zip(*self.__data[::-1])]\n            self.__height,self.__width=self.__width,self.__height\n        elif degree==self.ROTATE_180_DEGREE:\n            self.__data = [list(g)[::-1] for g in self.__data[::-1]]\n        elif degree==self.ROTATE_270_DEGREE:\n            self.__data = [list(g) for g in zip(*self.__data)][::-1]\n            self.__height,self.__width=self.__width,self.__height\n\n    def __flip_by_vertical(self):\n        """"""\n        ボードを縦方向の線対称に反転する\n        """"""\n        self.__data = [list(g)[::-1] for g in self.__data]\n    \n    def __flip_by_holizontal(self):\n        """"""\n        ボードを横方向の線対称に反転する\n        """"""\n        self.__data = [list(g) for g in self.__data[::-1]]\n    \n    def flip(self,vertical=False,horizontal=False):\n        """"""\n        ボードを縦か横か指定した方向の線対称に反転する\n        Args:\n            -  vertical(bool):初期値はFalseで、Trueにすると縦方向に反転する\n            -  horizontal(bool):初期値はFalseで、Trueにすると横方向に反転する\n        """"""\n        if vertical:\n            self.__flip_by_vertical()\n        if horizontal:\n            self.__flip_by_holizontal()\n\n    def copy(self):\n        """"""\n        コピー関数\n        Returns:\n            -  Board:別インスタンスで、中身が同じボードクラス\n        """"""\n        data=[]\n        for i in range(self.__height):\n            data.append(self.__data[i].copy())\n        return self.__class__(data)\n\n    def fill(self,value):\n        """"""\n        初期化関数\n        valueで指定した値でボードのすべてを埋める\n        Args:\n            -  value(any):埋めたい値\n        """"""\n        for i in range(self.__height):\n            for j in range(self.__width):\n                self.__data[i][j] = value\n\n    def add_wall(self,value):\n        """"""\n        ATフィールド関数\n        valueで指定した値でボードの右端と下端をひとつ増やす。\n        Args:\n            -  value(any):増やしたい値\n        """"""\n        for i in range(self.__height):\n            self.__data[i].append(value)\n        self.__width+=1\n        self.__height+=1\n        self.__data.append([value]*(self.__width))\n    \n    def input(f:callable=int)->tuple:\n        """"""二次元ボードの入力\n\n        Args:\n            -  f (callable, optional): 各要素にかける関数\n\n        Returns:\n            -  tuple: 二次元ボードとHとWの組\n        """"""\n        H,W=map(int,input().split())\n        board = []\n        for i in range(H):\n            board.append(list(map(f,input().split())))\n        return Board(board),H,W\n\n\n\ndef main():\n    # 関数定義スペース\n\n    def func():\n        ...\n\n    ...    \n    # 入力スペース\n\n    H, W = splitA(input())\n    BOARD=Board.input_board_with_wall(H,W,""-"",)\n    board = Board.create_board()\n    ...\n\n    # 処理スペース\n\n\n\n\n\n\n    ...\n\n\n\n# テストケース中枢処理\ndef case():\n    # TESTCASE = 1\n    TESTCASE = int(input()) # テストケース数の指定\n    for _ in range(TESTCASE):\n        try:\n            main()\n        except solvedException:\n            continue\n        # raise unSolvedExeption\n\n\n# インポート\nimport sys, itertools, math, heapq\nfrom collections import defaultdict, deque\nfrom sortedcontainers import SortedSet, SortedList, SortedDict  # CPython?\n\n# 定数・環境設定\nsys.setrecursionlimit(10**8)\nsys.set_int_max_str_digits(0)\ndict = defaultdict\nUPPER_ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""\nLOWER_ALPHABET=""abcdefghijklmnopqrstuvwxyz""\nMOD = 998244353\nMAX = 10**18\nLRUD = [(0, 1), (0, -1), (1, 0), (-1, 0)]\nLURULDRD = [(-1, -1), (-1, 1), (1, -1), (1, 1)]\n\n# 各種関数定義(超圧縮)\n## 便利関数\ndef printe(*values,sep="" "",end=""\n""):print(*values,sep=sep,end=end); fin()\ndef prin(stop=False,sep="" "",end=""\n"",file=sys.stdout):return (lambda*values:printe(*values,sep=sep,end=end)) if stop else (lambda*values:print(*values,sep=sep,end=end,file=file))\ndef yes(f=True): printe(""Yes"") if (f) else None\ndef no(f=True): printe(""No"") if (f) else None\ndef debug(*values,sep="" "",end=""\n""): print(*values,sep=sep,end=end,file=sys.stderr)\ndef printYN(f:bool): yes() if f else no()\ndef fin(f=True): raise solvedException if f else None\n## 分割関数\ndef split(value:str|list,sep:str="" "",func:callable=str) -> list:\n    result = []\n    if type(value) == list:\n        for i in range(len(value)):\n            result.append(split(value[i],sep))\n        return result\n    else:\n        if sep in value:\n            for i in value.split(sep):\n                result.append(func(i))\n        else:\n            result.append(func(value))\n        return result\n## 入力受け取り用\ndef input():return(sys.stdin.readline()).rstrip() #入力定数倍\ndef splitS(value:str|list,sep:str="" "")->str:return split(value,sep)[0] #文字列・分割して最初\ndef splitN(value:str|list,sep:str="" "")->int:return split(value,sep,int)[0] # 整数・分割して最初\ndef splitB(value:str|list,sep:str="" "")->list:return list(split(value,sep)) # 文字列・分割してすべて\ndef splitA(value:str|list,sep:str="" "")->list:return list(split(value,sep,int)) # 整数・分割してすべて\n\n# 例外クラス\nclass solvedException(Exception): pass # 処理打ち切り例外\nclass unSolvedExeption(Exception): # 回答未出力例外\n    def __init__(description = ""解答が出力されていません。""): super().__init__(description)\n\n# 実行\nif __name__ == ""__main__"":\n    case()\n",python,tab
1151,2046612,"dev/ABC424d.py",7409,0,"H",python,content
1152,2046902,"dev/ABC424d.py",7410,0,",",python,content
1153,2047152,"dev/ABC424d.py",7411,0,"W",python,content
1154,2047606,"dev/ABC424d.py",7412,0,",",python,content
1155,2048819,"dev/ABC424d.py",7413,0,"""""",python,content
1156,2052724,"dev/ABC424d.py",7414,1,"",python,content
1157,2052870,"dev/ABC424d.py",7413,1,"",python,content
1158,2052992,"dev/ABC424d.py",7413,0,"-",python,content
1159,2053061,"dev/ABC424d.py",7414,0,"1",python,content
1160,2053803,"dev/ABC424d.py",7416,0,"\n    ",python,content
1161,2057818,"dev/ABC424d.py",7417,4,"",python,content
1161,2057818,"dev/ABC424d.py",7417,4,"",python,content
1162,2057819,"dev/ABC424d.py",7414,1,"",python,content
1163,2058184,"dev/ABC424d.py",7414,0,"F",python,content
1164,2058482,"dev/ABC424d.py",7414,1,"",python,content
1165,2058619,"dev/ABC424d.py",7413,1,"",python,content
1166,2058862,"dev/ABC424d.py",7413,0,"F",python,content
1167,2059062,"dev/ABC424d.py",7414,0,"a",python,content
1168,2059112,"dev/ABC424d.py",7415,0,"l",python,content
1169,2059237,"dev/ABC424d.py",7416,0,"s",python,content
1170,2059377,"dev/ABC424d.py",7417,0,"e",python,content
1171,2063397,"dev/ABC424d.py",7382,0,"f",python,content
1172,2063513,"dev/ABC424d.py",7383,0,"a",python,content
1173,2063615,"dev/ABC424d.py",7384,0,"l",python,content
1174,2064026,"dev/ABC424d.py",7384,1,"",python,content
1175,2064185,"dev/ABC424d.py",7383,1,"",python,content
1176,2064342,"dev/ABC424d.py",7383,0,"l",python,content
1177,2064401,"dev/ABC424d.py",7384,0,"a",python,content
1178,2064553,"dev/ABC424d.py",7385,0,"g",python,content
1179,2065059,"dev/ABC424d.py",7386,0,"_",python,content
1180,2065980,"dev/ABC424d.py",7425,0,"    ",python,content
1181,2071252,"dev/ABC424d.py",7429,0,"f",python,content
1182,2071379,"dev/ABC424d.py",7430,0,"l",python,content
1183,2071501,"dev/ABC424d.py",7431,0,"a",python,content
1184,2072777,"dev/ABC424d.py",7429,3,"flag_board",python,content
1185,2073435,"dev/ABC424d.py",7439,0,".",python,content
1186,2074055,"dev/ABC424d.py",7440,0,"a",python,content
1187,2074242,"dev/ABC424d.py",7441,0,"d",python,content
1188,2074429,"dev/ABC424d.py",7442,0,"d",python,content
1189,2075034,"dev/ABC424d.py",7440,3,"",python,content
1190,2075579,"dev/ABC424d.py",7439,1,"",python,content
1191,2076273,"dev/ABC424d.py",7429,10,"",python,content
1192,2077038,"dev/ABC424d.py",7429,0,"f",python,content
1193,2077351,"dev/ABC424d.py",7430,0,"o",python,content
1194,2077487,"dev/ABC424d.py",7431,0,"r",python,content
1195,2077617,"dev/ABC424d.py",7432,0," ",python,content
1196,2081032,"dev/ABC424d.py",7429,4,"",python,content
1197,2085324,"dev/ABC424d.py",7429,0,"f",python,content
1198,2085381,"dev/ABC424d.py",7430,0,"o",python,content
1199,2085542,"dev/ABC424d.py",7431,0,"r",python,content
1200,2085650,"dev/ABC424d.py",7432,0," ",python,content
1201,2085733,"dev/ABC424d.py",7433,0,"i",python,content
1202,2085886,"dev/ABC424d.py",7434,0," ",python,content
1203,2085935,"dev/ABC424d.py",7435,0,"i",python,content
1204,2085988,"dev/ABC424d.py",7436,0,"n",python,content
1205,2086136,"dev/ABC424d.py",7437,0," ",python,content
1206,2086238,"dev/ABC424d.py",7438,0,"r",python,content
1207,2086434,"dev/ABC424d.py",7439,0,"a",python,content
1208,2086465,"dev/ABC424d.py",7440,0,"n",python,content
1209,2086636,"dev/ABC424d.py",7441,0,"g",python,content
1210,2086704,"dev/ABC424d.py",7442,0,"e",python,content
1211,2086934,"dev/ABC424d.py",7443,0,"()",python,content
1212,2087257,"dev/ABC424d.py",7444,0,"H",python,content
1213,2087865,"dev/ABC424d.py",7446,0,":",python,content
1214,2087928,"dev/ABC424d.py",7447,0,"\n        ",python,content
1215,2088155,"dev/ABC424d.py",7456,0,"f",python,content
1216,2088281,"dev/ABC424d.py",7457,0,"o",python,content
1217,2090013,"dev/ABC424d.py",7458,0,"r",python,content
1218,2090168,"dev/ABC424d.py",7459,0," ",python,content
1219,2090233,"dev/ABC424d.py",7460,0,"j",python,content
1220,2090394,"dev/ABC424d.py",7461,0," ",python,content
1221,2090444,"dev/ABC424d.py",7462,0,"i",python,content
1222,2090505,"dev/ABC424d.py",7463,0,"n",python,content
1223,2090588,"dev/ABC424d.py",7464,0," ",python,content
1224,2090728,"dev/ABC424d.py",7465,0,"r",python,content
1225,2090902,"dev/ABC424d.py",7466,0,"a",python,content
1226,2090952,"dev/ABC424d.py",7467,0,"n",python,content
1227,2091112,"dev/ABC424d.py",7468,0,"g",python,content
1228,2091144,"dev/ABC424d.py",7469,0,"e",python,content
1229,2091364,"dev/ABC424d.py",7470,0,"()",python,content
1230,2091529,"dev/ABC424d.py",7471,0,"W",python,content
1231,2092073,"dev/ABC424d.py",7473,0,":",python,content
1232,2092098,"dev/ABC424d.py",7474,0,"\n            ",python,content
1233,2093096,"dev/ABC424d.py",7487,0,"B",python,content
1234,2093208,"dev/ABC424d.py",7488,0,"O",python,content
1235,2093304,"dev/ABC424d.py",7489,0,"A",python,content
1236,2093417,"dev/ABC424d.py",7490,0,"R",python,content
1237,2093576,"dev/ABC424d.py",7491,0,"D",python,content
1238,2093796,"dev/ABC424d.py",7492,0,"[]",python,content
1239,2094050,"dev/ABC424d.py",7493,0,"i",python,content
1240,2094748,"dev/ABC424d.py",7495,0,"[]",python,content
1241,2095004,"dev/ABC424d.py",7496,0,"j",python,content
1242,2096434,"dev/ABC424d.py",7496,1,"",python,content
1243,2096588,"dev/ABC424d.py",7495,2,"",python,content
1244,2096741,"dev/ABC424d.py",7494,1,"",python,content
1245,2096896,"dev/ABC424d.py",7494,0,",",python,content
1246,2098017,"dev/ABC424d.py",7495,0,"j",python,content
1247,2098268,"dev/ABC424d.py",7496,0,"]",python,content
1248,2106756,"dev/ABC424d.py",7487,0,"i",python,content
1249,2106849,"dev/ABC424d.py",7488,0,"f",python,content
1250,2106958,"dev/ABC424d.py",7489,0," ",python,content
1251,2113091,"dev/ABC424d.py",7500,0," ",python,content
1252,2117144,"dev/ABC424d.py",7501,0,"=",python,content
1253,2117340,"dev/ABC424d.py",7502,0,"=",python,content
1254,2118169,"dev/ABC424d.py",7503,0," ",python,content
1255,2118480,"dev/ABC424d.py",7504,0,"""""",python,content
1256,2119627,"dev/ABC424d.py",7505,0,".",python,content
1257,2120240,"dev/ABC424d.py",7505,1,"",python,content
1258,2121234,"dev/ABC424d.py",7505,0,"#",python,content
1259,2122152,"dev/ABC424d.py",7507,0," ",python,content
1260,2124050,"dev/ABC424d.py",7508,0,"a",python,content
1261,2124166,"dev/ABC424d.py",7509,0,"n",python,content
1262,2124269,"dev/ABC424d.py",7510,0,"d",python,content
1263,2124557,"dev/ABC424d.py",7511,0," ",python,content
1264,2134960,"dev/ABC424d.py",7261,0,"p",python,content
1265,2135010,"dev/ABC424d.py",7262,0,"o",python,content
1266,2135112,"dev/ABC424d.py",7263,0,"s",python,content
1267,2137426,"dev/ABC424d.py",7266,0,"\n        ",python,content
1268,2137774,"dev/ABC424d.py",7275,0,"i",python,content
1269,2137846,"dev/ABC424d.py",7276,0,"f",python,content
1270,2137997,"dev/ABC424d.py",7277,0," ",python,content
1271,2138383,"dev/ABC424d.py",7278,0,"b",python,content
1272,2138426,"dev/ABC424d.py",7279,0,"o",python,content
1273,2138508,"dev/ABC424d.py",7280,0,"a",python,content
1274,2138827,"dev/ABC424d.py",7280,1,"",python,content
1275,2138983,"dev/ABC424d.py",7278,2,"",python,content
1276,2139630,"dev/ABC424d.py",7278,0,"B",python,content
1277,2139691,"dev/ABC424d.py",7279,0,"O",python,content
1278,2139742,"dev/ABC424d.py",7280,0,"A",python,content
1279,2139843,"dev/ABC424d.py",7281,0,"R",python,content
1280,2139985,"dev/ABC424d.py",7282,0,"D",python,content
1281,2140154,"dev/ABC424d.py",7283,0,"[]",python,content
1282,2141086,"dev/ABC424d.py",7284,0,"p",python,content
1283,2141138,"dev/ABC424d.py",7285,0,"o",python,content
1284,2141219,"dev/ABC424d.py",7286,0,"s",python,content
1285,2143901,"dev/ABC424d.py",7266,0,"\n        ",python,content
1286,2144224,"dev/ABC424d.py",7275,0,"p",python,content
1287,2144344,"dev/ABC424d.py",7276,0,"o",python,content
1288,2144411,"dev/ABC424d.py",7277,0,"s",python,content
1289,2145180,"dev/ABC424d.py",7275,0,"=",python,content
1290,2145945,"dev/ABC424d.py",7275,0,"i",python,content
1291,2146601,"dev/ABC424d.py",7276,0,",",python,content
1292,2146887,"dev/ABC424d.py",7277,0,"j",python,content
1293,2155965,"dev/ABC424d.py",7304,0," ",python,content
1294,2156148,"dev/ABC424d.py",7305,0,"a",python,content
1295,2156252,"dev/ABC424d.py",7306,0,"n",python,content
1296,2156354,"dev/ABC424d.py",7307,0,"d",python,content
1297,2162537,"dev/ABC424d.py",7308,0," ",python,content
1298,2163097,"dev/ABC424d.py",7309,0,"B",python,content
1299,2163203,"dev/ABC424d.py",7310,0,"O",python,content
1300,2163278,"dev/ABC424d.py",7311,0,"A",python,content
1301,2163368,"dev/ABC424d.py",7312,0,"R",python,content
1302,2163523,"dev/ABC424d.py",7313,0,"D",python,content
1303,2163737,"dev/ABC424d.py",7314,0,"[]",python,content
1304,2164221,"dev/ABC424d.py",7315,0,"i",python,content
1305,2164914,"dev/ABC424d.py",7316,0,".",python,content
1306,2165205,"dev/ABC424d.py",7316,1,"",python,content
1307,2165616,"dev/ABC424d.py",7316,0,"+",python,content
1308,2166707,"dev/ABC424d.py",7317,0,"1",python,content
1309,2167322,"dev/ABC424d.py",7318,0,",",python,content
1310,2167641,"dev/ABC424d.py",7319,0,"j",python,content
1311,2168887,"dev/ABC424d.py",7317,1,"",python,content
1312,2169028,"dev/ABC424d.py",7316,1,"",python,content
1313,2169788,"dev/ABC424d.py",7318,0,"+",python,content
1314,2169935,"dev/ABC424d.py",7319,0,"1",python,content
1315,2170294,"dev/ABC424d.py",7321,0," ",python,content
1316,2170487,"dev/ABC424d.py",7322,0,"a",python,content
1317,2170589,"dev/ABC424d.py",7323,0,"n",python,content
1318,2170891,"dev/ABC424d.py",7324,0," ",python,content
1319,2171306,"dev/ABC424d.py",7324,1,"",python,content
1320,2171545,"dev/ABC424d.py",7324,0,"d",python,content
1321,2171671,"dev/ABC424d.py",7325,0," ",python,content
1322,2172014,"dev/ABC424d.py",7326,0,"B",python,content
1323,2172052,"dev/ABC424d.py",7327,0,"O",python,content
1324,2172126,"dev/ABC424d.py",7328,0,"A",python,content
1325,2172226,"dev/ABC424d.py",7329,0,"R",python,content
1326,2172364,"dev/ABC424d.py",7330,0,"D",python,content
1327,2172530,"dev/ABC424d.py",7331,0,"[]",python,content
1328,2173921,"dev/ABC424d.py",7332,0,"i",python,content
1329,2174267,"dev/ABC424d.py",7333,0,"+",python,content
1330,2174423,"dev/ABC424d.py",7334,0,"1",python,content
1331,2174739,"dev/ABC424d.py",7335,0,",",python,content
1332,2174918,"dev/ABC424d.py",7336,0,"j",python,content
1333,2175675,"dev/ABC424d.py",7338,0," ",python,content
1334,2175849,"dev/ABC424d.py",7339,0,"a",python,content
1335,2175951,"dev/ABC424d.py",7340,0,"d",python,content
1336,2176052,"dev/ABC424d.py",7341,0,"n",python,content
1337,2176207,"dev/ABC424d.py",7342,0," ",python,content
1338,2176838,"dev/ABC424d.py",7342,1,"",python,content
1339,2176996,"dev/ABC424d.py",7341,1,"",python,content
1340,2177143,"dev/ABC424d.py",7340,1,"",python,content
1341,2177260,"dev/ABC424d.py",7339,1,"",python,content
1342,2177407,"dev/ABC424d.py",7339,0,"a",python,content
1343,2177506,"dev/ABC424d.py",7340,0,"n",python,content
1344,2177595,"dev/ABC424d.py",7341,0,"d",python,content
1345,2177839,"dev/ABC424d.py",7342,0,"()",python,content
1346,2178451,"dev/ABC424d.py",7342,2,"",python,content
1347,2178755,"dev/ABC424d.py",7342,0," ",python,content
1348,2179288,"dev/ABC424d.py",7343,0,"B",python,content
1349,2179324,"dev/ABC424d.py",7344,0,"O",python,content
1350,2179385,"dev/ABC424d.py",7345,0,"A",python,content
1351,2179703,"dev/ABC424d.py",7346,0,"D",python,content
1352,2180028,"dev/ABC424d.py",7343,4,"BOARD",python,content
1353,2180307,"dev/ABC424d.py",7348,0,"[]",python,content
1354,2180831,"dev/ABC424d.py",7349,0,"i",python,content
1355,2181154,"dev/ABC424d.py",7350,0,"+",python,content
1356,2181338,"dev/ABC424d.py",7351,0,"1",python,content
1357,2181878,"dev/ABC424d.py",7352,0,",",python,content
1358,2182331,"dev/ABC424d.py",7353,0,"j",python,content
1359,2182657,"dev/ABC424d.py",7354,0,"+",python,content
1360,2182831,"dev/ABC424d.py",7355,0,"1",python,content
1361,2185038,"dev/ABC424d.py",7291,2,"",python,content
1362,2185420,"dev/ABC424d.py",7291,0,"r",python,content
1363,2185604,"dev/ABC424d.py",7292,0,"e",python,content
1364,2185725,"dev/ABC424d.py",7293,0,"t",python,content
1365,2185807,"dev/ABC424d.py",7294,0,"u",python,content
1366,2185900,"dev/ABC424d.py",7295,0,"r",python,content
1367,2186043,"dev/ABC424d.py",7296,0,"n",python,content
1368,2186308,"dev/ABC424d.py",7297,0," ",python,content
1369,2195661,"dev/ABC424d.py",7256,4,"",python,content
1370,2195972,"dev/ABC424d.py",7256,0,"c",python,content
1371,2196053,"dev/ABC424d.py",7257,0,"o",python,content
1372,2196146,"dev/ABC424d.py",7258,0,"n",python,content
1373,2196200,"dev/ABC424d.py",7259,0,"f",python,content
1374,2196312,"dev/ABC424d.py",7260,0,"i",python,content
1375,2196749,"dev/ABC424d.py",7260,1,"",python,content
1376,2196896,"dev/ABC424d.py",7259,1,"",python,content
1377,2197000,"dev/ABC424d.py",7259,0,"d",python,content
1378,2197101,"dev/ABC424d.py",7260,0,"i",python,content
1379,2197298,"dev/ABC424d.py",7261,0,"t",python,content
1380,2197400,"dev/ABC424d.py",7262,0,"i",python,content
1381,2197405,"dev/ABC424d.py",7263,0,"o",python,content
1382,2197492,"dev/ABC424d.py",7264,0,"n",python,content
1383,2202546,"dev/ABC424d.py",7612,4,"",python,content
1384,2202753,"dev/ABC424d.py",7608,4,"",python,content
1385,2202893,"dev/ABC424d.py",7605,3,"",python,content
1386,2203033,"dev/ABC424d.py",7603,2,"",python,content
1387,2203200,"dev/ABC424d.py",7602,1,"",python,content
1388,2203371,"dev/ABC424d.py",7601,1,"",python,content
1389,2203571,"dev/ABC424d.py",7600,1,"",python,content
1390,2203787,"dev/ABC424d.py",7599,1,"",python,content
1391,2204016,"dev/ABC424d.py",7594,5,"",python,content
1392,2204310,"dev/ABC424d.py",7591,3,"",python,content
1393,2207053,"dev/ABC424d.py",7591,0,"d",python,content
1394,2207091,"dev/ABC424d.py",7592,0,"l",python,content
1395,2207260,"dev/ABC424d.py",7593,0,"a",python,content
1396,2207393,"dev/ABC424d.py",7594,0,"g",python,content
1397,2207748,"dev/ABC424d.py",7594,1,"",python,content
1398,2207904,"dev/ABC424d.py",7591,3,"",python,content
1399,2208081,"dev/ABC424d.py",7591,0,"f",python,content
1400,2208182,"dev/ABC424d.py",7592,0,"l",python,content
1401,2208315,"dev/ABC424d.py",7593,0,"a",python,content
1402,2208441,"dev/ABC424d.py",7594,0,"g",python,content
1403,2209112,"dev/ABC424d.py",7591,4,"flag_board",python,content
1404,2209867,"dev/ABC424d.py",7601,0,"[]",python,content
1405,2210310,"dev/ABC424d.py",7602,0,"i",python,content
1406,2210418,"dev/ABC424d.py",7603,0,",",python,content
1407,2210580,"dev/ABC424d.py",7604,0,"j",python,content
1408,2211058,"dev/ABC424d.py",7606,0," ",python,content
1409,2211248,"dev/ABC424d.py",7607,0,"=",python,content
1410,2211417,"dev/ABC424d.py",7608,0," ",python,content
1411,2213494,"dev/ABC424d.py",7609,0,"B",python,content
1412,2213614,"dev/ABC424d.py",7610,0,"O",python,content
1413,2213694,"dev/ABC424d.py",7611,0,"A",python,content
1414,2213820,"dev/ABC424d.py",7612,0,"R",python,content
1415,2214681,"dev/ABC424d.py",7613,0,"D",python,content
1416,2218480,"dev/ABC424d.py",7614,0,"[]",python,content
1417,2219215,"dev/ABC424d.py",7614,2,"",python,content
1418,2219384,"dev/ABC424d.py",7609,5,"",python,content
1419,2221786,"dev/ABC424d.py",7609,0,"c",python,content
1420,2221952,"dev/ABC424d.py",7610,0,"o",python,content
1421,2222196,"dev/ABC424d.py",7611,0,"n",python,content
1422,2222588,"dev/ABC424d.py",7612,0,"f",python,content
1423,2223092,"dev/ABC424d.py",7609,4,"ConnectionRefusedError",python,content
1424,2223589,"dev/ABC424d.py",7609,22,"",python,content
1425,2224024,"dev/ABC424d.py",7609,0,"c",python,content
1426,2224088,"dev/ABC424d.py",7610,0,"o",python,content
1427,2224175,"dev/ABC424d.py",7611,0,"n",python,content
1428,2224258,"dev/ABC424d.py",7612,0,"f",python,content
1429,2224651,"dev/ABC424d.py",7613,0,"t",python,content
1430,2224687,"dev/ABC424d.py",7614,0,"i",python,content
1431,2224780,"dev/ABC424d.py",7615,0,"o",python,content
1432,2224854,"dev/ABC424d.py",7616,0,"n",python,content
1433,2227233,"dev/ABC424d.py",7609,8,"",python,content
1434,2227954,"dev/ABC424d.py",7609,0,"c",python,content
1435,2228065,"dev/ABC424d.py",7610,0,"o",python,content
1436,2228132,"dev/ABC424d.py",7611,0,"n",python,content
1437,2228235,"dev/ABC424d.py",7612,0,"d",python,content
1438,2228352,"dev/ABC424d.py",7613,0,"i",python,content
1439,2228651,"dev/ABC424d.py",7614,0,"t",python,content
1440,2228695,"dev/ABC424d.py",7615,0,"i",python,content
1441,2228739,"dev/ABC424d.py",7616,0,"o",python,content
1442,2228824,"dev/ABC424d.py",7617,0,"n",python,content
1443,2229639,"dev/ABC424d.py",7618,0,"()",python,content
1444,2232395,"dev/ABC424d.py",7619,0,"p",python,content
1445,2232447,"dev/ABC424d.py",7620,0,"o",python,content
1446,2232548,"dev/ABC424d.py",7621,0,"s",python,content
1447,2233891,"dev/ABC424d.py",7619,3,"",python,content
1448,2234742,"dev/ABC424d.py",7619,0,"p",python,content
1449,2234861,"dev/ABC424d.py",7620,0,"o",python,content
1450,2235363,"dev/ABC424d.py",7621,0,"s",python,content
1451,2235528,"dev/ABC424d.py",7622,0,"[]",python,content
1452,2235714,"dev/ABC424d.py",7623,0,"0",python,content
1453,2236953,"dev/ABC424d.py",7623,1,"",python,content
1454,2237152,"dev/ABC424d.py",7622,1,"",python,content
1455,2237455,"dev/ABC424d.py",7619,3,"",python,content
1456,2238291,"dev/ABC424d.py",7619,1,"",python,content
1457,2241143,"dev/ABC424d.py",7619,0,"i",python,content
1458,2241296,"dev/ABC424d.py",7620,0,",",python,content
1459,2241412,"dev/ABC424d.py",7621,0,"j",python,content
1460,2242800,"dev/ABC424d.py",7622,0,")",python,content
1460,2242800,"dev/ABC424d.py",7622,0,")",python,content
1461,2242800,"dev/ABC424d.py",7619,0,"(",python,content
1462,2254389,"dev/ABC424d.py",7314,0," ",python,content
1463,2254556,"dev/ABC424d.py",7315,0,"=",python,content
1464,2254733,"dev/ABC424d.py",7316,0,"=",python,content
1465,2254971,"dev/ABC424d.py",7317,0," ",python,content
1466,2255413,"dev/ABC424d.py",7318,0,"""""",python,content
1467,2256980,"dev/ABC424d.py",7319,0,"=",python,content
1468,2257758,"dev/ABC424d.py",7319,1,"",python,content
1469,2261930,"dev/ABC424d.py",7319,0,"#",python,content
1470,2266264,"dev/ABC424d.py",7338,0,"== ""#""",python,content
1471,2268617,"dev/ABC424d.py",7361,0,"== ""#""",python,content
1472,2271139,"dev/ABC424d.py",7387,0,"== ""#""",python,content
1473,2271529,"dev/ABC424d.py",7387,6,"",python,content
1474,2272347,"dev/ABC424d.py",7386,0,"== ""#""",python,content
1475,2278347,"dev/ABC424d.py",7392,0,")",python,content
1475,2278347,"dev/ABC424d.py",7392,0,")",python,content
1476,2278348,"dev/ABC424d.py",7304,0,"(",python,content
1477,2279381,"dev/ABC424d.py",7304,0,"n",python,content
1478,2279484,"dev/ABC424d.py",7305,0,"o",python,content
1479,2279641,"dev/ABC424d.py",7306,0,"t",python,content
1480,2285330,"dev/ABC424d.py",7647,1,"k",python,content
1480,2285330,"dev/ABC424d.py",7647,1,"k",python,content
1480,2285330,"dev/ABC424d.py",7647,1,"k",python,content
1480,2285330,"dev/ABC424d.py",7647,1,"k",python,content
1480,2285330,"dev/ABC424d.py",7647,1,"k",python,content
1480,2285330,"dev/ABC424d.py",7647,1,"k",python,content
1481,2285330,"dev/ABC424d.py",7644,2,"s_",python,content
1482,2285330,"dev/ABC424d.py",7639,4,"",python,content
1484,2285330,"dev/ABC424d.py",7261,2,"s_",python,content
1483,2285330,"dev/ABC424d.py",7264,1,"k",python,content
1485,2285330,"dev/ABC424d.py",7256,4,"",python,content
1486,2300603,"dev/ABC424d.py",7639,0,"t_all_blac",python,content
1486,2300603,"dev/ABC424d.py",7639,0,"t_all_blac",python,content
1486,2300603,"dev/ABC424d.py",7639,0,"t_all_blac",python,content
1486,2300603,"dev/ABC424d.py",7639,0,"t_all_blac",python,content
1488,2300603,"dev/ABC424d.py",7260,0,"t_all_blac",python,content
1487,2300603,"dev/ABC424d.py",7638,0,"n",python,content
1489,2300603,"dev/ABC424d.py",7259,0,"n",python,content
1490,2305397,"dev/ABC424d.py",7405,12,"",python,content
1491,2315573,"dev/ABC424d.py",7662,4,"",python,content
1492,2385314,"dev/ABC424d.py",7511,151,"",python,content
1493,2386512,"dev/ABC424d.py",7506,0,"\n    ",python,content
1494,2386962,"dev/ABC424d.py",7511,0,"f",python,content
1495,2386983,"dev/ABC424d.py",7512,0,"o",python,content
1496,2387873,"dev/ABC424d.py",7512,1,"",python,content
1497,2388030,"dev/ABC424d.py",7511,1,"",python,content
1498,2389489,"dev/ABC424d.py",7504,1,"",python,content
1499,2390325,"dev/ABC424d.py",7505,0,"\n    ",python,content
1500,2390860,"dev/ABC424d.py",7510,0,"f",python,content
1501,2390908,"dev/ABC424d.py",7511,0,"o",python,content
1502,2391034,"dev/ABC424d.py",7512,0,"r",python,content
1503,2391164,"dev/ABC424d.py",7513,0," ",python,content
1504,2391265,"dev/ABC424d.py",7514,0,"i",python,content
1505,2391417,"dev/ABC424d.py",7515,0," ",python,content
1506,2391527,"dev/ABC424d.py",7516,0,"i",python,content
1507,2391597,"dev/ABC424d.py",7517,0,"n",python,content
1508,2391700,"dev/ABC424d.py",7518,0," ",python,content
1509,2391890,"dev/ABC424d.py",7519,0,"r",python,content
1510,2392193,"dev/ABC424d.py",7520,0,"a",python,content
1511,2392259,"dev/ABC424d.py",7521,0,"n",python,content
1512,2392373,"dev/ABC424d.py",7522,0,"g",python,content
1513,2392453,"dev/ABC424d.py",7523,0,"e",python,content
1514,2392641,"dev/ABC424d.py",7524,0,"()",python,content
1515,2392880,"dev/ABC424d.py",7525,0,"H",python,content
1516,2393258,"dev/ABC424d.py",7527,0,":",python,content
1517,2393305,"dev/ABC424d.py",7528,0,"\n        ",python,content
1518,2393802,"dev/ABC424d.py",7537,0,"f",python,content
1519,2393866,"dev/ABC424d.py",7538,0,"o",python,content
1520,2393953,"dev/ABC424d.py",7539,0,"r",python,content
1521,2394060,"dev/ABC424d.py",7540,0," ",python,content
1522,2394184,"dev/ABC424d.py",7541,0,"j",python,content
1523,2394294,"dev/ABC424d.py",7542,0," ",python,content
1524,2394396,"dev/ABC424d.py",7543,0,"i",python,content
1525,2394445,"dev/ABC424d.py",7544,0,"n",python,content
1526,2394502,"dev/ABC424d.py",7545,0," ",python,content
1527,2394644,"dev/ABC424d.py",7546,0,"r",python,content
1528,2394803,"dev/ABC424d.py",7547,0,"a",python,content
1529,2394837,"dev/ABC424d.py",7548,0,"n",python,content
1530,2395001,"dev/ABC424d.py",7549,0,"g",python,content
1531,2395237,"dev/ABC424d.py",7550,0,"E",python,content
1532,2397051,"dev/ABC424d.py",7551,0,"()",python,content
1533,2397447,"dev/ABC424d.py",7551,2,"",python,content
1534,2397627,"dev/ABC424d.py",7550,1,"",python,content
1535,2397733,"dev/ABC424d.py",7550,0,"e",python,content
1536,2397958,"dev/ABC424d.py",7551,0,"()",python,content
1537,2398147,"dev/ABC424d.py",7552,0,"W",python,content
1538,2398673,"dev/ABC424d.py",7554,0,"\n        ",python,content
1539,2398688,"dev/ABC424d.py",7563,0,":",python,content
1540,2399610,"dev/ABC424d.py",7563,1,"",python,content
1541,2399791,"dev/ABC424d.py",7555,8,"",python,content
1542,2399983,"dev/ABC424d.py",7554,1,"",python,content
1543,2400198,"dev/ABC424d.py",7554,0,":",python,content
1544,2400236,"dev/ABC424d.py",7555,0,"\n            ",python,content
1545,2404571,"dev/ABC424d.py",7568,0,"B",python,content
1546,2404651,"dev/ABC424d.py",7569,0,"O",python,content
1547,2404715,"dev/ABC424d.py",7570,0,"A",python,content
1548,2404817,"dev/ABC424d.py",7571,0,"R",python,content
1549,2405010,"dev/ABC424d.py",7572,0,"D",python,content
1550,2405342,"dev/ABC424d.py",7568,5,"",python,content
1551,2406160,"dev/ABC424d.py",7568,0,"B",python,content
1552,2406262,"dev/ABC424d.py",7569,0,"O",python,content
1553,2406300,"dev/ABC424d.py",7570,0,"A",python,content
1554,2406421,"dev/ABC424d.py",7571,0,"R",python,content
1555,2406571,"dev/ABC424d.py",7572,0,"D",python,content
1556,2406815,"dev/ABC424d.py",7573,0,"[]",python,content
1557,2407347,"dev/ABC424d.py",7574,0,"i",python,content
1558,2407448,"dev/ABC424d.py",7575,0,",",python,content
1559,2407561,"dev/ABC424d.py",7576,0,"j",python,content
1560,2408709,"dev/ABC424d.py",7578,0,"=",python,content
1561,2408903,"dev/ABC424d.py",7579,0,"=",python,content
1562,2409008,"dev/ABC424d.py",7580,0,"""""",python,content
1563,2409831,"dev/ABC424d.py",7581,0,"#",python,content
1564,2416933,"dev/ABC424d.py",7581,1,"",python,content
1565,2417292,"dev/ABC424d.py",7581,0,".",python,content
1566,2427519,"dev/ABC424d.py",7510,0,"\n    ",python,content
1567,2428003,"dev/ABC424d.py",7510,0,"l",python,content
1568,2428503,"dev/ABC424d.py",7510,1,"",python,content
1569,2428762,"dev/ABC424d.py",7510,0,"f",python,content
1570,2428872,"dev/ABC424d.py",7511,0,"l",python,content
1571,2428993,"dev/ABC424d.py",7512,0,"a",python,content
1572,2429104,"dev/ABC424d.py",7513,0,"g",python,content
1573,2431365,"dev/ABC424d.py",7514,0," ",python,content
1574,2431528,"dev/ABC424d.py",7515,0,"=",python,content
1575,2431669,"dev/ABC424d.py",7516,0," ",python,content
1576,2432991,"dev/ABC424d.py",7517,0,"B",python,content
1577,2433090,"dev/ABC424d.py",7518,0,"O",python,content
1578,2433163,"dev/ABC424d.py",7519,0,"A",python,content
1579,2433265,"dev/ABC424d.py",7520,0,"R",python,content
1580,2433414,"dev/ABC424d.py",7521,0,"D",python,content
1581,2434404,"dev/ABC424d.py",7522,0,".",python,content
1582,2435052,"dev/ABC424d.py",7522,1,"",python,content
1583,2435513,"dev/ABC424d.py",7517,5,"",python,content
1584,2435860,"dev/ABC424d.py",7517,0,"o",python,content
1585,2436227,"dev/ABC424d.py",7517,1,"",python,content
1586,2436630,"dev/ABC424d.py",7517,0,"B",python,content
1587,2436906,"dev/ABC424d.py",7518,0,"o",python,content
1588,2437027,"dev/ABC424d.py",7519,0,"a",python,content
1589,2437129,"dev/ABC424d.py",7520,0,"r",python,content
1590,2437272,"dev/ABC424d.py",7521,0,"d",python,content
1591,2437489,"dev/ABC424d.py",7522,0,".",python,content
1592,2439658,"dev/ABC424d.py",7523,0,"i",python,content
1593,2439797,"dev/ABC424d.py",7524,0,"n",python,content
1594,2439854,"dev/ABC424d.py",7525,0,"p",python,content
1595,2440020,"dev/ABC424d.py",7526,0,"u",python,content
1596,2441810,"dev/ABC424d.py",7523,4,"input_board_with_wall",python,content
1597,2442800,"dev/ABC424d.py",7544,0,"()",python,content
1598,2443389,"dev/ABC424d.py",7545,0,"H",python,content
1599,2444290,"dev/ABC424d.py",7546,0,",",python,content
1600,2444591,"dev/ABC424d.py",7547,0,"W",python,content
1601,2444933,"dev/ABC424d.py",7548,0,",",python,content
1602,2447511,"dev/ABC424d.py",7548,1,"",python,content
1603,2447693,"dev/ABC424d.py",7547,1,"",python,content
1604,2447841,"dev/ABC424d.py",7546,1,"",python,content
1605,2447993,"dev/ABC424d.py",7545,1,"",python,content
1606,2448141,"dev/ABC424d.py",7544,2,"",python,content
1607,2448254,"dev/ABC424d.py",7523,21,"",python,content
1608,2449495,"dev/ABC424d.py",7523,0,"c",python,content
1609,2449814,"dev/ABC424d.py",7523,1,"",python,content
1610,2450398,"dev/ABC424d.py",7523,0,"c",python,content
1611,2450609,"dev/ABC424d.py",7524,0,"r",python,content
1612,2450651,"dev/ABC424d.py",7525,0,"e",python,content
1613,2450864,"dev/ABC424d.py",7526,0,"a",python,content
1614,2451120,"dev/ABC424d.py",7527,0,"t",python,content
1615,2451697,"dev/ABC424d.py",7523,5,"create_board",python,content
1616,2452200,"dev/ABC424d.py",7535,0,"()",python,content
1617,2457138,"dev/ABC424d.py",7536,0,"H",python,content
1618,2457427,"dev/ABC424d.py",7537,0,",",python,content
1619,2457707,"dev/ABC424d.py",7538,0,"W",python,content
1620,2457969,"dev/ABC424d.py",7539,0,",",python,content
1621,2459075,"dev/ABC424d.py",7540,0,"""""",python,content
1622,2462582,"dev/ABC424d.py",7540,2,"",python,content
1623,2463055,"dev/ABC424d.py",7540,0,"F",python,content
1624,2463296,"dev/ABC424d.py",7541,0,"a",python,content
1625,2463347,"dev/ABC424d.py",7542,0,"l",python,content
1626,2463459,"dev/ABC424d.py",7543,0,"s",python,content
1627,2465158,"dev/ABC424d.py",7544,0,"e",python,content
1628,2473896,"dev/ABC424d.py",7609,0,"i",python,content
1629,2474051,"dev/ABC424d.py",7610,0,"f",python,content
1630,2474132,"dev/ABC424d.py",7611,0," ",python,content
1631,2476699,"dev/ABC424d.py",7627,0,":",python,content
1632,2476754,"dev/ABC424d.py",7628,0,"\n                ",python,content
1633,2477987,"dev/ABC424d.py",7645,0,"f",python,content
1634,2478059,"dev/ABC424d.py",7646,0,"l",python,content
1635,2478223,"dev/ABC424d.py",7647,0,"a",python,content
1636,2478552,"dev/ABC424d.py",7645,3,"flag",python,content
1637,2478775,"dev/ABC424d.py",7649,0,"[]",python,content
1638,2481080,"dev/ABC424d.py",7650,0,"i",python,content
1639,2481304,"dev/ABC424d.py",7651,0,".",python,content
1640,2481447,"dev/ABC424d.py",7652,0,"j",python,content
1641,2482199,"dev/ABC424d.py",7652,1,"",python,content
1642,2482390,"dev/ABC424d.py",7651,1,"",python,content
1643,2482591,"dev/ABC424d.py",7651,0,",",python,content
1644,2482739,"dev/ABC424d.py",7652,0,"j",python,content
1645,2487264,"dev/ABC424d.py",7653,1,"",python,content
1646,2487443,"dev/ABC424d.py",7652,1,"",python,content
1647,2487600,"dev/ABC424d.py",7651,1,"",python,content
1648,2487747,"dev/ABC424d.py",7650,1,"",python,content
1649,2487919,"dev/ABC424d.py",7649,1,"",python,content
1650,2488115,"dev/ABC424d.py",7645,4,"",python,content
1651,2488599,"dev/ABC424d.py",7645,0,"f",python,content
1652,2488730,"dev/ABC424d.py",7646,0,"o",python,content
1653,2488831,"dev/ABC424d.py",7647,0,"r",python,content
1654,2488953,"dev/ABC424d.py",7648,0," ",python,content
1655,2489096,"dev/ABC424d.py",7649,0,"i",python,content
1656,2489242,"dev/ABC424d.py",7650,0," ",python,content
1657,2489343,"dev/ABC424d.py",7651,0,"i",python,content
1658,2489399,"dev/ABC424d.py",7652,0,"n",python,content
1659,2489551,"dev/ABC424d.py",7653,0," ",python,content
1660,2489684,"dev/ABC424d.py",7654,0,"r",python,content
1661,2489862,"dev/ABC424d.py",7655,0,"a",python,content
1662,2489915,"dev/ABC424d.py",7656,0,"n",python,content
1663,2490051,"dev/ABC424d.py",7657,0,"g",python,content
1664,2490102,"dev/ABC424d.py",7658,0,"e",python,content
1665,2490384,"dev/ABC424d.py",7659,0,"()",python,content
1666,2491021,"dev/ABC424d.py",7660,0,"f",python,content
1667,2491123,"dev/ABC424d.py",7661,0,"l",python,content
1668,2491225,"dev/ABC424d.py",7662,0,"a",python,content
1669,2491342,"dev/ABC424d.py",7663,0,"g",python,content
1670,2492696,"dev/ABC424d.py",7660,4,"",python,content
1671,2503333,"dev/ABC424d.py",7659,2,"",python,content
1672,2503503,"dev/ABC424d.py",7654,5,"",python,content
1673,2504271,"dev/ABC424d.py",7654,0,"L",python,content
1674,2504725,"dev/ABC424d.py",7654,1,"",python,content
1675,2504938,"dev/ABC424d.py",7651,3,"",python,content
1676,2505164,"dev/ABC424d.py",7649,2,"",python,content
1677,2505369,"dev/ABC424d.py",7645,4,"",python,content
1678,2506422,"dev/ABC424d.py",7645,0,"f",python,content
1679,2506468,"dev/ABC424d.py",7646,0,"o",python,content
1680,2506595,"dev/ABC424d.py",7647,0,"r",python,content
1681,2506695,"dev/ABC424d.py",7648,0," ",python,content
1682,2506753,"dev/ABC424d.py",7649,0,"k",python,content
1683,2506869,"dev/ABC424d.py",7650,0," ",python,content
1684,2506930,"dev/ABC424d.py",7651,0,"i",python,content
1685,2507023,"dev/ABC424d.py",7652,0,"n",python,content
1686,2507120,"dev/ABC424d.py",7653,0," ",python,content
1687,2507437,"dev/ABC424d.py",7654,0,"L",python,content
1688,2507788,"dev/ABC424d.py",7655,0,"R",python,content
1689,2508014,"dev/ABC424d.py",7656,0,"U",python,content
1690,2508170,"dev/ABC424d.py",7657,0,"D",python,content
1691,2512635,"dev/ABC424d.py",7654,4,"",python,content
1692,2513518,"dev/ABC424d.py",7654,0,"L",python,content
1693,2514024,"dev/ABC424d.py",7655,0,"R",python,content
1694,2514351,"dev/ABC424d.py",7654,2,"LRUD",python,content
1695,2514824,"dev/ABC424d.py",7658,0,"+",python,content
1696,2515220,"dev/ABC424d.py",7659,0,"L",python,content
1697,2515678,"dev/ABC424d.py",7660,0,"U",python,content
1698,2516343,"dev/ABC424d.py",7659,2,"LURULDRD",python,content
1699,2516924,"dev/ABC424d.py",7667,0,":",python,content
1700,2516974,"dev/ABC424d.py",7668,0,"\n                    ",python,content
1701,2528657,"dev/ABC424d.py",7669,20,"",python,content
1701,2528657,"dev/ABC424d.py",7669,20,"",python,content
1702,2528657,"dev/ABC424d.py",7650,0,",",python,content
1703,2528794,"dev/ABC424d.py",7651,0,"l",python,content
1704,2529937,"dev/ABC424d.py",7671,0,"                    ",python,content
1705,2533939,"dev/ABC424d.py",7691,0,"B",python,content
1706,2533994,"dev/ABC424d.py",7692,0,"O",python,content
1707,2534051,"dev/ABC424d.py",7693,0,"A",python,content
1708,2534125,"dev/ABC424d.py",7694,0,"R",python,content
1709,2534280,"dev/ABC424d.py",7695,0,"D",python,content
1710,2536372,"dev/ABC424d.py",7696,0,"[]",python,content
1711,2536905,"dev/ABC424d.py",7697,0,"i",python,content
1712,2537275,"dev/ABC424d.py",7698,0,"+",python,content
1713,2537620,"dev/ABC424d.py",7699,0,"k",python,content
1714,2539091,"dev/ABC424d.py",7701,0,"[]",python,content
1715,2541099,"dev/ABC424d.py",7702,0,"l",python,content
1716,2541473,"dev/ABC424d.py",7703,0,"+",python,content
1717,2541963,"dev/ABC424d.py",7704,0,"l",python,content
1718,2575604,"dev/ABC424d.py",7702,1,"",python,content
1719,2577658,"dev/ABC424d.py",7702,0,"j",python,content
1720,2589871,"dev/ABC424d.py",7691,5,"",python,content
1721,2590305,"dev/ABC424d.py",7691,0,"l",python,content
1722,2590640,"dev/ABC424d.py",7691,1,"",python,content
1723,2590902,"dev/ABC424d.py",7691,0,"f",python,content
1724,2590983,"dev/ABC424d.py",7692,0,"l",python,content
1725,2591079,"dev/ABC424d.py",7693,0,"a",python,content
1726,2591193,"dev/ABC424d.py",7694,0,"g",python,content
1727,2592873,"dev/ABC424d.py",7705,0," ",python,content
1728,2593049,"dev/ABC424d.py",7706,0,"=",python,content
1729,2593271,"dev/ABC424d.py",7707,0," ",python,content
1730,2593649,"dev/ABC424d.py",7708,0,"T",python,content
1731,2593875,"dev/ABC424d.py",7709,0,"r",python,content
1732,2593949,"dev/ABC424d.py",7710,0,"u",python,content
1733,2594177,"dev/ABC424d.py",7711,0,"e",python,content
1734,2602699,"dev/ABC424d.py",7717,0,"o",python,content
1735,2603024,"dev/ABC424d.py",7717,1,"",python,content
1736,2603778,"dev/ABC424d.py",7717,0,"f",python,content
1737,2603839,"dev/ABC424d.py",7718,0,"o",python,content
1738,2603963,"dev/ABC424d.py",7719,0,"r",python,content
1739,2604122,"dev/ABC424d.py",7720,0," ",python,content
1740,2604411,"dev/ABC424d.py",7721,0,"i",python,content
1741,2604601,"dev/ABC424d.py",7722,0," ",python,content
1742,2604760,"dev/ABC424d.py",7723,0,"i",python,content
1743,2604831,"dev/ABC424d.py",7724,0,"n",python,content
1744,2604949,"dev/ABC424d.py",7725,0," ",python,content
1745,2605164,"dev/ABC424d.py",7726,0,"r",python,content
1746,2605317,"dev/ABC424d.py",7727,0,"a",python,content
1747,2605372,"dev/ABC424d.py",7728,0,"n",python,content
1748,2605517,"dev/ABC424d.py",7729,0,"g",python,content
1749,2605612,"dev/ABC424d.py",7730,0,"e",python,content
1750,2605919,"dev/ABC424d.py",7731,0,"()",python,content
1751,2606209,"dev/ABC424d.py",7732,0,"H",python,content
1752,2606686,"dev/ABC424d.py",7734,0,":",python,content
1753,2606720,"dev/ABC424d.py",7735,0,"\n        ",python,content
1754,2606972,"dev/ABC424d.py",7744,0,"f",python,content
1755,2607117,"dev/ABC424d.py",7745,0,"o",python,content
1756,2607190,"dev/ABC424d.py",7746,0,"r",python,content
1757,2607321,"dev/ABC424d.py",7747,0," ",python,content
1758,2607427,"dev/ABC424d.py",7748,0,"j",python,content
1759,2607540,"dev/ABC424d.py",7749,0," ",python,content
1760,2607619,"dev/ABC424d.py",7750,0,"i",python,content
1761,2607675,"dev/ABC424d.py",7751,0,"n",python,content
1762,2607811,"dev/ABC424d.py",7752,0," ",python,content
1763,2607905,"dev/ABC424d.py",7753,0,"r",python,content
1764,2608064,"dev/ABC424d.py",7754,0,"a",python,content
1765,2608113,"dev/ABC424d.py",7755,0,"n",python,content
1766,2608268,"dev/ABC424d.py",7756,0,"g",python,content
1767,2608316,"dev/ABC424d.py",7757,0,"e",python,content
1768,2608568,"dev/ABC424d.py",7758,0,"()",python,content
1769,2608891,"dev/ABC424d.py",7759,0,"W",python,content
1770,2609304,"dev/ABC424d.py",7761,0,":",python,content
1771,2609338,"dev/ABC424d.py",7762,0,"\n            ",python,content
1772,2610083,"dev/ABC424d.py",7775,0,"f",python,content
1773,2610194,"dev/ABC424d.py",7776,0,"l",python,content
1774,2610343,"dev/ABC424d.py",7777,0,"a",python,content
1775,2610564,"dev/ABC424d.py",7778,0,"g",python,content
1776,2610814,"dev/ABC424d.py",7775,4,"flag",python,content
1777,2614383,"dev/ABC424d.py",7699,2,",",python,content
1778,2615953,"dev/ABC424d.py",7778,0,"[]",python,content
1779,2617524,"dev/ABC424d.py",7779,0,"i",python,content
1780,2617627,"dev/ABC424d.py",7780,0,",",python,content
1781,2617908,"dev/ABC424d.py",7781,0,"j",python,content
1782,2692380,"dev/ABC424d.py",7774,0,"i",python,content
1783,2692483,"dev/ABC424d.py",7775,0,"f",python,content
1784,2692563,"dev/ABC424d.py",7776,0," ",python,content
1785,2694189,"dev/ABC424d.py",7786,0," ",python,content
1786,2694519,"dev/ABC424d.py",7787,0,"=",python,content
1787,2694729,"dev/ABC424d.py",7788,0,"=",python,content
1788,2694911,"dev/ABC424d.py",7789,0," ",python,content
1789,2695439,"dev/ABC424d.py",7790,0,"f",python,content
1790,2695609,"dev/ABC424d.py",7791,0,"a",python,content
1791,2695710,"dev/ABC424d.py",7792,0,"l",python,content
1792,2695838,"dev/ABC424d.py",7793,0,"s",python,content
1793,2695966,"dev/ABC424d.py",7794,0,"e",python,content
1794,2696600,"dev/ABC424d.py",7790,5,"False",python,content
1795,2698961,"dev/ABC424d.py",7795,0,":",python,content
1796,2699013,"dev/ABC424d.py",7796,0,"\n                ",python,content
1797,2708968,"dev/ABC424d.py",7797,16,"",python,content
1797,2708968,"dev/ABC424d.py",7797,16,"",python,content
1798,2708969,"dev/ABC424d.py",7716,0,"\n    ",python,content
1799,2709970,"dev/ABC424d.py",7716,0,"c",python,content
1800,2710087,"dev/ABC424d.py",7717,0,"a",python,content
1801,2710182,"dev/ABC424d.py",7718,0,"n",python,content
1802,2710283,"dev/ABC424d.py",7719,0,"d",python,content
1803,2710382,"dev/ABC424d.py",7720,0,"i",python,content
1804,2710464,"dev/ABC424d.py",7721,0,"d",python,content
1805,2710566,"dev/ABC424d.py",7722,0,"a",python,content
1806,2710648,"dev/ABC424d.py",7723,0,"t",python,content
1807,2710783,"dev/ABC424d.py",7724,0,"e",python,content
1808,2710948,"dev/ABC424d.py",7725,0," ",python,content
1809,2711057,"dev/ABC424d.py",7726,0,"-",python,content
1810,2711224,"dev/ABC424d.py",7727,0," ",python,content
1811,2711286,"dev/ABC424d.py",7728,0,"[]",python,content
1812,2711778,"dev/ABC424d.py",7728,2,"",python,content
1813,2711945,"dev/ABC424d.py",7727,1,"",python,content
1814,2712082,"dev/ABC424d.py",7726,1,"",python,content
1815,2712372,"dev/ABC424d.py",7726,0,"=",python,content
1816,2712482,"dev/ABC424d.py",7727,0," ",python,content
1817,2712583,"dev/ABC424d.py",7728,0,"[]",python,content
1818,2713648,"dev/ABC424d.py",7816,0,"                ",python,content
1819,2713953,"dev/ABC424d.py",7832,0,"c",python,content
1820,2714124,"dev/ABC424d.py",7833,0,"a",python,content
1821,2714202,"dev/ABC424d.py",7834,0,"n",python,content
1822,2714304,"dev/ABC424d.py",7835,0,"c",python,content
1823,2714673,"dev/ABC424d.py",7835,1,"",python,content
1824,2714845,"dev/ABC424d.py",7834,1,"",python,content
1825,2715084,"dev/ABC424d.py",7834,0,"d",python,content
1826,2715486,"dev/ABC424d.py",7834,1,"",python,content
1827,2715728,"dev/ABC424d.py",7834,0,"n",python,content
1828,2715784,"dev/ABC424d.py",7835,0,"d",python,content
1829,2716033,"dev/ABC424d.py",7832,4,"candidate",python,content
1830,2716252,"dev/ABC424d.py",7841,0,".",python,content
1831,2716363,"dev/ABC424d.py",7842,0,"a",python,content
1832,2716472,"dev/ABC424d.py",7843,0,"p",python,content
1833,2716610,"dev/ABC424d.py",7844,0,"p",python,content
1834,2716711,"dev/ABC424d.py",7845,0,"e",python,content
1835,2716821,"dev/ABC424d.py",7846,0,"n",python,content
1836,2716972,"dev/ABC424d.py",7847,0,"d",python,content
1837,2717232,"dev/ABC424d.py",7848,0,"()",python,content
1838,2717728,"dev/ABC424d.py",7849,0,",",python,content
1839,2717828,"dev/ABC424d.py",7850,0,"j",python,content
1840,2718392,"dev/ABC424d.py",7850,1,"",python,content
1841,2718544,"dev/ABC424d.py",7849,1,"",python,content
1842,2718698,"dev/ABC424d.py",7848,2,"",python,content
1843,2719381,"dev/ABC424d.py",7848,0,"()",python,content
1844,2719645,"dev/ABC424d.py",7849,0,"i",python,content
1845,2719662,"dev/ABC424d.py",7850,0,"u",python,content
1846,2719757,"dev/ABC424d.py",7851,0,",",python,content
1847,2720136,"dev/ABC424d.py",7851,1,"",python,content
1848,2720294,"dev/ABC424d.py",7850,1,"",python,content
1849,2720795,"dev/ABC424d.py",7850,0,",",python,content
1850,2720892,"dev/ABC424d.py",7851,0,"j",python,content
1851,2723243,"dev/ABC424d.py",7852,0,")",python,content
1851,2723243,"dev/ABC424d.py",7852,0,")",python,content
1852,2723243,"dev/ABC424d.py",7849,0,"(",python,content
1853,2740543,"dev/ABC424d.py",7505,0,"\n    ",python,content
1854,2741082,"dev/ABC424d.py",7506,4,"",python,content
1855,2741334,"dev/ABC424d.py",7505,1,"",python,content
1856,2742050,"dev/ABC424d.py",7546,0,"\n    ",python,content
1857,2742249,"dev/ABC424d.py",7551,0,"c",python,content
1858,2742367,"dev/ABC424d.py",7552,0,"o",python,content
1859,2742432,"dev/ABC424d.py",7553,0,"u",python,content
1860,2742507,"dev/ABC424d.py",7554,0,"n",python,content
1861,2742545,"dev/ABC424d.py",7555,0,"t",python,content
1862,2742726,"dev/ABC424d.py",7556,0," ",python,content
1863,2742808,"dev/ABC424d.py",7557,0,"=",python,content
1864,2742958,"dev/ABC424d.py",7558,0," ",python,content
1865,2743081,"dev/ABC424d.py",7559,0,"0",python,content
1866,2757538,"dev/ABC424d.py",7547,14,"",python,content
1867,2778285,"dev/ABC424d.py",7855,0,"\n                ",python,content
1868,2778468,"dev/ABC424d.py",7868,4,"",python,content
1869,2778724,"dev/ABC424d.py",7868,0,"e",python,content
1870,2779095,"dev/ABC424d.py",7869,0,"l",python,content
1871,2779260,"dev/ABC424d.py",7870,0,"s",python,content
1872,2779683,"dev/ABC424d.py",7871,0,"s",python,content
1873,2780022,"dev/ABC424d.py",7871,1,"",python,content
1874,2780224,"dev/ABC424d.py",7871,0,"e",python,content
1875,2780824,"dev/ABC424d.py",7872,0,":",python,content
1876,2780872,"dev/ABC424d.py",7873,0,"\n                ",python,content
1877,2781567,"dev/ABC424d.py",7890,0,"c",python,content
1878,2781624,"dev/ABC424d.py",7891,0,"o",python,content
1879,2781692,"dev/ABC424d.py",7892,0,"u",python,content
1880,2781767,"dev/ABC424d.py",7893,0,"n",python,content
1881,2781868,"dev/ABC424d.py",7894,0,"t",python,content
1882,2782036,"dev/ABC424d.py",7895,0,"+",python,content
1883,2782136,"dev/ABC424d.py",7896,0,"=",python,content
1884,2782239,"dev/ABC424d.py",7897,0,"1",python,content
1885,2789546,"dev/ABC424d.py",7730,0,"\n    ",python,content
1886,2789724,"dev/ABC424d.py",7735,0,"c",python,content
1887,2789851,"dev/ABC424d.py",7736,0,"o",python,content
1888,2789924,"dev/ABC424d.py",7737,0,"u",python,content
1889,2790011,"dev/ABC424d.py",7738,0,"n",python,content
1890,2790027,"dev/ABC424d.py",7739,0,"t",python,content
1891,2790244,"dev/ABC424d.py",7740,0," ",python,content
1892,2790370,"dev/ABC424d.py",7741,0,"=",python,content
1893,2790602,"dev/ABC424d.py",7742,0," ",python,content
1894,2790893,"dev/ABC424d.py",7743,0,"0",python,content
1895,2808176,"dev/ABC424d.py",7912,0,"\n                ",python,content
1896,2808444,"dev/ABC424d.py",7925,4,"",python,content
1897,2808647,"dev/ABC424d.py",7921,4,"",python,content
1898,2808846,"dev/ABC424d.py",7917,4,"",python,content
1899,2812078,"dev/ABC424d.py",7917,0,"w",python,content
1900,2812150,"dev/ABC424d.py",7918,0,"h",python,content
1901,2812223,"dev/ABC424d.py",7919,0,"i",python,content
1902,2812299,"dev/ABC424d.py",7920,0,"l",python,content
1903,2812371,"dev/ABC424d.py",7921,0,"e",python,content
1904,2812528,"dev/ABC424d.py",7922,0," ",python,content
1905,2813202,"dev/ABC424d.py",7923,0,"c",python,content
1906,2813251,"dev/ABC424d.py",7924,0,"o",python,content
1907,2813326,"dev/ABC424d.py",7925,0,"u",python,content
1908,2813395,"dev/ABC424d.py",7926,0,"n",python,content
1909,2813488,"dev/ABC424d.py",7927,0,"t",python,content
1910,2813700,"dev/ABC424d.py",7928,0," ",python,content
1911,2814010,"dev/ABC424d.py",7929,0,"<",python,content
1912,2814502,"dev/ABC424d.py",7930,0,"=",python,content
1913,2815638,"dev/ABC424d.py",7931,0," ",python,content
1914,2816139,"dev/ABC424d.py",7932,0,"H",python,content
1915,2816436,"dev/ABC424d.py",7933,0,"*",python,content
1916,2816603,"dev/ABC424d.py",7934,0,"W",python,content
1917,2817765,"dev/ABC424d.py",7935,0,":",python,content
1918,2817817,"dev/ABC424d.py",7936,0,"\n        ",python,content
1919,2845415,"dev/ABC424d.py",7945,0,"i",python,content
1920,2845547,"dev/ABC424d.py",7946,0,"f",python,content
1921,2845683,"dev/ABC424d.py",7947,0," ",python,content
1922,2845860,"dev/ABC424d.py",7948,0,"f",python,content
1923,2845884,"dev/ABC424d.py",7949,0,"l",python,content
1924,2846089,"dev/ABC424d.py",7950,0,"a",python,content
1925,2846454,"dev/ABC424d.py",7948,3,"flag",python,content
1926,2846851,"dev/ABC424d.py",7952,0,"[]",python,content
1927,2847242,"dev/ABC424d.py",7953,0,"i",python,content
1928,2847328,"dev/ABC424d.py",7954,0,",",python,content
1929,2847431,"dev/ABC424d.py",7955,0,"j",python,content
1930,2850860,"dev/ABC424d.py",7956,1,"",python,content
1931,2851033,"dev/ABC424d.py",7955,1,"",python,content
1932,2851175,"dev/ABC424d.py",7954,1,"",python,content
1933,2851338,"dev/ABC424d.py",7953,1,"",python,content
1934,2851486,"dev/ABC424d.py",7952,1,"",python,content
1935,2851609,"dev/ABC424d.py",7948,4,"",python,content
1936,2851794,"dev/ABC424d.py",7945,3,"",python,content
1937,2859848,"dev/ABC424d.py",7923,5,"",python,content
1938,2860045,"dev/ABC424d.py",7923,3,"",python,content
1939,2860159,"dev/ABC424d.py",7923,2,"",python,content
1940,2860541,"dev/ABC424d.py",7923,1,"",python,content
1941,2861045,"dev/ABC424d.py",7923,1,"",python,content
1942,2862756,"dev/ABC424d.py",7923,0,"c",python,content
1943,2862857,"dev/ABC424d.py",7924,0,"o",python,content
1944,2862899,"dev/ABC424d.py",7925,0,"u",python,content
1945,2862976,"dev/ABC424d.py",7926,0,"n",python,content
1946,2863027,"dev/ABC424d.py",7927,0,"t",python,content
1947,2863181,"dev/ABC424d.py",7928,0," ",python,content
1948,2863348,"dev/ABC424d.py",7929,0,"<",python,content
1949,2863496,"dev/ABC424d.py",7930,0,"=",python,content
1950,2864103,"dev/ABC424d.py",7931,0,"H",python,content
1951,2864420,"dev/ABC424d.py",7932,0,"*",python,content
1952,2864582,"dev/ABC424d.py",7933,0,"W",python,content
1953,2865164,"dev/ABC424d.py",7935,0,"\n        ",python,content
1954,2879594,"dev/ABC424d.py",7944,0,"t",python,content
1955,2879635,"dev/ABC424d.py",7945,0,"a",python,content
1956,2879920,"dev/ABC424d.py",7946,0,"r",python,content
1957,2880102,"dev/ABC424d.py",7947,0,"g",python,content
1958,2880204,"dev/ABC424d.py",7948,0,"e",python,content
1959,2880302,"dev/ABC424d.py",7949,0,"t",python,content
1960,2880553,"dev/ABC424d.py",7950,0," ",python,content
1961,2880666,"dev/ABC424d.py",7951,0,"=",python,content
1962,2880874,"dev/ABC424d.py",7952,0," ",python,content
1963,2881922,"dev/ABC424d.py",7953,0,"c",python,content
1964,2882028,"dev/ABC424d.py",7954,0,"a",python,content
1965,2882098,"dev/ABC424d.py",7955,0,"n",python,content
1966,2882252,"dev/ABC424d.py",7956,0,"d",python,content
1967,2882514,"dev/ABC424d.py",7953,4,"candidate",python,content
1968,2882666,"dev/ABC424d.py",7962,0,".",python,content
1969,2882814,"dev/ABC424d.py",7963,0,"a",python,content
1970,2883179,"dev/ABC424d.py",7963,1,"",python,content
1971,2883353,"dev/ABC424d.py",7963,0,"p",python,content
1972,2883418,"dev/ABC424d.py",7964,0,"o",python,content
1973,2883512,"dev/ABC424d.py",7965,0,"p",python,content
1974,2883770,"dev/ABC424d.py",7966,0,"()",python,content
1975,2884545,"dev/ABC424d.py",7968,0,"\n        ",python,content
1976,2888483,"dev/ABC424d.py",7977,0,"f",python,content
1977,2888623,"dev/ABC424d.py",7978,0,"l",python,content
1978,2888751,"dev/ABC424d.py",7979,0,"a",python,content
1979,2889090,"dev/ABC424d.py",7980,0,"g",python,content
1980,2889806,"dev/ABC424d.py",7981,0,"[]",python,content
1981,2890266,"dev/ABC424d.py",7982,0,"t",python,content
1982,2890318,"dev/ABC424d.py",7983,0,"a",python,content
1983,2890505,"dev/ABC424d.py",7984,0,"r",python,content
1984,2890832,"dev/ABC424d.py",7985,0,"g",python,content
1985,2890995,"dev/ABC424d.py",7986,0,"e",python,content
1986,2891097,"dev/ABC424d.py",7987,0,"t",python,content
1987,2891374,"dev/ABC424d.py",7988,0,"s",python,content
1988,2891980,"dev/ABC424d.py",7988,1,"",python,content
1989,2892507,"dev/ABC424d.py",7989,0," ",python,content
1990,2892822,"dev/ABC424d.py",7990,0,"T",python,content
1991,2892986,"dev/ABC424d.py",7991,0,"r",python,content
1992,2893083,"dev/ABC424d.py",7992,0,"u",python,content
1993,2893185,"dev/ABC424d.py",7993,0,"e",python,content
1994,2894729,"dev/ABC424d.py",7990,0," ",python,content
1995,2895078,"dev/ABC424d.py",7990,1,"",python,content
1996,2895693,"dev/ABC424d.py",7989,0," ",python,content
1997,2895886,"dev/ABC424d.py",7990,0,"=",python,content
1998,2903677,"dev/ABC424d.py",7912,0,"\n                ",python,content
1999,2903880,"dev/ABC424d.py",7925,4,"",python,content
2000,2904114,"dev/ABC424d.py",7921,4,"",python,content
2001,2904294,"dev/ABC424d.py",7917,4,"",python,content
2002,2904450,"dev/ABC424d.py",7917,0,"r",python,content
2003,2904512,"dev/ABC424d.py",7918,0,"e",python,content
2004,2904894,"dev/ABC424d.py",7919,0,"s",python,content
2005,2904909,"dev/ABC424d.py",7920,0,"u",python,content
2006,2904974,"dev/ABC424d.py",7921,0,"l",python,content
2007,2905054,"dev/ABC424d.py",7922,0,"t",python,content
2008,2905198,"dev/ABC424d.py",7923,0," ",python,content
2009,2905353,"dev/ABC424d.py",7924,0,"=",python,content
2010,2905515,"dev/ABC424d.py",7925,0," ",python,content
2011,2905609,"dev/ABC424d.py",7926,0,"0",python,content
2012,2920602,"dev/ABC424d.py",7913,15,"",python,content
2013,2933453,"dev/ABC424d.py",7913,0,"\n",python,content
2014,2934241,"dev/ABC424d.py",7913,0,"    ",python,content
2015,2934661,"dev/ABC424d.py",7917,0,"c",python,content
2016,2935095,"dev/ABC424d.py",7918,0,"a",python,content
2017,2935262,"dev/ABC424d.py",7919,0,"m",python,content
2018,2935332,"dev/ABC424d.py",7920,0,"d",python,content
2019,2935497,"dev/ABC424d.py",7921,0," ",python,content
2020,2935664,"dev/ABC424d.py",7922,0,"=",python,content
2021,2935709,"dev/ABC424d.py",7923,0,"~",python,content
2022,2935965,"dev/ABC424d.py",7923,1,"",python,content
2023,2936113,"dev/ABC424d.py",7922,1,"",python,content
2024,2936261,"dev/ABC424d.py",7921,1,"",python,content
2025,2936417,"dev/ABC424d.py",7920,1,"",python,content
2026,2936618,"dev/ABC424d.py",7917,3,"",python,content
2027,2937065,"dev/ABC424d.py",7917,0,"c",python,content
2028,2937168,"dev/ABC424d.py",7918,0,"a",python,content
2029,2937273,"dev/ABC424d.py",7919,0,"n",python,content
2030,2937482,"dev/ABC424d.py",7920,0,"d",python,content
2031,2937649,"dev/ABC424d.py",7921,0," ",python,content
2032,2937813,"dev/ABC424d.py",7922,0,"~",python,content
2033,2938032,"dev/ABC424d.py",7923,0," ",python,content
2034,2938136,"dev/ABC424d.py",7924,0,"[]",python,content
2035,2938477,"dev/ABC424d.py",7924,2,"",python,content
2036,2938665,"dev/ABC424d.py",7923,1,"",python,content
2037,2938810,"dev/ABC424d.py",7922,1,"",python,content
2038,2939113,"dev/ABC424d.py",7922,0,"=",python,content
2039,2939665,"dev/ABC424d.py",7923,0," ",python,content
2040,2939922,"dev/ABC424d.py",7924,0,"[]",python,content
2041,2948161,"dev/ABC424d.py",7913,14,"",python,content
2042,2955182,"dev/ABC424d.py",7869,0,"\n                ",python,content
2043,2959145,"dev/ABC424d.py",7886,1,"                for k,l in LRUD+LURULDRD:\n                    flag[i+k,j+l] = True",python,content
2044,2959619,"dev/ABC424d.py",7886,82,"\n",python,content
2045,2961600,"dev/ABC424d.py",7830,56,"                for k,l in LRUD+LURULDRD:\n                    flag[i+k,j+l] = True",python,content
2046,2961918,"dev/ABC424d.py",7830,82,"                candidate.append((i,j))\n                ",python,content
2047,2962817,"dev/ABC424d.py",7870,16,"                for k,l in LRUD+LURULDRD:\n                    flag[i+k,j+l] = True",python,content
2048,2968280,"dev/ABC424d.py",7948,4,"",python,content
2049,2968454,"dev/ABC424d.py",7946,2,"",python,content
2050,2968654,"dev/ABC424d.py",7945,1,"",python,content
2051,2970266,"dev/ABC424d.py",7932,0,"i",python,content
2052,2970369,"dev/ABC424d.py",7933,0,"f",python,content
2053,2970473,"dev/ABC424d.py",7934,0," ",python,content
2054,2972878,"dev/ABC424d.py",7948,0," ",python,content
2055,2973030,"dev/ABC424d.py",7949,0,"=",python,content
2056,2973191,"dev/ABC424d.py",7950,0," ",python,content
2057,2973590,"dev/ABC424d.py",7951,0,"F",python,content
2058,2973990,"dev/ABC424d.py",7952,0,"a",python,content
2059,2974111,"dev/ABC424d.py",7953,0,"l",python,content
2060,2974212,"dev/ABC424d.py",7954,0,"s",python,content
2061,2974334,"dev/ABC424d.py",7955,0,"e",python,content
2062,2978438,"dev/ABC424d.py",7949,0,"=",python,content
2063,2979616,"dev/ABC424d.py",7957,0,":",python,content
2064,2979667,"dev/ABC424d.py",7958,0,"\n                        ",python,content
2065,2986603,"dev/ABC424d.py",7959,24,"",python,content
2065,2986603,"dev/ABC424d.py",7959,24,"",python,content
2065,2986603,"dev/ABC424d.py",7959,24,"",python,content
2066,2986603,"dev/ABC424d.py",7869,42,"",python,content
2067,2986603,"dev/ABC424d.py",7830,0,"                for k,l in LRUD+LURULDRD:\n",python,content
2068,2986756,"dev/ABC424d.py",7911,47,"",python,content
2068,2986756,"dev/ABC424d.py",7911,47,"",python,content
2069,2986757,"dev/ABC424d.py",7872,0,"                    if flag[i+k,j+l] == False:\n",python,content
2070,2990081,"dev/ABC424d.py",7830,0,"\n",python,content
2071,2990559,"dev/ABC424d.py",7830,0,"                ",python,content
2072,2990998,"dev/ABC424d.py",7846,0,"c",python,content
2073,2991227,"dev/ABC424d.py",7847,0," ",python,content
2074,2991380,"dev/ABC424d.py",7848,0,"=",python,content
2075,2991972,"dev/ABC424d.py",7849,0," ",python,content
2076,2992085,"dev/ABC424d.py",7850,0,"0",python,content
2077,2995250,"dev/ABC424d.py",7940,0,"\n                        ",python,content
2078,2995453,"dev/ABC424d.py",7965,0,"c",python,content
2079,2995864,"dev/ABC424d.py",7966,0,"+",python,content
2080,2995966,"dev/ABC424d.py",7967,0,"=",python,content
2081,2996120,"dev/ABC424d.py",7968,0,"1",python,content
2082,2997124,"dev/ABC424d.py",7970,0,"    ",python,content
2083,2997767,"dev/ABC424d.py",7974,0,"    ",python,content
2084,3001734,"dev/ABC424d.py",8016,0,",",python,content
2085,3002505,"dev/ABC424d.py",8017,0,"c",python,content
2086,3004785,"dev/ABC424d.py",8018,0,")",python,content
2086,3004785,"dev/ABC424d.py",8018,0,")",python,content
2087,3004785,"dev/ABC424d.py",8011,0,"(",python,content
2088,3007444,"dev/ABC424d.py",7990,4,"",python,content
2089,3007600,"dev/ABC424d.py",7986,4,"",python,content
2090,3015710,"dev/ABC424d.py",8010,1,"",python,content
2091,3015909,"dev/ABC424d.py",8009,1,"",python,content
2092,3017509,"dev/ABC424d.py",8003,0,"c",python,content
2093,3018586,"dev/ABC424d.py",8004,0,",",python,content
2094,3019883,"dev/ABC424d.py",8004,1,"",python,content
2095,3020037,"dev/ABC424d.py",8003,1,"",python,content
2096,3020576,"dev/ABC424d.py",8004,0,"c",python,content
2097,3020704,"dev/ABC424d.py",8005,0,",",python,content
2098,3023636,"dev/ABC424d.py",8013,1,"",python,content
2099,3028244,"dev/ABC424d.py",8075,0," ",python,content
2100,3030345,"dev/ABC424d.py",8056,0,"\n                ",python,content
2101,3030687,"dev/ABC424d.py",8057,16,"",python,content
2102,3031322,"dev/ABC424d.py",8057,0,"    ",python,content
2103,3031614,"dev/ABC424d.py",8061,0,"c",python,content
2104,3031821,"dev/ABC424d.py",8062,0,"a",python,content
2105,3032013,"dev/ABC424d.py",8063,0,"n",python,content
2106,3032371,"dev/ABC424d.py",8061,3,"candidate",python,content
2107,3032870,"dev/ABC424d.py",8070,0,".",python,content
2108,3033150,"dev/ABC424d.py",8071,0,"s",python,content
2109,3033230,"dev/ABC424d.py",8072,0,"o",python,content
2110,3033339,"dev/ABC424d.py",8073,0,"r",python,content
2111,3033502,"dev/ABC424d.py",8074,0,"t",python,content
2112,3033680,"dev/ABC424d.py",8075,0,"()",python,content
2113,3037153,"dev/ABC424d.py",8076,0,"r",python,content
2114,3037219,"dev/ABC424d.py",8077,0,"e",python,content
2115,3037377,"dev/ABC424d.py",8078,0,"v",python,content
2116,3037446,"dev/ABC424d.py",8079,0,"e",python,content
2117,3037957,"dev/ABC424d.py",8076,4,"reverse=",python,content
2118,3038261,"dev/ABC424d.py",8084,0,"T",python,content
2119,3038414,"dev/ABC424d.py",8085,0,"r",python,content
2120,3038522,"dev/ABC424d.py",8086,0,"u",python,content
2121,3038603,"dev/ABC424d.py",8087,0,"e",python,content
2122,3043096,"dev/ABC424d.py",8084,4,"",python,content
2123,3043307,"dev/ABC424d.py",8083,1,"",python,content
2124,3045314,"dev/ABC424d.py",8076,7,"",python,content
2125,3094082,"dev/ABC424d.py",8143,0,"\n        ",python,content
2126,3094678,"dev/ABC424d.py",8143,0,"f",python,content
2127,3094740,"dev/ABC424d.py",8144,0,"o",python,content
2128,3094876,"dev/ABC424d.py",8145,0,"r",python,content
2129,3094978,"dev/ABC424d.py",8146,0," ",python,content
2130,3095142,"dev/ABC424d.py",8147,0,"k",python,content
2131,3095229,"dev/ABC424d.py",8148,0," ",python,content
2132,3095650,"dev/ABC424d.py",8148,1,"",python,content
2133,3095950,"dev/ABC424d.py",8148,0,",",python,content
2134,3096388,"dev/ABC424d.py",8149,0,"l",python,content
2135,3097183,"dev/ABC424d.py",8150,0," ",python,content
2136,3097280,"dev/ABC424d.py",8151,0,"i",python,content
2137,3097382,"dev/ABC424d.py",8152,0,"n",python,content
2138,3097650,"dev/ABC424d.py",8153,0," ",python,content
2139,3097994,"dev/ABC424d.py",8154,0,"L",python,content
2140,3098302,"dev/ABC424d.py",8155,0,"R",python,content
2141,3098510,"dev/ABC424d.py",8156,0,"U",python,content
2142,3098866,"dev/ABC424d.py",8157,0,"D",python,content
2143,3099185,"dev/ABC424d.py",8158,0,"+",python,content
2144,3099777,"dev/ABC424d.py",8159,0,"L",python,content
2145,3099954,"dev/ABC424d.py",8160,0,"U",python,content
2146,3100469,"dev/ABC424d.py",8159,2,"LURULDRD",python,content
2147,3102271,"dev/ABC424d.py",8167,0,":",python,content
2148,3102374,"dev/ABC424d.py",8168,0,"\n            ",python,content
2149,3103028,"dev/ABC424d.py",8181,9,"",python,content
2150,3105362,"dev/ABC424d.py",8186,6,"",python,content
2151,3106445,"dev/ABC424d.py",8186,0,"t",python,content
2152,3106508,"dev/ABC424d.py",8187,0,"a",python,content
2153,3106644,"dev/ABC424d.py",8188,0,"r",python,content
2154,3106851,"dev/ABC424d.py",8189,0,"g",python,content
2155,3107050,"dev/ABC424d.py",8190,0,"e",python,content
2156,3107686,"dev/ABC424d.py",8191,0,"t",python,content
2157,3107850,"dev/ABC424d.py",8192,0,"[]",python,content
2158,3108100,"dev/ABC424d.py",8193,0,"0",python,content
2159,3108710,"dev/ABC424d.py",8195,0,"+",python,content
2160,3110331,"dev/ABC424d.py",8196,0,"k",python,content
2161,3110802,"dev/ABC424d.py",8197,0,",",python,content
2162,3113930,"dev/ABC424d.py",8198,0,"t",python,content
2163,3114070,"dev/ABC424d.py",8199,0,"a",python,content
2164,3114192,"dev/ABC424d.py",8200,0,"r",python,content
2165,3114325,"dev/ABC424d.py",8201,0,"g",python,content
2166,3114754,"dev/ABC424d.py",8198,4,"target",python,content
2167,3114932,"dev/ABC424d.py",8204,0,"[]",python,content
2168,3115941,"dev/ABC424d.py",8205,0,"1",python,content
2169,3116765,"dev/ABC424d.py",8207,0,"+",python,content
2170,3117457,"dev/ABC424d.py",8208,0,"l",python,content
2171,3121301,"dev/ABC424d.py",8213,4,"",python,content
2172,3121454,"dev/ABC424d.py",8211,2,"",python,content
2173,3121832,"dev/ABC424d.py",8210,1,"",python,content
2174,3126375,"dev/ABC424d.py",8210,0," ",python,content
2175,3126538,"dev/ABC424d.py",8211,0,"=",python,content
2176,3126721,"dev/ABC424d.py",8212,0," ",python,content
2177,3127645,"dev/ABC424d.py",8211,2,"",python,content
2178,3129414,"dev/ABC424d.py",8210,1,"",python,content
2179,3136886,"dev/ABC424d.py",8210,0," ",python,content
2180,3137256,"dev/ABC424d.py",8211,0,"=",python,content
2181,3137450,"dev/ABC424d.py",8212,0," ",python,content
2182,3138171,"dev/ABC424d.py",8213,0,"f",python,content
2183,3138356,"dev/ABC424d.py",8214,0,"a",python,content
2183,3138356,"dev/ABC424d.py",8214,0,"a",python,content
2184,3138357,"dev/ABC424d.py",8215,0,"l",python,content
2185,3138596,"dev/ABC424d.py",8216,0,"s",python,content
2186,3138755,"dev/ABC424d.py",8217,0,"e",python,content
2187,3139454,"dev/ABC424d.py",8213,5,"False",python,content
2188,3147692,"dev/ABC424d.py",8181,0,"i",python,content
2189,3147790,"dev/ABC424d.py",8182,0,"f",python,content
2190,3147965,"dev/ABC424d.py",8183,0," ",python,content
2191,3150837,"dev/ABC424d.py",8215,0,"=",python,content
2192,3158048,"dev/ABC424d.py",8222,0,":",python,content
2193,3158120,"dev/ABC424d.py",8223,0,"\n                ",python,content
2194,3158358,"dev/ABC424d.py",8240,0,"c",python,content
2195,3158455,"dev/ABC424d.py",8241,0,"o",python,content
2196,3158546,"dev/ABC424d.py",8242,0,"u",python,content
2197,3158650,"dev/ABC424d.py",8243,0,"n",python,content
2198,3158710,"dev/ABC424d.py",8244,0,"t",python,content
2199,3158976,"dev/ABC424d.py",8245,0,"+",python,content
2200,3159035,"dev/ABC424d.py",8246,0,"=",python,content
2201,3159196,"dev/ABC424d.py",8247,0,"1",python,content
2202,3159851,"dev/ABC424d.py",8248,0,"\n                ",python,content
2203,3163834,"dev/ABC424d.py",8265,0,"v",python,content
2204,3164374,"dev/ABC424d.py",8265,1,"",python,content
2205,3164526,"dev/ABC424d.py",8265,0,"flag[target[0]+k,target[1]+l]",python,content
2206,3167732,"dev/ABC424d.py",8294,0,"=",python,content
2207,3168589,"dev/ABC424d.py",8295,0,"T",python,content
2208,3168742,"dev/ABC424d.py",8296,0,"r",python,content
2209,3168866,"dev/ABC424d.py",8297,0,"u",python,content
2210,3168989,"dev/ABC424d.py",8298,0,"e",python,content
2211,3190873,"dev/ABC424d.py",9036,0,",",python,content
2212,3191481,"dev/ABC424d.py",9037,0,"()",python,content
2213,3191784,"dev/ABC424d.py",9038,0,"9",python,content
2214,3191938,"dev/ABC424d.py",9039,0,",",python,content
2215,3192045,"dev/ABC424d.py",9040,0,"9",python,content
2216,3192373,"dev/ABC424d.py",9040,1,"",python,content
2217,3192557,"dev/ABC424d.py",9039,1,"",python,content
2218,3192715,"dev/ABC424d.py",9038,1,"",python,content
2219,3192865,"dev/ABC424d.py",9038,0,"0",python,content
2220,3192933,"dev/ABC424d.py",9039,0,".",python,content
2221,3193042,"dev/ABC424d.py",9040,0,"0",python,content
2222,3193741,"dev/ABC424d.py",9040,1,"",python,content
2223,3193899,"dev/ABC424d.py",9039,1,"",python,content
2224,3194000,"dev/ABC424d.py",9039,0,",",python,content
2225,3194072,"dev/ABC424d.py",9040,0,"0",python,content
2226,3201622,"dev/ABC424d.py",8300,8,"",python,content
2227,3202040,"dev/ABC424d.py",8300,0,"    ",python,content
2228,3202687,"dev/ABC424d.py",8304,0,"p",python,content
2229,3203234,"dev/ABC424d.py",8305,0,"r",python,content
2230,3203336,"dev/ABC424d.py",8306,0,"i",python,content
2231,3203412,"dev/ABC424d.py",8307,0,"n",python,content
2232,3203443,"dev/ABC424d.py",8308,0,"t",python,content
2233,3203685,"dev/ABC424d.py",8309,0,"e",python,content
2234,3203887,"dev/ABC424d.py",8310,0,"()",python,content
2235,3205956,"dev/ABC424d.py",8311,0,"c",python,content
2236,3206059,"dev/ABC424d.py",8312,0,"o",python,content
2237,3206121,"dev/ABC424d.py",8313,0,"u",python,content
2238,3206217,"dev/ABC424d.py",8314,0,"n",python,content
2238,3206217,"dev/ABC424d.py",8314,0,"n",python,content
2239,3206218,"dev/ABC424d.py",8315,0,"t",python,content
2240,3211949,"dev/ABC424d.py",8311,5,"",python,content
2241,3225455,"dev/ABC424d.py",8077,0,"\n    ",python,content
2242,3225656,"dev/ABC424d.py",8082,0,"r",python,content
2243,3225724,"dev/ABC424d.py",8083,0,"e",python,content
2244,3225909,"dev/ABC424d.py",8084,0,"s",python,content
2245,3225977,"dev/ABC424d.py",8085,0,"u",python,content
2246,3226021,"dev/ABC424d.py",8086,0,"l",python,content
2247,3226111,"dev/ABC424d.py",8087,0,"t",python,content
2248,3226281,"dev/ABC424d.py",8088,0," ",python,content
2249,3227219,"dev/ABC424d.py",8089,0,"=",python,content
2250,3227439,"dev/ABC424d.py",8090,0," ",python,content
2251,3227775,"dev/ABC424d.py",8091,0,"c",python,content
2252,3227936,"dev/ABC424d.py",8092,0,"n",python,content
2253,3227983,"dev/ABC424d.py",8093,0,"a",python,content
2254,3228169,"dev/ABC424d.py",8094,0,"d",python,content
2255,3228267,"dev/ABC424d.py",8095,0,"i",python,content
2256,3228840,"dev/ABC424d.py",8091,5,"candidate",python,content
2257,3230460,"dev/ABC424d.py",8100,0,")",python,content
2257,3230460,"dev/ABC424d.py",8100,0,")",python,content
2258,3230460,"dev/ABC424d.py",8091,0,"(",python,content
2259,3231329,"dev/ABC424d.py",8091,0,"l",python,content
2260,3231422,"dev/ABC424d.py",8092,0,"e",python,content
2261,3231584,"dev/ABC424d.py",8093,0,"n",python,content
2262,3238836,"dev/ABC424d.py",8339,0,"r",python,content
2263,3238864,"dev/ABC424d.py",8340,0,"e",python,content
2264,3239010,"dev/ABC424d.py",8341,0,"s",python,content
2265,3239112,"dev/ABC424d.py",8342,0,"u",python,content
2266,3239156,"dev/ABC424d.py",8343,0,"l",python,content
2267,3239250,"dev/ABC424d.py",8344,0,"t",python,content
2268,3239713,"dev/ABC424d.py",8345,0,"-",python,content
2269,3240514,"dev/ABC424d.py",8346,0,"l",python,content
2270,3240636,"dev/ABC424d.py",8347,0,"e",python,content
2271,3240739,"dev/ABC424d.py",8348,0,"n",python,content
2272,3241011,"dev/ABC424d.py",8349,0,"()",python,content
2273,3241858,"dev/ABC424d.py",8350,0,"c",python,content
2274,3242009,"dev/ABC424d.py",8351,0,"a",python,content
2275,3242093,"dev/ABC424d.py",8352,0,"n",python,content
2276,3242238,"dev/ABC424d.py",8353,0,"d",python,content
2277,3242528,"dev/ABC424d.py",8350,4,"candidate",python,content
2278,3255688,"dev/ABC424c.py",0,0,"# ABC424c\n# 2025-09-20 20:38:35\n\ndef main():\n    # 関数定義スペース\n\n    def func():\n        ...\n\n    ...    \n    # 入力スペース\n\n    N = splitN(input())\n    SKILL = []\n    for i in range(N):\n        a, b = splitA(input())\n        SKILL.append((a,b))\n    ...\n\n    # 処理スペース\n    stack = []\n    done = set()\n\n    req_skills = dict(lambda:[])\n    for i in range(N):\n        a,b = SKILL[i]\n        if a==0 and b == 0:\n            stack.append(i)\n            done.add(i)\n            continue\n        req_skills[a-1].append(i)\n        req_skills[b-1].append(i)\n\n    while stack:\n        t = stack.pop()\n        for i in req_skills[t]:\n            if i not in done:\n                stack.append(i)\n                done.add(i)\n    print(len(done))\n\n\n\n\n\n\n\n    ...\n\n\n\n# テストケース中枢処理\ndef case():\n    TESTCASE = 1\n    # TESTCASE = int(input()) # テストケース数の指定\n    for _ in range(TESTCASE):\n        try:\n            main()\n        except solvedException:\n            continue\n        # raise unSolvedExeption\n\n\n# インポート\nimport sys, itertools, math, heapq\nfrom collections import defaultdict, deque\nfrom sortedcontainers import SortedSet, SortedList, SortedDict  # CPython?\n\n# 定数・環境設定\nsys.setrecursionlimit(10**8)\nsys.set_int_max_str_digits(0)\ndict = defaultdict\nUPPER_ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""\nLOWER_ALPHABET=""abcdefghijklmnopqrstuvwxyz""\nMOD = 998244353\nMAX = 10**18\nLRUD = [(0, 1), (0, -1), (1, 0), (-1, 0)]\nLURULDRD = [(-1, -1), (-1, 1), (1, -1), (1, 1)]\n\n# 各種関数定義(超圧縮)\n## 便利関数\ndef printe(*values,sep="" "",end=""\n""):print(*values,sep=sep,end=end); fin()\ndef prin(stop=False,sep="" "",end=""\n"",file=sys.stdout):return (lambda*values:printe(*values,sep=sep,end=end)) if stop else (lambda*values:print(*values,sep=sep,end=end,file=file))\ndef yes(f=True): printe(""Yes"") if (f) else None\ndef no(f=True): printe(""No"") if (f) else None\ndef debug(*values,sep="" "",end=""\n""): print(*values,sep=sep,end=end,file=sys.stderr)\ndef printYN(f:bool): yes() if f else no()\ndef fin(f=True): raise solvedException if f else None\n## 分割関数\ndef split(value:str|list,sep:str="" "",func:callable=str) -> list:\n    result = []\n    if type(value) == list:\n        for i in range(len(value)):\n            result.append(split(value[i],sep))\n        return result\n    else:\n        if sep in value:\n            for i in value.split(sep):\n                result.append(func(i))\n        else:\n            result.append(func(value))\n        return result\n## 入力受け取り用\ndef input():return(sys.stdin.readline()).rstrip() #入力定数倍\ndef splitS(value:str|list,sep:str="" "")->str:return split(value,sep)[0] #文字列・分割して最初\ndef splitN(value:str|list,sep:str="" "")->int:return split(value,sep,int)[0] # 整数・分割して最初\ndef splitB(value:str|list,sep:str="" "")->list:return list(split(value,sep)) # 文字列・分割してすべて\ndef splitA(value:str|list,sep:str="" "")->list:return list(split(value,sep,int)) # 整数・分割してすべて\n\n# 例外クラス\nclass solvedException(Exception): pass # 処理打ち切り例外\nclass unSolvedExeption(Exception): # 回答未出力例外\n    def __init__(description = ""解答が出力されていません。""): super().__init__(description)\n\n# 実行\nif __name__ == ""__main__"":\n    case()\n",python,tab
2279,3256083,"dev/ABC424d.py",0,0,"# ABC424d\n# 2025-09-20 20:38:35\nclass Board():\n\n    """"""\n    二次元ボードを便利に使いやすくするためのクラス\n    """""" \n    ROTATE_0_DEGREE = 0\n    ROTATE_90_DEGREE = 1\n    ROTATE_180_DEGREE = 2\n    ROTATE_270_DEGREE = 3\n\n    # 自作ボードクラスのショートカット関数  \n    def input_board(height:int,f=lambda:input(list())):\n        """"""\n        標準入力からボード作成\n        Args:\n            -  height(int):高さ\n            -  f(function):入力の形式 指定しなかった場合は自動で\n                スペースのない文字列を想定した入力になる\n        Returns:\n            Board:作成されたボードクラス\n        """"""\n        board=[]\n        for i in range(height):\n            board.append(f())\n        return Board(board)\n\n    def input_board_with_wall(height:int,width:int,wall:any,f=lambda:list(input())):\n        """"""\n        標準入力からボード作成(ATフィールド付)\n        Args:\n            -  height(int):高さ\n            -  width(int):幅\n            -  wall:壁に割り当てる値\n            -  f(function):入力の形式 指定しなかった場合は自動で\n                スペースのない文字列を想定した入力になる\n        Returns:\n            Board:作成されたボードクラス\n        """"""\n        board=[]\n        for i in range(height):\n            board.append(f()+[wall])\n        board.append([wall]*(width+1))\n        return Board(board)\n\n    def create_board(height:int,width:int,initial_value):\n        """"""\n        指定した高さと幅でボードを作成し、全て初期値を代入する。\n\n        Args:\n            -  height (int): 高さ\n            -  width (int): 幅\n            -  initial_value: 初期値 \n\n        Returns:\n            -  Board: 作成されたボード\n        """"""\n        raw_board = []\n        for i in range(height):\n            raw_board.append([initial_value]*width)\n        return Board(raw_board)\n\n\n    def __init__(self,board_data:list):\n        """"""\n        インスタンス生成関数\n        Args:\n            -  board_data(list):生成する元となる二次元配列データ\n        """"""\n        self.__data=[]\n        self.__height=len(board_data)\n        assert 0<self.__height #高さが0以下だった場合はボードの作りようがないためエラー\n        self.__width=len(board_data[0])\n        for i in range(self.__height):\n            assert len(board_data[i])==self.__width #幅がぶれているとこのクラスでは扱えないためエラー\n            self.__data.append(board_data[i])\n        self.__cells=self.__height*self.__width\n\n    def get_height(self):\n        """"""\n        ボードの高さの値を返す関数\n\n        Returns:\n            -  int:heightの値\n        """"""\n        return self.__height\n\n    def get_width(self):\n        """"""\n        ボードの幅の値を返す関数\n\n        Returns:\n            -  int:widthの値\n        """"""\n        return self.__width\n\n\n    def __len__(self):\n        """"""\n        len()を使うための関数\n        レコードの数を返す\n\n        Returns:\n            -  int:二次元配列のレコードの数\n        """"""\n        return self.__cells\n    \n    \n    def __getitem__(self,pos:tuple):\n        """"""\n        board[]を利用するための関数\n        レコードの値を取り出す\n\n        Args:\n            -  (y,x)形式の座標を表すタプル\n        Returns:\n            -  any:テーブルのy行目j列目の値\n        """"""\n        return self.__data[pos[0]][pos[1]]\n    \n    def get(self,pos:tuple):\n        """"""\n        レコードの値を取り出す関数\n\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n        Returns:\n            -  any:テーブルのy行目j列目の値        \n        """"""        \n        return self[pos]\n\n    def __str__(self):\n        """"""\n        str()で呼び出される関数\n        いい感じに整形して出力する\n        Returns:\n            -  str:いい感じに整形された二次元配列の文字列\n        """"""\n        datas=[]\n        sep_count=0\n        for i in range(self.__height):\n            \n            item="" | "".join(str(j) for j in self.__data[i])\n            datas.append(item)\n            sep_count=max(sep_count,len(item))\n            if i==self.__height-1:\n                sep=""\n""+""-""*sep_count+""-\n""\n        return sep.join(datas)\n\n    def set(self,pos,value):\n        """"""\n        値を代入する関数\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n            -  value(any):代入する値\n        """"""\n        self[pos]=value\n\n    def __setitem__(self,pos,value):\n        """"""\n        board[pos]=valueを使えるようにするための関数\n        値を代入する\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n            -  value(any):代入する値\n        """"""\n        self.__data[pos[0]][pos[1]]=value\n\n    def is_inside_positive(self,pos):\n        """"""\n        正の整数の範囲内で指定のposがボードの内側に含まれているかどうかを返す関数\n        \n        Args:\n            -  pos (tuple): (y,x)形式の座標を表すタプル\n        """"""\n        y,x=pos\n        return y<self.__height and x<self.__width\n\n    def is_inside_negative(self,pos):\n        """"""\n        負の整数の範囲内で指定のposがボードの内側に含まれているかどうかを返す関数\n        \n        Args:\n            -  pos (tuple): (y,x)形式の座標を表すタプル\n        """"""\n        y,x=pos\n        return -1*self.__width<=x and -1*self.__height<=y\n    \n\n    def is_inside(self,pos):\n        """"""\n        指定のposがボードの内側に含まれているかどうかを返す関数\n        ただし、マイナスを許容する\n        Args:\n            -  pos(tuple):(y,x)形式の座標を表すタプル\n        Returns:\n            -  bool:含まれているか否か\n        """"""\n        return self.is_inside_positive(pos) or self.is_inside_negative(pos)\n\n    def rotate(self,degree:int):\n        """"""\n        ボードを回転させる関数\n        Args:\n            -  degree(int):ROTATE_**_DEGREE\n        """"""\n        if degree==self.ROTATE_90_DEGREE:\n            self.__data = [list(g) for g in zip(*self.__data[::-1])]\n            self.__height,self.__width=self.__width,self.__height\n        elif degree==self.ROTATE_180_DEGREE:\n            self.__data = [list(g)[::-1] for g in self.__data[::-1]]\n        elif degree==self.ROTATE_270_DEGREE:\n            self.__data = [list(g) for g in zip(*self.__data)][::-1]\n            self.__height,self.__width=self.__width,self.__height\n\n    def __flip_by_vertical(self):\n        """"""\n        ボードを縦方向の線対称に反転する\n        """"""\n        self.__data = [list(g)[::-1] for g in self.__data]\n    \n    def __flip_by_holizontal(self):\n        """"""\n        ボードを横方向の線対称に反転する\n        """"""\n        self.__data = [list(g) for g in self.__data[::-1]]\n    \n    def flip(self,vertical=False,horizontal=False):\n        """"""\n        ボードを縦か横か指定した方向の線対称に反転する\n        Args:\n            -  vertical(bool):初期値はFalseで、Trueにすると縦方向に反転する\n            -  horizontal(bool):初期値はFalseで、Trueにすると横方向に反転する\n        """"""\n        if vertical:\n            self.__flip_by_vertical()\n        if horizontal:\n            self.__flip_by_holizontal()\n\n    def copy(self):\n        """"""\n        コピー関数\n        Returns:\n            -  Board:別インスタンスで、中身が同じボードクラス\n        """"""\n        data=[]\n        for i in range(self.__height):\n            data.append(self.__data[i].copy())\n        return self.__class__(data)\n\n    def fill(self,value):\n        """"""\n        初期化関数\n        valueで指定した値でボードのすべてを埋める\n        Args:\n            -  value(any):埋めたい値\n        """"""\n        for i in range(self.__height):\n            for j in range(self.__width):\n                self.__data[i][j] = value\n\n    def add_wall(self,value):\n        """"""\n        ATフィールド関数\n        valueで指定した値でボードの右端と下端をひとつ増やす。\n        Args:\n            -  value(any):増やしたい値\n        """"""\n        for i in range(self.__height):\n            self.__data[i].append(value)\n        self.__width+=1\n        self.__height+=1\n        self.__data.append([value]*(self.__width))\n    \n    def input(f:callable=int)->tuple:\n        """"""二次元ボードの入力\n\n        Args:\n            -  f (callable, optional): 各要素にかける関数\n\n        Returns:\n            -  tuple: 二次元ボードとHとWの組\n        """"""\n        H,W=map(int,input().split())\n        board = []\n        for i in range(H):\n            board.append(list(map(f,input().split())))\n        return Board(board),H,W\n\n\n\ndef main():\n    # 関数定義スペース\n\n    def is_not_all_black(pos):\n        i,j=pos\n        return  not(BOARD[pos] == ""#"" and BOARD[i,j+1]== ""#"" and BOARD[i+1,j]== ""#"" and BOARD[i+1,j+1]== ""#"")\n\n    ...    \n    # 入力スペース\n\n    H, W = splitA(input())\n    BOARD=Board.input_board_with_wall(H,W,""-"")\n    flag = Board.create_board(H,W,False)\n    for i in range(H):\n        for j in range(W):\n            if BOARD[i,j]==""."":\n                for k,l in LRUD+LURULDRD:\n                    flag[i+k,j+l] = True\n    candidate = []\n    count = 0\n    for i in range(H):\n        for j in range(W):\n            if flag[i,j] == False:\n                c = 0\n                for k,l in LRUD+LURULDRD:\n                    if flag[i+k,j+l] == False:\n                        c+=1\n                candidate.append((c,(i,j)))\n            else:\n                count+=1\n    candidate.sort()\n    result = len(candidate)\n    while count <= H*W:\n        target = candidate.pop()\n        for k,l in LRUD+LURULDRD:\n            if flag[target[0]+k,target[1]+l] == False:\n                count+=1\n                flag[target[0]+k,target[1]+l]=True\n    printe(result-len(candidate))\n    \n    # 処理スペース\n\n\n\n\n\n\n    ...\n\n\n\n# テストケース中枢処理\ndef case():\n    # TESTCASE = 1\n    TESTCASE = int(input()) # テストケース数の指定\n    for _ in range(TESTCASE):\n        try:\n            main()\n        except solvedException:\n            continue\n        # raise unSolvedExeption\n\n\n# インポート\nimport sys, itertools, math, heapq\nfrom collections import defaultdict, deque\nfrom sortedcontainers import SortedSet, SortedList, SortedDict  # CPython?\n\n# 定数・環境設定\nsys.setrecursionlimit(10**8)\nsys.set_int_max_str_digits(0)\ndict = defaultdict\nUPPER_ALPHABET = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""\nLOWER_ALPHABET=""abcdefghijklmnopqrstuvwxyz""\nMOD = 998244353\nMAX = 10**18\nLRUD = [(0, 1), (0, -1), (1, 0), (-1, 0)]\nLURULDRD = [(-1, -1), (-1, 1), (1, -1), (1, 1),(0,0)]\n\n# 各種関数定義(超圧縮)\n## 便利関数\ndef printe(*values,sep="" "",end=""\n""):print(*values,sep=sep,end=end); fin()\ndef prin(stop=False,sep="" "",end=""\n"",file=sys.stdout):return (lambda*values:printe(*values,sep=sep,end=end)) if stop else (lambda*values:print(*values,sep=sep,end=end,file=file))\ndef yes(f=True): printe(""Yes"") if (f) else None\ndef no(f=True): printe(""No"") if (f) else None\ndef debug(*values,sep="" "",end=""\n""): print(*values,sep=sep,end=end,file=sys.stderr)\ndef printYN(f:bool): yes() if f else no()\ndef fin(f=True): raise solvedException if f else None\n## 分割関数\ndef split(value:str|list,sep:str="" "",func:callable=str) -> list:\n    result = []\n    if type(value) == list:\n        for i in range(len(value)):\n            result.append(split(value[i],sep))\n        return result\n    else:\n        if sep in value:\n            for i in value.split(sep):\n                result.append(func(i))\n        else:\n            result.append(func(value))\n        return result\n## 入力受け取り用\ndef input():return(sys.stdin.readline()).rstrip() #入力定数倍\ndef splitS(value:str|list,sep:str="" "")->str:return split(value,sep)[0] #文字列・分割して最初\ndef splitN(value:str|list,sep:str="" "")->int:return split(value,sep,int)[0] # 整数・分割して最初\ndef splitB(value:str|list,sep:str="" "")->list:return list(split(value,sep)) # 文字列・分割してすべて\ndef splitA(value:str|list,sep:str="" "")->list:return list(split(value,sep,int)) # 整数・分割してすべて\n\n# 例外クラス\nclass solvedException(Exception): pass # 処理打ち切り例外\nclass unSolvedExeption(Exception): # 回答未出力例外\n    def __init__(description = ""解答が出力されていません。""): super().__init__(description)\n\n# 実行\nif __name__ == ""__main__"":\n    case()\n",python,tab
2280,3301857,"dev/ABC424d.py",7546,0,"\n    ",python,content
2281,3302056,"dev/ABC424d.py",7551,0,"f",python,content
2282,3302216,"dev/ABC424d.py",7552,0,"l",python,content
2283,3302324,"dev/ABC424d.py",7553,0,"a",python,content
2284,3303080,"dev/ABC424d.py",7554,0,"h",python,content
2285,3303619,"dev/ABC424d.py",7554,1,"",python,content
2286,3303861,"dev/ABC424d.py",7554,0,"g",python,content
2287,3304185,"dev/ABC424d.py",7555,0,".",python,content
2288,3312593,"dev/ABC424d.py",7556,0,"a",python,content
2289,3312717,"dev/ABC424d.py",7557,0,"d",python,content
2290,3312826,"dev/ABC424d.py",7558,0,"d",python,content
2291,3313533,"dev/ABC424d.py",7559,0,"_",python,content
2292,3316558,"dev/ABC424d.py",7560,0,"W",python,content
2293,3318363,"dev/ABC424d.py",7561,0,"A",python,content
2294,3318519,"dev/ABC424d.py",7562,0,"L",python,content
2295,3319005,"dev/ABC424d.py",7562,1,"",python,content
2296,3319162,"dev/ABC424d.py",7561,1,"",python,content
2297,3319311,"dev/ABC424d.py",7560,1,"",python,content
2298,3334939,"dev/ABC424d.py",7560,0,"WAL",python,content
2299,3336340,"dev/ABC424d.py",7562,1,"",python,content
2300,3336505,"dev/ABC424d.py",7561,1,"",python,content
2301,3336711,"dev/ABC424d.py",7561,0,"w",python,content
2302,3336759,"dev/ABC424d.py",7562,0,"a",python,content
2303,3337077,"dev/ABC424d.py",7562,1,"",python,content
2304,3337244,"dev/ABC424d.py",7561,1,"",python,content
2305,3337363,"dev/ABC424d.py",7560,1,"",python,content
2306,3337445,"dev/ABC424d.py",7560,0,"w",python,content
2307,3337492,"dev/ABC424d.py",7561,0,"a",python,content
2308,3337647,"dev/ABC424d.py",7562,0,"l",python,content
2309,3337750,"dev/ABC424d.py",7563,0,"l",python,content
2310,3338048,"dev/ABC424d.py",7564,0,"()",python,content
2311,3341467,"dev/ABC424d.py",7565,0,"f",python,content
2312,3341622,"dev/ABC424d.py",7566,0,"a",python,content
2313,3341722,"dev/ABC424d.py",7567,0,"l",python,content
2314,3341822,"dev/ABC424d.py",7568,0,"s",python,content
2315,3341971,"dev/ABC424d.py",7569,0,"e",python,content
2316,3342417,"dev/ABC424d.py",7565,5,"False",python,content
2317,3382956,"dev/ABC424d.py",8249,1,"",python,content
2318,3383414,"dev/ABC424d.py",8249,0,"1",python,content
2319,3386344,"dev/ABC424d.py",8251,0,"]",python,content
2320,3386762,"dev/ABC424d.py",8251,1,"",python,content
2321,3386908,"dev/ABC424d.py",8251,0,"[",python,content
2322,3386974,"dev/ABC424d.py",8252,0,"]",python,content
2323,3388116,"dev/ABC424d.py",8252,0,"0",python,content
2324,3391454,"dev/ABC424d.py",8263,0,"[",python,content
2325,3391517,"dev/ABC424d.py",8264,0,"]",python,content
2326,3392005,"dev/ABC424d.py",8264,0,"1",python,content
2327,3413981,"dev/ABC424d.py",8324,29,"flag[target[1][0]+k,target[1][1]+l]",python,content
2328,3428882,"dev/ABC424d.py",8130,0,"\n    ",python,content
2329,3429164,"dev/ABC424d.py",8135,0,"i",python,content
2330,3429297,"dev/ABC424d.py",8136,0,"f",python,content
2331,3429441,"dev/ABC424d.py",8137,0," ",python,content
2332,3430424,"dev/ABC424d.py",8138,0,"c",python,content
2333,3430808,"dev/ABC424d.py",8138,1,"",python,content
2334,3430981,"dev/ABC424d.py",8138,0,"l",python,content
2335,3431016,"dev/ABC424d.py",8139,0,"e",python,content
2336,3431138,"dev/ABC424d.py",8140,0,"n",python,content
2337,3431388,"dev/ABC424d.py",8141,0,"()",python,content
2338,3431581,"dev/ABC424d.py",8142,0,"c",python,content
2339,3431737,"dev/ABC424d.py",8143,0,"n",python,content
2340,3431793,"dev/ABC424d.py",8144,0,"a",python,content
2341,3432354,"dev/ABC424d.py",8142,3,"candidate",python,content
2342,3433186,"dev/ABC424d.py",8151,0,"=",python,content
2343,3433363,"dev/ABC424d.py",8152,0,"=",python,content
2344,3433849,"dev/ABC424d.py",8153,0,"0",python,content
2345,3435257,"dev/ABC424d.py",8155,0,":",python,content
2346,3435334,"dev/ABC424d.py",8156,0,"\n        ",python,content
2347,3435932,"dev/ABC424d.py",8165,0,"p",python,content
2348,3436109,"dev/ABC424d.py",8166,0,"r",python,content
2349,3436253,"dev/ABC424d.py",8167,0,"i",python,content
2350,3436413,"dev/ABC424d.py",8168,0,"n",python,content
2351,3436444,"dev/ABC424d.py",8169,0,"t",python,content
2352,3436664,"dev/ABC424d.py",8170,0,"e",python,content
2353,3436860,"dev/ABC424d.py",8171,0,"()",python,content
2354,3437438,"dev/ABC424d.py",8172,0,"0",python,content
2355,3446218,"dev/ABC424d.py",8153,1,"",python,content
2356,3446356,"dev/ABC424d.py",8152,1,"",python,content
2357,3446527,"dev/ABC424d.py",8151,1,"",python,content
2358,3447195,"dev/ABC424d.py",8152,0,"=",python,content
2359,3447405,"dev/ABC424d.py",8153,0,"=",python,content
2360,3447713,"dev/ABC424d.py",8154,0,"0",python,content
2361,3539709,"dev/ABC424d.py",7506,0,"\n",python,content
2362,3539909,"dev/ABC424d.py",7507,0,"\n",python,content
2363,3542057,"dev/ABC424d.py",8450,13,"",python,content
2364,3543780,"dev/ABC424d.py",7506,0,"    # 処理スペース\n",python,content
2365,3545030,"dev/ABC424d.py",7519,1,"",python,content
2366,3561986,"dev/ABC424d.py",8417,0," ",python,content
2367,3562311,"dev/ABC424d.py",8419,0," ",python,content
2368,3822380,"dev/ABC424d.py",9178,1,"",python,content
2369,3822557,"dev/ABC424d.py",9177,1,"",python,content
2370,3822658,"dev/ABC424d.py",9176,1,"",python,content
2371,3822807,"dev/ABC424d.py",9175,1,"",python,content
2372,3822958,"dev/ABC424d.py",9174,1,"",python,content
2373,3823057,"dev/ABC424d.py",9173,1,"",python,content
2374,3835862,"dev/ABC424d.py",9173,0,",(0,0)",python,content
2375,3869763,"dev/ABC424d.py",8206,1,"",python,content
2376,3878049,"dev/ABC424d.py",9172,2,"",python,content
2377,3878447,"dev/ABC424d.py",9172,1,"",python,content
2378,3878608,"dev/ABC424d.py",9172,1,"",python,content
2379,3878725,"dev/ABC424d.py",9172,1,"",python,content
2380,3878864,"dev/ABC424d.py",9172,1,"",python,content
2381,3883529,"dev/ABC424d.py",9172,0,"0,0)",python,content
2382,3884103,"dev/ABC424d.py",9172,0,",(",python,content
2383,3887849,"dev/ABC424d.py",8206,0,"=",python,content
2384,4043007,"dev/ABC424d.py",7554,5,"",python,content
2385,4043488,"dev/ABC424d.py",7554,0,"T",python,content
2386,4043751,"dev/ABC424d.py",7555,0,"r",python,content
2387,4043920,"dev/ABC424d.py",7556,0,"u",python,content
2388,4044107,"dev/ABC424d.py",7557,0,"e",python,content
2389,4044700,"dev/ABC424d.py",7554,4,"",python,content
2390,4044902,"dev/ABC424d.py",7554,0,"False",python,content
2391,4052453,"dev/ABC424d.py",7554,5,"",python,content
2392,4052800,"dev/ABC424d.py",7554,0,"T",python,content
2393,4052963,"dev/ABC424d.py",7555,0,"r",python,content
2394,4053096,"dev/ABC424d.py",7556,0,"u",python,content
2395,4053149,"dev/ABC424d.py",7557,0,"e",python,content
2396,4177470,"dev/ABC424d.py",7554,4,"",python,content
2397,4177731,"dev/ABC424d.py",7554,0,"f",python,content
2398,4177959,"dev/ABC424d.py",7555,0,"a",python,content
2399,4178021,"dev/ABC424d.py",7556,0,"l",python,content
2400,4178192,"dev/ABC424d.py",7557,0,"s",python,content
2401,4178412,"dev/ABC424d.py",7558,0,"e",python,content
2402,4178821,"dev/ABC424d.py",7554,5,"False",python,content
2403,4180750,"dev/ABC424d.py",7579,5,"",python,content
2404,4181077,"dev/ABC424d.py",7579,0,"T",python,content
2405,4181249,"dev/ABC424d.py",7580,0,"r",python,content
2406,4181351,"dev/ABC424d.py",7581,0,"u",python,content
2407,4181428,"dev/ABC424d.py",7582,0,"e",python,content
2408,4206530,"dev/ABC424d.py",8205,1,"",python,content
2409,4316650,"dev/ABC424d.py",9179,0,"\n",python,content
2410,4316879,"dev/ABC424d.py",9180,0,"\n",python,content
2411,4318025,"dev/ABC424d.py",9179,0,"R",python,content
2412,4318127,"dev/ABC424d.py",9180,0,"I",python,content
2413,4318250,"dev/ABC424d.py",9181,0,"G",python,content
2414,4318400,"dev/ABC424d.py",9182,0,"H",python,content
2415,4318600,"dev/ABC424d.py",9183,0,"T",python,content
2416,4318785,"dev/ABC424d.py",9184,0,"_",python,content
2417,4319164,"dev/ABC424d.py",9185,0,"D",python,content
2418,4319301,"dev/ABC424d.py",9186,0,"O",python,content
2419,4319401,"dev/ABC424d.py",9187,0,"W",python,content
2420,4319513,"dev/ABC424d.py",9188,0,"N",python,content
2421,4319673,"dev/ABC424d.py",9189,0," ",python,content
2422,4319846,"dev/ABC424d.py",9190,0,"=",python,content
2423,4320000,"dev/ABC424d.py",9191,0," ",python,content
2424,4320316,"dev/ABC424d.py",9192,0,"[]",python,content
2425,4330352,"dev/ABC424d.py",9193,0,"0",python,content
2426,4330455,"dev/ABC424d.py",9194,0,",",python,content
2427,4330577,"dev/ABC424d.py",9195,0,"0",python,content
2428,4331917,"dev/ABC424d.py",9196,0,")",python,content
2428,4331917,"dev/ABC424d.py",9196,0,")",python,content
2429,4331917,"dev/ABC424d.py",9193,0,"(",python,content
2430,4334701,"dev/ABC424d.py",9193,5,",",python,content
2431,4335118,"dev/ABC424d.py",9193,1,"(0,0)",python,content
2432,4335676,"dev/ABC424d.py",9198,0,",",python,content
2433,4335869,"dev/ABC424d.py",9199,0,"(0,0)",python,content
2434,4336169,"dev/ABC424d.py",9204,0,",",python,content
2435,4336425,"dev/ABC424d.py",9205,0,"(0,0)",python,content
2436,4336889,"dev/ABC424d.py",9210,0,",",python,content
2437,4337034,"dev/ABC424d.py",9211,0,"(0,0)",python,content
2438,4342689,"dev/ABC424d.py",9202,1,"",python,content
2439,4342863,"dev/ABC424d.py",9202,0,"1",python,content
2440,4344963,"dev/ABC424d.py",9208,0,"1",python,content
2440,4344963,"dev/ABC424d.py",9208,0,"1",python,content
2441,4344964,"dev/ABC424d.py",9208,1,"",python,content
2442,4347296,"dev/ABC424d.py",9212,1,"",python,content
2443,4347350,"dev/ABC424d.py",9212,0,"1",python,content
2444,4347812,"dev/ABC424d.py",9214,1,"",python,content
2445,4347888,"dev/ABC424d.py",9214,0,"1",python,content
2446,4352284,"dev/ABC424d.py",7694,13,"R",python,content
2447,4352340,"dev/ABC424d.py",7695,0,"O",python,content
2448,4352877,"dev/ABC424d.py",7696,0,"G",python,content
2449,4353176,"dev/ABC424d.py",7696,1,"",python,content
2450,4353326,"dev/ABC424d.py",7695,1,"",python,content
2451,4354014,"dev/ABC424d.py",7695,0,"I",python,content
2452,4354375,"dev/ABC424d.py",7696,0,"G",python,content
2453,4354551,"dev/ABC424d.py",7697,0,"H",python,content
2454,4354762,"dev/ABC424d.py",7694,4,"RIGHT_DOWN",python,content
2455,4357742,"dev/ABC424d.py",7919,8,"",python,content
2456,4357926,"dev/ABC424d.py",7918,1,"",python,content
2457,4358083,"dev/ABC424d.py",7914,4,"",python,content
2458,4358535,"dev/ABC424d.py",7914,0,"R",python,content
2459,4358636,"dev/ABC424d.py",7915,0,"I",python,content
2460,4358733,"dev/ABC424d.py",7916,0,"G",python,content
2461,4358878,"dev/ABC424d.py",7917,0,"H",python,content
2462,4359370,"dev/ABC424d.py",7914,4,"RIGHT_DOWN",python,content
2463,4362703,"dev/ABC424d.py",8262,8,"",python,content
2464,4362891,"dev/ABC424d.py",8261,1,"",python,content
2465,4363162,"dev/ABC424d.py",8257,4,"",python,content
2466,4363522,"dev/ABC424d.py",8257,0,"R",python,content
2467,4363631,"dev/ABC424d.py",8258,0,"I",python,content
2468,4363705,"dev/ABC424d.py",8259,0,"G",python,content
2469,4364029,"dev/ABC424d.py",8257,3,"RIGHT_DOWN",python,content
2470,4398857,"dev/ABC424d.py",8181,0,"\n        ",python,content
2471,4399545,"dev/ABC424d.py",8186,4,"",python,content
2472,4400723,"dev/ABC424d.py",8186,0,"m",python,content
2473,4400799,"dev/ABC424d.py",8187,0,"e",python,content
2474,4400997,"dev/ABC424d.py",8188,0,"a",python,content
2475,4401244,"dev/ABC424d.py",8189,0,"n",python,content
2476,4401321,"dev/ABC424d.py",8190,0,"i",python,content
2477,4401402,"dev/ABC424d.py",8191,0,"n",python,content
2478,4401555,"dev/ABC424d.py",8192,0,"g",python,content
2479,4401814,"dev/ABC424d.py",8193,0," ",python,content
2480,4402169,"dev/ABC424d.py",8194,0,"=",python,content
2481,4402363,"dev/ABC424d.py",8195,0," ",python,content
2482,4402475,"dev/ABC424d.py",8196,0,"[]",python,content
2483,4405796,"dev/ABC424d.py",8430,0,"\n                ",python,content
2484,4406171,"dev/ABC424d.py",8447,0,"m",python,content
2485,4406248,"dev/ABC424d.py",8448,0,"e",python,content
2486,4406501,"dev/ABC424d.py",8449,0,"a",python,content
2487,4407200,"dev/ABC424d.py",8447,3,"meaning",python,content
2488,4407463,"dev/ABC424d.py",8454,0,".",python,content
2489,4407666,"dev/ABC424d.py",8455,0,"a",python,content
2490,4407966,"dev/ABC424d.py",8456,0,"p",python,content
2491,4408131,"dev/ABC424d.py",8457,0,"p",python,content
2492,4408233,"dev/ABC424d.py",8458,0,"e",python,content
2493,4408337,"dev/ABC424d.py",8459,0,"n",python,content
2494,4408404,"dev/ABC424d.py",8460,0,"d",python,content
2495,4410484,"dev/ABC424d.py",8461,0,"()",python,content
2496,4413827,"dev/ABC424d.py",8462,0,"t",python,content
2497,4413875,"dev/ABC424d.py",8463,0,"a",python,content
2498,4414004,"dev/ABC424d.py",8464,0,"r",python,content
2499,4414151,"dev/ABC424d.py",8465,0,"g",python,content
2500,4414295,"dev/ABC424d.py",8466,0,"e",python,content
2501,4414443,"dev/ABC424d.py",8467,0,"t",python,content
2502,4432026,"dev/ABC424d.py",8110,28,"",python,content
2503,4432815,"dev/ABC424d.py",8110,0,"\n",python,content
2504,4433092,"dev/ABC424d.py",8110,0,"    ",python,content
2505,4433392,"dev/ABC424d.py",8114,0,"r",python,content
2506,4433583,"dev/ABC424d.py",8115,0,"e",python,content
2507,4433805,"dev/ABC424d.py",8116,0,"s",python,content
2508,4433906,"dev/ABC424d.py",8117,0,"u",python,content
2509,4433934,"dev/ABC424d.py",8118,0,"l",python,content
2510,4434975,"dev/ABC424d.py",8119,0,"t",python,content
2511,4435509,"dev/ABC424d.py",8120,0," ",python,content
2512,4435674,"dev/ABC424d.py",8121,0,"=",python,content
2513,4435883,"dev/ABC424d.py",8122,0,"[]",python,content
2514,4436574,"dev/ABC424d.py",8122,2,"",python,content
2515,4436735,"dev/ABC424d.py",8122,0,"0",python,content
2516,4436983,"dev/ABC424d.py",8123,0," ",python,content
2517,4437583,"dev/ABC424d.py",8122,0," ",python,content
2518,4439459,"dev/ABC424d.py",8184,2,"",python,content
2519,4439610,"dev/ABC424d.py",8182,2,"",python,content
2520,4439763,"dev/ABC424d.py",8174,8,"",python,content
2521,4440506,"dev/ABC424d.py",8170,4,"",python,content
2522,4440901,"dev/ABC424d.py",8169,1,"",python,content
2523,4453611,"dev/ABC424d.py",8439,1,"",python,content
2524,4453801,"dev/ABC424d.py",8433,6,"",python,content
2525,4453986,"dev/ABC424d.py",8432,1,"",python,content
2526,4454173,"dev/ABC424d.py",8426,6,"",python,content
2527,4454384,"dev/ABC424d.py",8425,1,"",python,content
2528,4454676,"dev/ABC424d.py",8418,7,"",python,content
2529,4468734,"dev/ABC424d.py",8225,0,"\n        ",python,content
2530,4469018,"dev/ABC424d.py",8234,0,"v",python,content
2531,4469111,"dev/ABC424d.py",8235,0,"a",python,content
2532,4469432,"dev/ABC424d.py",8236,0,"l",python,content
2533,4469557,"dev/ABC424d.py",8237,0,"i",python,content
2534,4469747,"dev/ABC424d.py",8238,0,"d",python,content
2535,4470471,"dev/ABC424d.py",8239,0," ",python,content
2536,4470707,"dev/ABC424d.py",8240,0,"=",python,content
2537,4470809,"dev/ABC424d.py",8241,0," ",python,content
2538,4471264,"dev/ABC424d.py",8242,0,"0",python,content
2539,4471699,"dev/ABC424d.py",8242,1,"",python,content
2540,4472095,"dev/ABC424d.py",8242,0,"f",python,content
2541,4472224,"dev/ABC424d.py",8243,0,"a",python,content
2542,4472329,"dev/ABC424d.py",8244,0,"l",python,content
2543,4472386,"dev/ABC424d.py",8245,0,"s",python,content
2544,4472523,"dev/ABC424d.py",8246,0,"e",python,content
2545,4472895,"dev/ABC424d.py",8242,5,"False",python,content
2546,4474344,"dev/ABC424d.py",8440,0,"v",python,content
2547,4474446,"dev/ABC424d.py",8441,0,"a",python,content
2548,4474623,"dev/ABC424d.py",8442,0,"l",python,content
2549,4474709,"dev/ABC424d.py",8443,0,"i",python,content
2550,4474919,"dev/ABC424d.py",8440,4,"valid",python,content
2551,4475419,"dev/ABC424d.py",8445,0," ",python,content
2552,4475603,"dev/ABC424d.py",8446,0,"=",python,content
2553,4475713,"dev/ABC424d.py",8447,0," ",python,content
2554,4475918,"dev/ABC424d.py",8448,0,"T",python,content
2555,4476113,"dev/ABC424d.py",8449,0,"r",python,content
2556,4476227,"dev/ABC424d.py",8450,0,"u",python,content
2557,4476302,"dev/ABC424d.py",8451,0,"e",python,content
2558,4476892,"dev/ABC424d.py",8448,4,"True",python,content
2559,4477159,"dev/ABC424d.py",8451,1,"",python,content
2560,4479807,"dev/ABC424d.py",8451,0,"e",python,content
2561,4480045,"dev/ABC424d.py",8448,4,"True",python,content
2562,4480548,"dev/ABC424d.py",8452,0,"\n                ",python,content
2563,4480770,"dev/ABC424d.py",8465,4,"",python,content
2564,4481287,"dev/ABC424d.py",8461,4,"",python,content
2565,4481985,"dev/ABC424d.py",8461,0,"r",python,content
2566,4482088,"dev/ABC424d.py",8462,0,"e",python,content
2567,4482288,"dev/ABC424d.py",8463,0,"s",python,content
2568,4482383,"dev/ABC424d.py",8464,0,"l",python,content
2569,4482449,"dev/ABC424d.py",8465,0,"t",python,content
2570,4483049,"dev/ABC424d.py",8461,5,"result",python,content
2571,4483205,"dev/ABC424d.py",8467,0,"+",python,content
2572,4483308,"dev/ABC424d.py",8468,0,"=",python,content
2573,4483369,"dev/ABC424d.py",8469,0,"{}",python,content
2574,4483953,"dev/ABC424d.py",8469,2,"",python,content
2575,4485090,"dev/ABC424d.py",8469,0,"v",python,content
2576,4485318,"dev/ABC424d.py",8470,0,"a",python,content
2577,4485477,"dev/ABC424d.py",8471,0,"l",python,content
2578,4485491,"dev/ABC424d.py",8472,0,"i",python,content
2579,4485851,"dev/ABC424d.py",8469,4,"valid",python,content
2580,4508579,"dev/ABC424d.py",8506,1,"",python,content
2581,4508745,"dev/ABC424d.py",8497,9,"",python,content
2582,4508865,"dev/ABC424d.py",8496,1,"",python,content
2583,4509023,"dev/ABC424d.py",8493,3,"",python,content
2584,4509241,"dev/ABC424d.py",8492,1,"",python,content
2585,4550327,"dev/ABC424d.py",8267,10,"",python,content
2586,4550874,"dev/ABC424d.py",8267,0,"L",python,content
2587,4551040,"dev/ABC424d.py",8268,0,"R",python,content
2588,4551674,"dev/ABC424d.py",8267,2,"LRUD",python,content
2589,4551874,"dev/ABC424d.py",8271,0,"+",python,content
2590,4552146,"dev/ABC424d.py",8272,0,"L",python,content
2591,4552322,"dev/ABC424d.py",8273,0,"U",python,content
2592,4553002,"dev/ABC424d.py",8272,2,"LURULDRD",python,content
2593,4584802,"dev/ABC424d.py",7694,10,"",python,content
2594,4585206,"dev/ABC424d.py",7694,0,"L",python,content
2595,4585378,"dev/ABC424d.py",7695,0,"U",python,content
2596,4585975,"dev/ABC424d.py",7694,2,"LURULDRD",python,content
2597,4586851,"dev/ABC424d.py",7694,0,"L",python,content
2598,4587029,"dev/ABC424d.py",7695,0,"R",python,content
2599,4587255,"dev/ABC424d.py",7696,0,"U",python,content
2600,4587547,"dev/ABC424d.py",7697,0,"D",python,content
2601,4587759,"dev/ABC424d.py",7698,0,"+",python,content
2602,4760055,"dev/ABC424d.py",6539,5,"",python,content
2603,4760393,"dev/ABC424d.py",6539,0,"N",python,content
2604,4760582,"dev/ABC424d.py",6540,0,"o",python,content
2605,4760656,"dev/ABC424d.py",6541,0,"n",python,content
2606,4760813,"dev/ABC424d.py",6542,0,"e",python,content
2607,4762315,"dev/ABC424d.py",6539,4,"",python,content
2608,4763236,"dev/ABC424d.py",6539,0,"N",python,content
2609,4763425,"dev/ABC424d.py",6540,0,"o",python,content
2610,4763530,"dev/ABC424d.py",6541,0,"n",python,content
2611,4763654,"dev/ABC424d.py",6542,0,"e",python,content
2612,4764183,"dev/ABC424d.py",6542,1,"",python,content
2613,4764743,"dev/ABC424d.py",6539,3,"",python,content
2614,4766338,"dev/ABC424d.py",6539,0,"""""",python,content
2615,4767701,"dev/ABC424d.py",6539,2,"",python,content
2616,4768764,"dev/ABC424d.py",6538,1,"",python,content
2617,4770162,"dev/ABC424d.py",6538,0,",",python,content
2618,4770369,"dev/ABC424d.py",6539,0,"""""",python,content
2619,4770743,"dev/ABC424d.py",6539,2,"",python,content
2620,4771045,"dev/ABC424d.py",6539,0,"Non",python,content
2621,4771531,"dev/ABC424d.py",6542,0,"e",python,content
2622,4771777,"dev/ABC424d.py",6539,4,"",python,content
2623,4772123,"dev/ABC424d.py",6539,0,"None",python,content
2624,4772713,"dev/ABC424d.py",6539,4,"",python,content
2625,4772917,"dev/ABC424d.py",6539,0,"value",python,content
2626,4777504,"dev/ABC424d.py",7579,4,"",python,content
2627,4777828,"dev/ABC424d.py",7579,0,"""""",python,content
2628,4779382,"dev/ABC424d.py",7580,0,"-",python,content
2629,4779429,"dev/ABC424d.py",7581,0,"1",python,content
2630,4816703,"dev/ABC424d.py",7582,1,"",python,content
2631,4818084,"dev/ABC424d.py",7579,1,"",python,content
2632,4832725,"dev/ABC424d.py",7554,5,"",python,content
2633,4833667,"dev/ABC424d.py",7554,0,"0",python,content
2634,4838326,"dev/ABC424d.py",7739,4,"",python,content
2635,4838531,"dev/ABC424d.py",7739,0,"1",python,content
2636,4844343,"dev/ABC424d.py",7852,5,"0",python,content
2637,4844883,"dev/ABC424d.py",7956,5,"0",python,content
2638,4845762,"dev/ABC424d.py",8228,5,"0",python,content
2639,4846670,"dev/ABC424d.py",8318,5,"0",python,content
2640,4857358,"dev/ABC424d.py",8400,4,"1",python,content
2641,4857748,"dev/ABC424d.py",8426,4,"1",python,content
2642,4897090,"dev/ABC424d.py",7740,0," ",python,content
2643,4897218,"dev/ABC424d.py",7741,0,"i",python,content
2644,4897329,"dev/ABC424d.py",7742,0,"f",python,content
2645,4897474,"dev/ABC424d.py",7743,0," ",python,content
2646,4897636,"dev/ABC424d.py",7744,0,"n",python,content
2647,4897682,"dev/ABC424d.py",7745,0,"o",python,content
2648,4897847,"dev/ABC424d.py",7746,0,"t",python,content
2649,4899256,"dev/ABC424d.py",7747,0," ",python,content
2650,4900171,"dev/ABC424d.py",7747,1,"",python,content
2651,4900738,"dev/ABC424d.py",7746,1,"",python,content
2652,4900913,"dev/ABC424d.py",7745,1,"",python,content
2653,4901085,"dev/ABC424d.py",7744,1,"",python,content
2654,4901449,"dev/ABC424d.py",7744,0,"f",python,content
2655,4902153,"dev/ABC424d.py",7745,0,"l",python,content
2656,4902231,"dev/ABC424d.py",7746,0,"a",python,content
2657,4902751,"dev/ABC424d.py",7744,3,"flag",python,content
2658,4902969,"dev/ABC424d.py",7748,0,"[]",python,content
2659,4903600,"dev/ABC424d.py",7749,0,"i",python,content
2660,4904008,"dev/ABC424d.py",7750,0,"+",python,content
2661,4904471,"dev/ABC424d.py",7751,0,"k",python,content
2662,4904856,"dev/ABC424d.py",7752,0,",",python,content
2663,4905124,"dev/ABC424d.py",7753,0,"j",python,content
2664,4905420,"dev/ABC424d.py",7754,0,"+",python,content
2665,4905970,"dev/ABC424d.py",7755,0,"k",python,content
2666,4906349,"dev/ABC424d.py",7755,1,"",python,content
2667,4906553,"dev/ABC424d.py",7755,0,"l",python,content
2668,4907153,"dev/ABC424d.py",7757,0," ",python,content
2669,4907351,"dev/ABC424d.py",7758,0,"=",python,content
2670,4907681,"dev/ABC424d.py",7758,1,"",python,content
2671,4907832,"dev/ABC424d.py",7758,0,"1",python,content
2672,4907981,"dev/ABC424d.py",7759,0,"=",python,content
2673,4908254,"dev/ABC424d.py",7760,0,"-",python,content
2674,4908282,"dev/ABC424d.py",7761,0,"1",python,content
2675,4908568,"dev/ABC424d.py",7761,1,"",python,content
2676,4908724,"dev/ABC424d.py",7760,1,"",python,content
2677,4908876,"dev/ABC424d.py",7759,1,"",python,content
2678,4909024,"dev/ABC424d.py",7758,1,"",python,content
2679,4909272,"dev/ABC424d.py",7758,0,"!",python,content
2680,4909351,"dev/ABC424d.py",7759,0,"=",python,content
2681,4909724,"dev/ABC424d.py",7760,0,"-",python,content
2682,4909787,"dev/ABC424d.py",7761,0,"1",python,content
2683,4910704,"dev/ABC424d.py",7762,0,":",python,content
2684,4911124,"dev/ABC424d.py",7762,1,"",python,content
2685,4912856,"dev/ABC424d.py",7761,1,"",python,content
2686,4913564,"dev/ABC424d.py",7760,1,"",python,content
2687,4917029,"dev/ABC424d.py",7741,2,"",python,content
2688,4917221,"dev/ABC424d.py",7741,5,"",python,content
2689,4917346,"dev/ABC424d.py",7741,1,"",python,content
2690,4917500,"dev/ABC424d.py",7741,1,"",python,content
2691,4917671,"dev/ABC424d.py",7741,1,"",python,content
2692,4917868,"dev/ABC424d.py",7741,1,"",python,content
2693,4918068,"dev/ABC424d.py",7741,1,"",python,content
2694,4918268,"dev/ABC424d.py",7741,1,"",python,content
2695,4918468,"dev/ABC424d.py",7741,1,"",python,content
2696,4918616,"dev/ABC424d.py",7741,1,"",python,content
2697,4918780,"dev/ABC424d.py",7741,1,"",python,content
2698,4918923,"dev/ABC424d.py",7741,1,"",python,content
2699,4919072,"dev/ABC424d.py",7741,1,"",python,content
2700,4919226,"dev/ABC424d.py",7741,1,"",python,content
2701,4919608,"dev/ABC424d.py",7740,1,"",python,content
2702,4935598,"dev/ABC424d.py",7702,0,"\n                    ",python,content
2703,4935883,"dev/ABC424d.py",7723,0,"i",python,content
2704,4936037,"dev/ABC424d.py",7724,0,"f",python,content
2705,4936139,"dev/ABC424d.py",7725,0," ",python,content
2706,4936605,"dev/ABC424d.py",7726,0,"f",python,content
2707,4936699,"dev/ABC424d.py",7727,0,"l",python,content
2708,4936833,"dev/ABC424d.py",7728,0,"a",python,content
2709,4936955,"dev/ABC424d.py",7729,0,"g",python,content
2710,4937252,"dev/ABC424d.py",7730,0,"[]",python,content
2711,4937801,"dev/ABC424d.py",7731,0,"i",python,content
2712,4938405,"dev/ABC424d.py",7732,0,"+",python,content
2713,4938608,"dev/ABC424d.py",7733,0,"k",python,content
2714,4939009,"dev/ABC424d.py",7734,0,",",python,content
2715,4939248,"dev/ABC424d.py",7735,0,"j",python,content
2716,4939553,"dev/ABC424d.py",7736,0,"+",python,content
2717,4939941,"dev/ABC424d.py",7737,0,"l",python,content
2718,4945995,"dev/ABC424d.py",7726,0,"0",python,content
2719,4946153,"dev/ABC424d.py",7727,0,"1",python,content
2720,4946394,"dev/ABC424d.py",7727,1,"",python,content
2721,4946545,"dev/ABC424d.py",7726,1,"",python,content
2722,4946605,"dev/ABC424d.py",7726,0,"-",python,content
2723,4946695,"dev/ABC424d.py",7727,0,"1",python,content
2724,4946949,"dev/ABC424d.py",7728,0,"<",python,content
2725,4947199,"dev/ABC424d.py",7729,0,"=",python,content
2726,4947802,"dev/ABC424d.py",7729,1,"",python,content
2727,4949386,"dev/ABC424d.py",7742,0,":",python,content
2728,4949832,"dev/ABC424d.py",7745,0,"   ",python,content
2729,4950752,"dev/ABC424d.py",7744,4,"",python,content
2730,4951233,"dev/ABC424d.py",7744,0,"    ",python,content
2731,4952071,"dev/ABC424d.py",7748,1,"",python,content
2732,4952225,"dev/ABC424d.py",7748,1,"",python,content
2733,4952374,"dev/ABC424d.py",7748,1,"",python,content
2734,4952929,"dev/ABC424d.py",7748,0,"    ",python,content
2735,5137545,"dev/ABC424d.py",9263,1,"",python,content
2736,5137621,"dev/ABC424d.py",9263,0,"1",python,content
2737,5163172,"dev/ABC424d.py",7661,0,"                for k,l in LRUD+LURULDRD:\n",python,content
2738,5163765,"dev/ABC424d.py",7677,0,"# ",python,content
2739,5167039,"dev/ABC424d.py",7737,8,"",python,content
2740,5167247,"dev/ABC424d.py",7736,1,"",python,content
2741,5167521,"dev/ABC424d.py",7732,4,"",python,content
2742,5168241,"dev/ABC424d.py",7732,0,"R",python,content
2743,5168323,"dev/ABC424d.py",7733,0,"I",python,content
2744,5168429,"dev/ABC424d.py",7734,0,"G",python,content
2745,5168649,"dev/ABC424d.py",7735,0,"H",python,content
2746,5168928,"dev/ABC424d.py",7732,4,"RIGHT_DOWN",python,content
2747,5171353,"dev/ABC424d.py",8340,8,"",python,content
2748,5171527,"dev/ABC424d.py",8339,1,"",python,content
2749,5171665,"dev/ABC424d.py",8335,4,"",python,content
2750,5172047,"dev/ABC424d.py",8335,0,"R",python,content
2751,5172248,"dev/ABC424d.py",8336,0,"G",python,content
2752,5172725,"dev/ABC424d.py",8335,2,"RIGHT_DOWN",python,content
2753,5257589,"dev/ABC424d.py",7990,10,"",python,content
2754,5258980,"dev/ABC424d.py",7990,0,"R",python,content
2755,5259426,"dev/ABC424d.py",7990,1,"",python,content
2756,5263876,"dev/ABC424d.py",7990,0,"R",python,content
2757,5264073,"dev/ABC424d.py",7990,1,"",python,content
2758,5264408,"dev/ABC424d.py",7990,0,"RIGHT_DOWN",python,content
2759,5265931,"dev/ABC424d.py",7979,0,"# ",python,content
2760,5266477,"dev/ABC424d.py",8003,0,"\n                ",python,content
2761,5266677,"dev/ABC424d.py",8004,16,"",python,content
2761,5266677,"dev/ABC424d.py",8004,16,"",python,content
2762,5266678,"dev/ABC424d.py",8004,0,"                # for k,l in LRUD+LURULDRD:\n",python,content
2763,5267603,"dev/ABC424d.py",8020,2,"",python,content
2764,5270209,"dev/ABC424d.py",8045,1,"",python,content
2765,5272706,"dev/ABC424d.py",7677,2,"",python,content
2766,5273190,"dev/ABC424d.py",7719,0,"# ",python,content
2767,5278473,"dev/ABC424d.py",8390,0,"\n            ",python,content
2768,5278729,"dev/ABC424d.py",8391,12,"",python,content
2768,5278729,"dev/ABC424d.py",8391,12,"",python,content
2769,5278729,"dev/ABC424d.py",8391,0,"                # for k,l in LRUD+LURULDRD:\n",python,content
2770,5279473,"dev/ABC424d.py",8391,16,"",python,content
2771,5279684,"dev/ABC424d.py",8391,0,"    ",python,content
2772,5279893,"dev/ABC424d.py",8395,0,"    ",python,content
2773,5280728,"dev/ABC424d.py",8399,2,"",python,content
2774,5281105,"dev/ABC424d.py",8368,0,"# ",python,content
2775,5281975,"dev/ABC424d.py",8426,1,"",python,content
2776,5290636,"dev/ABC424d.py",8303,0,"=",python,content
2777,5291162,"dev/ABC424d.py",8303,1,"",python,content
2778,5318637,"dev/ABC424d.py",8401,0,"# ",python,content
2779,5319047,"dev/ABC424d.py",8368,2,"",python,content
2780,5541596,"dev/ABC424d.py",8020,0,"# ",python,content
2781,5541997,"dev/ABC424d.py",7979,2,"",python,content
2782,5547540,"dev/ABC424d.py",7979,0,"# ",python,content
2783,5547739,"dev/ABC424d.py",8020,2,"",python,content
2784,5668718,"dev/ABC424d.py",8508,1,"",python,content
2785,5669192,"dev/ABC424d.py",8508,0,"\n                ",python,content
2786,5669242,"dev/ABC424d.py",8525,16,"",python,content
2787,5669344,"dev/ABC424d.py",8525,0,"\n                ",python,content
2788,5669962,"dev/ABC424d.py",8542,0,"\n                ",python,content
2789,5670985,"dev/ABC424d.py",8542,17,"",python,content
2790,5671343,"dev/ABC424d.py",8525,17,"",python,content
2791,5768680,"dev/ABC424d.py",8020,0,"# ",python,content
2792,5769656,"dev/ABC424d.py",7979,2,"",python,content
2793,5790502,"dev/ABC424d.py",8018,2,"",python,content
2794,5790987,"dev/ABC424d.py",7979,0,"# ",python,content
2795,5792978,"dev/ABC424d.py",7677,0,"# ",python,content
2796,5793355,"dev/ABC424d.py",7721,2,"",python,content
2797,5825037,"dev/ABC424d.py",8083,1,"",python,content
2798,5825084,"dev/ABC424d.py",8083,0,"\",python,content
2799,5825463,"dev/ABC424d.py",8083,1,"",python,content
2800,5825737,"dev/ABC424d.py",8083,0,"!",python,content
2801,5829067,"dev/ABC424d.py",8086,1,"",python,content
2802,5829223,"dev/ABC424d.py",8086,0,"1",python,content
2803,5830745,"dev/ABC424d.py",8083,1,"",python,content
2804,5831167,"dev/ABC424d.py",8083,0,"=",python,content
2805,5833616,"dev/ABC424d.py",8086,1,"",python,content
2806,5833716,"dev/ABC424d.py",8086,0,"0",python,content
2807,5936509,"dev/ABC424d.py",7677,2,"",python,content
2808,5936894,"dev/ABC424d.py",7719,0,"# ",python,content
2809,5995780,"dev/ABC424d.py",7979,2,"",python,content
2810,5997943,"dev/ABC424d.py",7979,0,"# ",python,content
